{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActionSpec",
            "id": "interface-ActionSpec-de3b0e7808e2035ce75f1e4dfa6e0de78e27e01aed1904bc801955ed09218d08d1689788309b8b998e0400ba56d2eef8937b0ea2b598d39efe7fe53fe0710d1c",
            "file": "src/app/common/grid/action-buttons/action-buttons.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface ActionSpec {\n  handler: () => void\n  label: string\n}\n\nexport interface ActionsSpec {\n  actions: ActionSpec[]\n}\n\n@Component({\n  selector: 'app-action-buttons',\n  templateUrl: './action-buttons.component.html',\n  styleUrls: ['./action-buttons.component.scss']\n})\nexport class ActionButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  actions: ActionSpec[]\n\n  @Input()\n  spec: ActionsSpec\n\n  ngOnInit(): void {\n    // cfr https://stackoverflow.com/questions/71011494/angular-8-click-event-not-firing-inside-ngfor-when-iterating-over-object-array\n    this.actions = this.spec.actions\n  }\n\n  callActionHandler(action: ActionSpec) {\n    action.handler()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActionsSpec",
            "id": "interface-ActionsSpec-de3b0e7808e2035ce75f1e4dfa6e0de78e27e01aed1904bc801955ed09218d08d1689788309b8b998e0400ba56d2eef8937b0ea2b598d39efe7fe53fe0710d1c",
            "file": "src/app/common/grid/action-buttons/action-buttons.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface ActionSpec {\n  handler: () => void\n  label: string\n}\n\nexport interface ActionsSpec {\n  actions: ActionSpec[]\n}\n\n@Component({\n  selector: 'app-action-buttons',\n  templateUrl: './action-buttons.component.html',\n  styleUrls: ['./action-buttons.component.scss']\n})\nexport class ActionButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  actions: ActionSpec[]\n\n  @Input()\n  spec: ActionsSpec\n\n  ngOnInit(): void {\n    // cfr https://stackoverflow.com/questions/71011494/angular-8-click-event-not-firing-inside-ngfor-when-iterating-over-object-array\n    this.actions = this.spec.actions\n  }\n\n  callActionHandler(action: ActionSpec) {\n    action.handler()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ApiConfigurationParams",
            "id": "interface-ApiConfigurationParams-db041dc06e29ffff133e6d5e32db744ae15b56d237310730b07121a087b880ef86bfa2e2e7295842e4664c922ffe09403d7b1d5a30d7ab08039b93a07ba2355e",
            "file": "src/app/api/api-configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:8080';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "properties": [
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Parameters for <code>ApiModule.forRoot()</code></p>\n",
            "rawdescription": "\n\nParameters for `ApiModule.forRoot()`\n",
            "methods": []
        },
        {
            "name": "BreadcrumbItem",
            "id": "interface-BreadcrumbItem-776615923215f6c5482f2270abe570abbcb5f6b3f59c35e4fd3d52358b039ddb693ef93c5e38fa070456398b1677ef72ce7bfb9be2f8a938dbf0719c05a62f15",
            "file": "src/app/common/layout/breadcrumb/breadcrumb.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface BreadcrumbItem {\n  label?: string\n  route?: string\n}\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  breadcrumbs: BreadcrumbItem[]\n\n  ngOnInit(): void {\n  }\n\n  get active(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-1\n    return this.breadcrumbs[idx]\n  }\n\n  get parentOfActive(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-2\n    return this.breadcrumbs[idx]\n  }\n\n  get allParents(): BreadcrumbItem[] {\n    let idxActive = this.breadcrumbs.length-1\n    return this.breadcrumbs.slice(0, idxActive)\n  }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CollectionNavItem",
            "id": "interface-CollectionNavItem-6d7f3ca6fa382f9b556d9c5a381d156eb1b40868ad9296659dce55e497bf2a3c42d7b0f34bfc5b92cbc109344e8faaec57fbca18e17a4a4aaf8c3f6de2576ba5",
            "file": "src/app/api/models/collection-nav-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CollectionNavItem {\n  collectionName?: string;\n}\n",
            "properties": [
                {
                    "name": "collectionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CollectionSelector",
            "id": "interface-CollectionSelector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Selector"
        },
        {
            "name": "CollectionSnapshot",
            "id": "interface-CollectionSnapshot-b1f927a4bde09839ea302a10554dba3b8908c2f9c6dfb5d9c998c3071f1662fe5d88f74eb239a62b824ac3aec75d9cd88e7a449cc9be7b20188da7df3af8d959",
            "file": "src/app/api/models/collection-snapshot.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CollectionSnapshot {\n  collectionName?: string;\n  documents?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "collectionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "documents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConfirmationDialogSpec",
            "id": "interface-ConfirmationDialogSpec-1009ff9abfa95b495160a829a45d39299156678089bca892c691485174519748ddceaea8b57c760e1c4825ec3f9d1276fb448deb53fdfbbd00cdc105ce31c98b",
            "file": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nexport interface ConfirmationDialogSpec {\n  title: string\n  message: string\n  warning? : string\n  cancel: () => void\n  confirm: () => void\n}\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  @Input()\n  spec: ConfirmationDialogSpec\n\n  faExclamationTriangle=faExclamationTriangle\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "warning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConnectionTestRequestDto",
            "id": "interface-ConnectionTestRequestDto-81f18f029e355f5976e057ebc42ff6e7900cfdba19e415bd49fc65ec45fd5231729a7c3c68eb82d84424a5ce10e289849a50adc9f5370fff0bd41ce91980a57e",
            "file": "src/app/api/models/connection-test-request-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConnectionTestRequestDto {\n  settings?: { [key: string]: string };\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConnectionTestResponseDto",
            "id": "interface-ConnectionTestResponseDto-9881baaa41dacd5c50db29cc10534140e86ef82e58a3b77746f4144b0855bf506d21798a5c3d7a2d88af0a4cd181bd10b4c76d47a5c4c88a5b87abb71572b724",
            "file": "src/app/api/models/connection-test-response-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConnectionTestResponseDto {\n  message?: string;\n  result?: boolean;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleDescriptorDto",
            "id": "interface-ConsoleDescriptorDto-2d2feb4fe5aa1f8446693ed7f1e1d2b8a859afaef28129de2607efe07cba316c5d3ac6ebe6d99ed6d9b70eeb0e42fbe256ef4f1d9a52ad8751c42c0ee92b097b",
            "file": "src/app/api/models/console-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConsoleDescriptorItemDto } from './console-descriptor-item-dto';\nexport interface ConsoleDescriptorDto {\n  items?: Array<ConsoleDescriptorItemDto>;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ConsoleDescriptorItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleDescriptorItemDto",
            "id": "interface-ConsoleDescriptorItemDto-7f147b224f134660bc15b7c9cdbd1b90a670d1d7a3c6c8a0609a9eab0a6d3f3337a07760445b0a84843070e2aad2a152f4358d3d219d48b468625cf081ee6936",
            "file": "src/app/api/models/console-descriptor-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConsoleDescriptorItemDto {\n  inputType?: 'SELECT' | 'TEXT' | 'TEXTAREA';\n  name?: string;\n  selectValues?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SELECT\" | \"TEXT\" | \"TEXTAREA\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "selectValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleRequestDto",
            "id": "interface-ConsoleRequestDto-25c2957e99e86d92128684d4e2ca98aaee8918fe8ce70fbce8533a61dab2130c827aed254f272ec53093dad0feb582dc36cf2705178585457c4f5c7b0512f6b4",
            "file": "src/app/api/models/console-request-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConsoleRequestDto {\n  attributes?: { [key: string]: string };\n  environmentKey?: string;\n  systemComponentKey?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleResponseItemDto",
            "id": "interface-ConsoleResponseItemDto-7a0bf9ba25c03f2669da64dfe3870de5e4ea0c40cfbfad1cb04e634b472df6571da3c3d9abd1b8d22ff9eafa767ef24642252a40639b89576e0bcec616021157",
            "file": "src/app/api/models/console-response-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConsoleResponseItemDto {\n  consoleOutputType?: 'JSON' | 'STACKTRACE';\n  content?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "consoleOutputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"JSON\" | \"STACKTRACE\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DashboardStoreState",
            "id": "interface-DashboardStoreState-f1c1d959803ff62dbfba0a4692b24e9574af83e457ff07513a3b66501a42178a8c64d44a763b284cc2b709d28c7a46a2d95e4730ae6e9d07fad7d38ea73b1f70",
            "file": "src/app/dashboard-page/dashboard.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {SnapshotId, SnapshotSummaryDto} from \"@fabric/models\";\n\ninterface DashboardStoreState {\n    summaries: SnapshotSummaryDto[]\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DashboardService implements OnDestroy {\n\n    constructor(private snapshotControllerService: SnapshotControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<DashboardStoreState>({ summaries: []})\n\n    summaries$ = this.store.pipe(\n        map(state => state.summaries),\n        distinctUntilChanged(),\n    )\n\n    private subscriptions: Subscription[] = []\n\n    init() {\n        this.loadSummaries();\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    private loadSummaries() {\n        this.snapshotControllerService.listUsingGet({}).subscribe(summaries => {\n            this.store.next({summaries: summaries})\n        })\n    }\n\n    createSnapshot(environment: string, name: string) {\n        this.snapshotControllerService.createUsingPost({ environment, name}).subscribe(\n        (dto) => this.loadSummaries()\n        )\n    }\n\n    delete(snapshotId: SnapshotId) {\n        this.snapshotControllerService.deleteByIdUsingDelete({id: snapshotId.id}).subscribe(()=> {\n            this.loadSummaries()\n        })\n\n    }\n}\n",
            "properties": [
                {
                    "name": "summaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotSummaryDto[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceSelection",
            "id": "interface-DataSourceSelection-23d5db79c1a4c6734c2a28ae8ac7f1d736c047000a682ca0c549320ef5a260b807f621e4392866b685830dfea023b6d5326da30c98a075ae974bbb81938d02b2",
            "file": "src/app/console-page/data-source-selection-panel/data-source-selection-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {faBolt} from '@fortawesome/free-solid-svg-icons';\n\nexport interface DataSourceSelection {\n    environmentKey: string,\n    systemComponentKey: string\n}\n\n@Component({\n    selector: 'app-data-source-selection-panel',\n    templateUrl: './data-source-selection-panel.component.html',\n    styleUrls: ['./data-source-selection-panel.component.scss']\n})\nexport class DataSourceSelectionPanelComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$;\n\n    collapsed: boolean = false\n\n    faBolt = faBolt\n\n    ngOnInit(): void {\n    }\n\n    @Output()\n    selected = new EventEmitter<DataSourceSelection>()\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n    })\n\n    onEnvironmentChange() {\n\n    }\n\n    connect() {\n        this.selected.emit(this.formGroup.value)\n        this.collapse()\n    }\n\n    collapse() {\n        this.collapsed = true\n    }\n\n    expand() {\n        this.collapsed = false\n    }\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DocumentSelector",
            "id": "interface-DocumentSelector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Selector"
        },
        {
            "name": "EnvironmentDialogData",
            "id": "interface-EnvironmentDialogData-5851485ab52937c62c5efc90b4006ba7adec9e0e03c73b03d366c88f22368ca66a416f7401aa57bbe45b910bc13697917dc748ef7ed2deee8314c245f75ae63c",
            "file": "src/app/system-description-page/environment-panel/environment-dialog/environment-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\n\nexport interface EnvironmentDialogData {\n  key: string,\n  label: string,\n}\n\nexport interface EnvironmentDialogSpec {\n  keys: string[];\n  data: EnvironmentDialogData\n  cancel: () => void\n  confirm: (data: EnvironmentDialogData) => void\n}\n\n@Component({\n  selector: 'app-environment-dialog',\n  templateUrl: './environment-dialog.component.html',\n  styleUrls: ['./environment-dialog.component.scss']\n})\nexport class EnvironmentDialogComponent implements OnInit, OnChanges {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: EnvironmentDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n      this.formGroup.setValue(this.spec.data)\n      this.formGroup.markAsPristine()\n      this.formGroup.markAsUntouched()\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })\n\n  public get keyControl(): FormControl {\n    return <FormControl> this.formGroup.get('key')\n  }\n\n  public keyControlInvalid() : boolean {\n    return showValidationMessages(this.keyControl)\n  }\n\n  public get labelControl(): FormControl {\n    return <FormControl> this.formGroup.get('label')\n  }\n\n  labelControlInvalid() {\n    return showValidationMessages(this.labelControl)\n  }\n\n  private get systemTypeControl(): FormControl {\n    return <FormControl> this.formGroup.get('systemType')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EnvironmentDialogSpec",
            "id": "interface-EnvironmentDialogSpec-5851485ab52937c62c5efc90b4006ba7adec9e0e03c73b03d366c88f22368ca66a416f7401aa57bbe45b910bc13697917dc748ef7ed2deee8314c245f75ae63c",
            "file": "src/app/system-description-page/environment-panel/environment-dialog/environment-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\n\nexport interface EnvironmentDialogData {\n  key: string,\n  label: string,\n}\n\nexport interface EnvironmentDialogSpec {\n  keys: string[];\n  data: EnvironmentDialogData\n  cancel: () => void\n  confirm: (data: EnvironmentDialogData) => void\n}\n\n@Component({\n  selector: 'app-environment-dialog',\n  templateUrl: './environment-dialog.component.html',\n  styleUrls: ['./environment-dialog.component.scss']\n})\nexport class EnvironmentDialogComponent implements OnInit, OnChanges {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: EnvironmentDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n      this.formGroup.setValue(this.spec.data)\n      this.formGroup.markAsPristine()\n      this.formGroup.markAsUntouched()\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })\n\n  public get keyControl(): FormControl {\n    return <FormControl> this.formGroup.get('key')\n  }\n\n  public keyControlInvalid() : boolean {\n    return showValidationMessages(this.keyControl)\n  }\n\n  public get labelControl(): FormControl {\n    return <FormControl> this.formGroup.get('label')\n  }\n\n  labelControlInvalid() {\n    return showValidationMessages(this.labelControl)\n  }\n\n  private get systemTypeControl(): FormControl {\n    return <FormControl> this.formGroup.get('systemType')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDialogData",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EnvironmentDto",
            "id": "interface-EnvironmentDto-2f2b77a2cd249ec767cbf794b56c048961209023feba9714ab74eb64d8f3de26070db07a777f96479bfcd0f06aaa5d6a0ab700f1f90ce69d6d0d8c9860541d0f",
            "file": "src/app/api/models/environment-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EnvironmentDto {\n  key?: string;\n  label?: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExecutionDto",
            "id": "interface-ExecutionDto-e711f081926e6c10b9e2ad19723cd7e15940cb558a4b9fe7848b17317ec031a621c0fab7de75b33329952394015310707958b44951b30d2060ddabdc23e97661",
            "file": "src/app/api/models/execution-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ExecutionDto {\n  children?: Array<ExecutionDto>;\n  label?: string;\n  percentDone?: number;\n  status?: 'DONE' | 'RUNNING';\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ExecutionDto>",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "percentDone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"DONE\" | \"RUNNING\"",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExecutionId",
            "id": "interface-ExecutionId-46397e6d926bf03dd37a4310926c13cb93eeb24aaf23876af907fd03978f1b35d494effcf0d4020d3f67432f82f9b59090153794c91635226ce0abd2ce221029",
            "file": "src/app/api/models/execution-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ExecutionId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileStore",
            "id": "interface-FileStore-1d2c0d68f3503e5542753b0c5b6960fdaa1e312d1d66349f08db01fc7e0b5c3ea42d0a7a22d1f59fa29723ca391abac8b9ecbf7c02323524648a53de95fcdbe6",
            "file": "src/app/api/models/file-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FileStore {\n  blockSize?: number;\n  readOnly?: boolean;\n  totalSpace?: number;\n  unallocatedSpace?: number;\n  usableSpace?: number;\n}\n",
            "properties": [
                {
                    "name": "blockSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "unallocatedSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "usableSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileSystem",
            "id": "interface-FileSystem-447a1aba6f1b46b96c9b18603c6559da8d4ac69278724c7b4db8a594136e9dfea8199b7aeed32704f1446b9bcdc91beb809a392036e5659fba5fe825a5a1694d",
            "file": "src/app/api/models/file-system.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IterableFileStore } from './iterable-file-store';\nimport { IterablePath } from './iterable-path';\nimport { UserPrincipalLookupService } from './user-principal-lookup-service';\nexport interface FileSystem {\n  fileStores?: IterableFileStore;\n  open?: boolean;\n  readOnly?: boolean;\n  rootDirectories?: IterablePath;\n  separator?: string;\n  userPrincipalLookupService?: UserPrincipalLookupService;\n}\n",
            "properties": [
                {
                    "name": "fileStores",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterableFileStore",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rootDirectories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterablePath",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userPrincipalLookupService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPrincipalLookupService",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HistoryItem",
            "id": "interface-HistoryItem-cad8bcc54aba95a9881ce972bb51cbdf8b66ac8a1f34fd491359ef557bf608f280b341e253f172ba93339aece941fb30adbb17c4fc52f2687333f1c54b2bba35",
            "file": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport interface HistoryItem {\n  attributes?: { [key: string]: string };\n}\n\n@Component({\n  selector: 'app-history-panel',\n  templateUrl: './history-panel.component.html',\n  styleUrls: ['./history-panel.component.scss']\n})\nexport class HistoryPanelComponent {\n\n  @Input()\n  historyItems: HistoryItem[]\n\n  @Output()\n  selected = new EventEmitter<HistoryItem>()\n\n  @Output()\n  convert = new EventEmitter<HistoryItem>()\n\n  apply(item: HistoryItem) {\n    this.selected.emit(item)\n  }\n\n  asOneLine(item: HistoryItem): string {\n    let line = ''\n    Object.keys(item.attributes).forEach((key, index) => {\n      let value = item.attributes[key]\n      if (value) {\n        line += index > 0 ? ' ' : ''\n        line += item.attributes[key]\n      }\n    })\n    return line\n  }\n\n  convertToSnippet(item: HistoryItem) {\n    this.convert.emit(item)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IterableFileStore",
            "id": "interface-IterableFileStore-4288f93037660b28716bf942a52b6c8fe71058cbfb1738b33347503f4b2987ba071c3d699b02f102549f662bc79a6261c624eb2c0b8a76122162497a86831bf1",
            "file": "src/app/api/models/iterable-file-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IterableFileStore {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "IterablePath",
            "id": "interface-IterablePath-3c46aa4a899fea328dbed8628c3839102788a1888d7bd7f4916db4e273225c6d17371ebfe5b6427dd1be8110b9953ae53d8ebfb2ca7e1dab5ba5edbbdc52fed0",
            "file": "src/app/api/models/iterable-path.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IterablePath {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "MetaModelDialogData",
            "id": "interface-MetaModelDialogData-ccdcc6ef3fdacff9c38dfce0ed6bf8a9a915585642af1e281bc3f472d1f007f3dca9ee94de4e2921f0a51744ab1d9120bbb58c2006913d2545cbd716ba9bbc83",
            "file": "src/app/system-description-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {SystemDescriptionWrapper} from \"../../system-description.service\";\n\n\nexport interface MetaModelDialogData {\n  environmentKey: string\n}\n\nexport interface MetaModelDialogSpec {\n  systemComponent: SystemComponentDto\n  systemDescription: SystemDescriptionDto\n  data: MetaModelDialogData\n  cancel: () => void\n  confirm: (data: MetaModelDialogData) => void\n}\n\n@Component({\n  selector: 'app-meta-model-dialog',\n  templateUrl: './meta-model-dialog.component.html',\n  styleUrls: ['./meta-model-dialog.component.scss']\n})\nexport class MetaModelDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: MetaModelDialogSpec\n\n  formGroup: FormGroup = new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })\n\n  public get environmentKeyControl(): FormControl {\n    return <FormControl> this.formGroup.get('environmentKey')\n  }\n\n  environmentKeyControlInvalid() {\n    return showValidationMessages(this.environmentKeyControl)\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    return new SystemDescriptionWrapper(this.spec.systemDescription).getEnvironments(this.spec.systemComponent);\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaModelDialogSpec",
            "id": "interface-MetaModelDialogSpec-ccdcc6ef3fdacff9c38dfce0ed6bf8a9a915585642af1e281bc3f472d1f007f3dca9ee94de4e2921f0a51744ab1d9120bbb58c2006913d2545cbd716ba9bbc83",
            "file": "src/app/system-description-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {SystemDescriptionWrapper} from \"../../system-description.service\";\n\n\nexport interface MetaModelDialogData {\n  environmentKey: string\n}\n\nexport interface MetaModelDialogSpec {\n  systemComponent: SystemComponentDto\n  systemDescription: SystemDescriptionDto\n  data: MetaModelDialogData\n  cancel: () => void\n  confirm: (data: MetaModelDialogData) => void\n}\n\n@Component({\n  selector: 'app-meta-model-dialog',\n  templateUrl: './meta-model-dialog.component.html',\n  styleUrls: ['./meta-model-dialog.component.scss']\n})\nexport class MetaModelDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: MetaModelDialogSpec\n\n  formGroup: FormGroup = new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })\n\n  public get environmentKeyControl(): FormControl {\n    return <FormControl> this.formGroup.get('environmentKey')\n  }\n\n  environmentKeyControlInvalid() {\n    return showValidationMessages(this.environmentKeyControl)\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    return new SystemDescriptionWrapper(this.spec.systemDescription).getEnvironments(this.spec.systemComponent);\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaModelDialogData",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemDescriptionDto",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaModelId",
            "id": "interface-MetaModelId-a8dec1a83121436f08cc46e2bff14b41e6114aa8bbbae411ead9f870004e079997fa7d2c0f6b064eb93c144567d4a03b2d21b438da8c98fe99159c6fc6b4fdad",
            "file": "src/app/api/models/meta-model-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaModelId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoMetaModel",
            "id": "interface-MongoMetaModel-4331c98521111f59499114e4aa0b0332672e243fc06a938707c1e854260f05450ad08acc77709ff6e52f13a82ae49ba52cfabb0ccd31f3a4815d757b2ea9e1a3",
            "file": "src/app/api/models/mongo-meta-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MongoMetaModel {\n  collections?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "collections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoMetaModelStoreState",
            "id": "interface-MongoMetaModelStoreState-0ad0dedcaf8f91a225cdf406e9f20bd07e353fb1a5578a5b3f830a1dd9bc00b902dd1f5b9e7354d7bca555dffc4a3590bde83150a8508ff527c89b8b70c648d5",
            "file": "src/app/system-description-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoMetaModel, MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoMetaModelStoreState {\n  modelMap: Map<String, MongoMetaModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoMetaModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoMetaModelStoreState>({ modelMap: new Map() })\n\n  metaModels$ = this.store.pipe(\n      map(state => state.modelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::metaModels$ >>', this.metaModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getMetaModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoMetaModel> = this.store.getValue().modelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ modelMap : new Map<String, MongoMetaModel>(map) })\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "modelMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<String | MongoMetaModel>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoNavigationModel",
            "id": "interface-MongoNavigationModel-4a53f7317dcc6d994b695d5bcee2dcf07579eb6138561a9a631c1a53dd8fa4ba9b5d92d02ebe3b12e7dea7f25ff4c51f1e63ba09a2968e13f8ce166e4c93ed98",
            "file": "src/app/api/models/mongo-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CollectionNavItem } from './collection-nav-item';\nexport interface MongoNavigationModel {\n  roots?: Array<CollectionNavItem>;\n}\n",
            "properties": [
                {
                    "name": "roots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CollectionNavItem>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoNavigationModelStoreState",
            "id": "interface-MongoNavigationModelStoreState-4f46ff1e41869ec3bc8d099bb9c91a77db6fd219a9c1e73283bbb4784ef3cbf8e8963746dd44ae2ef0a37fb5742c61d60558364eaff50172ebf7eb1fa6d18b2d",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoNavigationModelStoreState {\n  navigationModelMap: Map<String, MongoNavigationModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoNavigationModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoNavigationModelStoreState>({ navigationModelMap: new Map() })\n\n  navigationModels$ = this.store.pipe(\n      map(state => state.navigationModelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::navigationModels$ >>', this.navigationModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getNavigationModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoNavigationModel> = this.store.getValue().navigationModelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ navigationModelMap : new Map<String, MongoNavigationModel>(map) })\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "navigationModelMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<String | MongoNavigationModel>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoSnapshot",
            "id": "interface-MongoSnapshot-249b46c6fc2ecda8a014e39f74d05d0251981defc721cd4fe9d686a1e0fcf85387cefda95bea12951c292a1cecec90d5816c1010bab122d4e9ce3d42b000afcf",
            "file": "src/app/api/models/mongo-snapshot.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CollectionSnapshot } from './collection-snapshot';\nexport interface MongoSnapshot {\n  collectionSnapshots?: Array<CollectionSnapshot>;\n}\n",
            "properties": [
                {
                    "name": "collectionSnapshots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CollectionSnapshot>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoSnapshotStoreState",
            "id": "interface-MongoSnapshotStoreState-18e76ce4072761643ecae86ef50d89e06abf2f29e3d04c9e5f2ea7441501f354e194593c4ab42e30cb438e39a4a502517ba102e709ad1946b8ef037dda59801e",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\n\n\ninterface MongoSnapshotStoreState {\n  mongoSnapshot: MongoSnapshot\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoService {\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { }\n\n  private store = new BehaviorSubject<MongoSnapshotStoreState>({ mongoSnapshot: null})\n\n  mongoSnapshot$ = this.store.pipe(\n      map(state => state.mongoSnapshot),\n      distinctUntilChanged(),\n  )\n\n  public load(snapshotId: SnapshotId, componentKey: string) {\n    this.mongoSnapshotControllerService.getMongoSnapshotUsingGet({ id: snapshotId.id, componentKey}).subscribe(mongoSnapshot =>\n      this.store.next({ mongoSnapshot })\n    )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "mongoSnapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MongoSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ParameterOptions",
            "id": "interface-ParameterOptions-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "properties": [
                {
                    "name": "explode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Defines the options for appending a parameter</p>\n",
            "rawdescription": "\n\nDefines the options for appending a parameter\n",
            "methods": []
        },
        {
            "name": "Path",
            "id": "interface-Path-71bddba6df3c6cf7cb0e96343a61c9338c8d0bd0bc0ffd1b2744a01611466b63ba3b6c6749fc6ef876f6d7c2ab6cc335b924dbbe47cac3409d73b0e308cdfe99",
            "file": "src/app/api/models/path.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FileSystem } from './file-system';\nexport interface Path {\n  absolute?: boolean;\n  fileName?: Path;\n  fileSystem?: FileSystem;\n  nameCount?: number;\n  parent?: Path;\n  root?: Path;\n}\n",
            "properties": [
                {
                    "name": "absolute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fileSystem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileSystem",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nameCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PopupMenuItemSpec",
            "id": "interface-PopupMenuItemSpec-0ed2a066939d050c3817abdaa5224e1550abfc0e1e39053eafafcfdc32891f5f99dc3539479d24da9479d665fdc02464183e284e09222363516fefb06a72513e",
            "file": "src/app/common/popup-menu/popup-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, HostBinding, HostListener, Input, OnInit} from '@angular/core';\n\n// based on https://mobiarch.wordpress.com/2018/07/07/create-a-popup-menu-in-angular/\n\nexport interface PopupMenuItemSpec {\n  label: string\n  onClick: () => void\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.scss']\n})\nexport class PopupMenuComponent implements OnInit {\n  @HostBinding(\"style.top\") y = \"0px\"\n  @HostBinding(\"style.left\") x = \"0px\"\n  @HostBinding(\"style.visibility\") visibility = \"hidden\"\n  @Input() @HostBinding(\"style.width\") width = \"200px\"\n\n  constructor() {\n  }\n\n  items: PopupMenuItemSpec[]\n\n  ngOnInit() {\n  }\n\n  open(e: MouseEvent) {\n    this.x = `${e.pageX}px`\n    this.y = `${e.pageY}px`\n\n    this.visibility = \"visible\"\n\n    e.stopPropagation()\n  }\n\n  close() {\n    this.visibility = \"hidden\"\n  }\n\n  @HostListener('document:click')\n  public onDocumentClick() {\n    if (this.visibility === \"visible\") {\n      this.close()\n    }\n  }\n\n  onClick(item: PopupMenuItemSpec) {\n    item.onClick.apply(this, [])\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootSelector",
            "id": "interface-RootSelector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Selector"
        },
        {
            "name": "Selector",
            "id": "interface-Selector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Setting",
            "id": "interface-Setting-1289dbba31363e2ebb912d824c1b471afc2c400e5422a296b06d6860e5693b1871981e0daf43cf6328167b36a2adbebb32bdfa1fb9addcd8c8c35a068086f400",
            "file": "src/app/system-description-page/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from \"@fabric/services\";\nimport {SettingsDialogData, SettingsDialogSpec} from \"./settings-panel/settings-dialog/settings-dialog.component\";\nimport {MongoMetaModelService} from \"./meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service\";\n\n\nexport interface Setting {\n    key: string,\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string,\n    environmentKey : string,\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService,\n        private mongoMetaModelService: MongoMetaModelService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string): Promise<StructureDto> {\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).toPromise()\n          .then(() => this.loadEnvironmentSystemComponentStructure(environmentKey, systemComponent.key))\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingDescriptorDto",
            "id": "interface-SettingDescriptorDto-2fd9a49b471091915cb47db49c4dfd999a4019b908761a61397cae3f21725378f6c6f2ca1f0a1941ad1b2333097fc6fdcc011af710868b2e101fde47791266cc",
            "file": "src/app/api/models/setting-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SettingDescriptorDto {\n  description?: string;\n  key?: string;\n  placeHolder?: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeHolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingRow",
            "id": "interface-SettingRow-1289dbba31363e2ebb912d824c1b471afc2c400e5422a296b06d6860e5693b1871981e0daf43cf6328167b36a2adbebb32bdfa1fb9addcd8c8c35a068086f400",
            "file": "src/app/system-description-page/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from \"@fabric/services\";\nimport {SettingsDialogData, SettingsDialogSpec} from \"./settings-panel/settings-dialog/settings-dialog.component\";\nimport {MongoMetaModelService} from \"./meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service\";\n\n\nexport interface Setting {\n    key: string,\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string,\n    environmentKey : string,\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService,\n        private mongoMetaModelService: MongoMetaModelService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string): Promise<StructureDto> {\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).toPromise()\n          .then(() => this.loadEnvironmentSystemComponentStructure(environmentKey, systemComponent.key))\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Setting[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingsDialogData",
            "id": "interface-SettingsDialogData-4ce3603220e9c8682843871f70b341321e40498046751c93d96ca232daca50680f670549cd051fcdca4141f8d26e5d0d0d207abfe6a49fbecc8c3460df132a13",
            "file": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './settings-dialog.component.html',\n    styleUrls: ['./settings-dialog.component.scss']\n})\nexport class SettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.specWrapper.getSystemType(this.spec.data.systemComponentKey))\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Setting[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingsDialogSpec",
            "id": "interface-SettingsDialogSpec-4ce3603220e9c8682843871f70b341321e40498046751c93d96ca232daca50680f670549cd051fcdca4141f8d26e5d0d0d207abfe6a49fbecc8c3460df132a13",
            "file": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './settings-dialog.component.html',\n    styleUrls: ['./settings-dialog.component.scss']\n})\nexport class SettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.specWrapper.getSystemType(this.spec.data.systemComponentKey))\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsDialogData",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ADD\" | \"EDIT\"",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "systemComponents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemTypeDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotComponentDto",
            "id": "interface-SnapshotComponentDto-67db3f083261a3a501a67b173ac6661328f3ce44cfcb6b1059198f964a2a5f09d773a5b2dedc834d0be4a9f19be1da738c5cb08c3099a296c71308bbd9f4d224",
            "file": "src/app/api/models/snapshot-component-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnapshotComponentDto {\n  componentKey?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "componentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDialogData",
            "id": "interface-SnapshotDialogData-756f5dfda07dc54512b97f6afd682ebd28eed3e4cf112f49c3d077edad0ecc37d8e7989d2775932006e0410a467a95c433d4533d70982686a70774701ba11780",
            "file": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions, TreeNode} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nclass StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDialogSpec",
            "id": "interface-SnapshotDialogSpec-756f5dfda07dc54512b97f6afd682ebd28eed3e4cf112f49c3d077edad0ecc37d8e7989d2775932006e0410a467a95c433d4533d70982686a70774701ba11780",
            "file": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions, TreeNode} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nclass StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogData",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "useNameGenerator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDialogTreeNode",
            "id": "interface-SnapshotDialogTreeNode-756f5dfda07dc54512b97f6afd682ebd28eed3e4cf112f49c3d077edad0ecc37d8e7989d2775932006e0410a467a95c433d4533d70982686a70774701ba11780",
            "file": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions, TreeNode} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nclass StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogTreeNode[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogTreeNode",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "structureDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StructureDto",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDto",
            "id": "interface-SnapshotDto-04ec92fa278178cef7aa40019d2efad175aca123921f796a7462a93ce1acf046ad94fc1c12deb7c9785aa9f5e373a3b376be435b772ce9bbd4d04f5b7cef0b98",
            "file": "src/app/api/models/snapshot-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SnapshotComponentDto } from './snapshot-component-dto';\nimport { SnapshotId } from './snapshot-id';\nexport interface SnapshotDto {\n  componentSnapshots?: Array<SnapshotComponentDto>;\n  environmentKey?: string;\n  name?: string;\n  snapshotId?: SnapshotId;\n}\n",
            "properties": [
                {
                    "name": "componentSnapshots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SnapshotComponentDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotId",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotId",
            "id": "interface-SnapshotId-7315c716792a93f633d5f19b39077b506f6cc17f57361ad721cc165f7c6657bcd11ef4ee2adb2d17120ee2e27b1f97b5bbb534df2713cd0034aa21c2183bda08",
            "file": "src/app/api/models/snapshot-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnapshotId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotStoreState",
            "id": "interface-SnapshotStoreState-282c7a58327aa5d9e91b11e0b39e2e8bb94670201dd9598e81e0a841ce3dabfbac9015986283747badc4d706417f657031538464876ff2c252e938c8229b317d",
            "file": "src/app/snapshot-page/snapshot.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {SnapshotDto, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {map,distinctUntilChanged} from \"rxjs/operators\";\n\ninterface SnapshotStoreState {\n  snapshot: SnapshotDto\n}\n\n@Injectable()\nexport class SnapshotService {\n\n  constructor(private snapshotControllerService : SnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<SnapshotStoreState>({ snapshot: null})\n\n  snapshot$ = this.store.pipe(\n      map(state => state.snapshot),\n      distinctUntilChanged(),\n  )\n\n  init() {\n    this.snapshot$.subscribe((dto)=> console.log(\">> snapshot$\", dto))\n  }\n\n  loadSnapshot(snapshotId: SnapshotId) {\n    this.snapshotControllerService.getByIdUsingGet(snapshotId).subscribe(dto => {\n      this.store.next({ snapshot: dto })\n    })\n  }\n\n}\n",
            "properties": [
                {
                    "name": "snapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDto",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotSummaryDto",
            "id": "interface-SnapshotSummaryDto-bfb4bbe091044e6cb98809bea89208fc9982be5cdaff00c8eb8a83e5b69640d18e5d2c06ac5138ea20c524c48e3cf5b8a975f3f9c71a8a60092dbbeca3ba8f46",
            "file": "src/app/api/models/snapshot-summary-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SnapshotId } from './snapshot-id';\nexport interface SnapshotSummaryDto {\n  environmentKey?: string;\n  name?: string;\n  snapshotId?: SnapshotId;\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotUploadDialogData",
            "id": "interface-SnapshotUploadDialogData-b456b21e9fa4bf32fb8f183facb5dc8af32d200f2feb67070ec92f2c7bec6c8f82b6024d40e4eb3b2576e907f9e0b6f4fc9a5374f84508614604185bf92a137f",
            "file": "src/app/dashboard-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto} from \"@fabric/models\";\n\nexport interface SnapshotUploadDialogData {\n  environment: string,\n}\n\nexport interface SnapshotUploadDialogSpec {\n  environments: EnvironmentDto[]\n  data: SnapshotUploadDialogData\n  cancel: () => void\n  confirm: (data: SnapshotUploadDialogData) => void\n}\n\n@Component({\n  selector: 'app-snapshot-upload-dialog',\n  templateUrl: './snapshot-upload-dialog.component.html',\n  styleUrls: ['./snapshot-upload-dialog.component.scss']\n})\nexport class SnapshotUploadDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: SnapshotUploadDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })\n\n  private get environmentControl(): FormControl {\n    return <FormControl> this.formGroup.get('environment')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotUploadDialogSpec",
            "id": "interface-SnapshotUploadDialogSpec-b456b21e9fa4bf32fb8f183facb5dc8af32d200f2feb67070ec92f2c7bec6c8f82b6024d40e4eb3b2576e907f9e0b6f4fc9a5374f84508614604185bf92a137f",
            "file": "src/app/dashboard-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto} from \"@fabric/models\";\n\nexport interface SnapshotUploadDialogData {\n  environment: string,\n}\n\nexport interface SnapshotUploadDialogSpec {\n  environments: EnvironmentDto[]\n  data: SnapshotUploadDialogData\n  cancel: () => void\n  confirm: (data: SnapshotUploadDialogData) => void\n}\n\n@Component({\n  selector: 'app-snapshot-upload-dialog',\n  templateUrl: './snapshot-upload-dialog.component.html',\n  styleUrls: ['./snapshot-upload-dialog.component.scss']\n})\nexport class SnapshotUploadDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: SnapshotUploadDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })\n\n  private get environmentControl(): FormControl {\n    return <FormControl> this.formGroup.get('environment')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotUploadDialogData",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnippetDialogData",
            "id": "interface-SnippetDialogData-5f78fa2c028b17837cd476b0de6203ca85f4ef23c90a174dacfb719e1890ab3740c3c890e2d49838a94980459141fddbc5b1662ec50852089ed4834b6ea3b584",
            "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ConsoleDescriptorDto} from \"@fabric/models\";\n\nexport interface SnippetDialogData {\n  title?: string\n  attributes?: { [key: string]: string };\n  fields?: string[]\n}\n\nexport interface SnippetDialogSpec {\n  descriptor: ConsoleDescriptorDto\n  data: SnippetDialogData\n  cancel: () => void\n  confirm: (data: SnippetDialogData) => void\n}\n\n@Component({\n  selector: 'app-snippet-dialog',\n  templateUrl: './snippet-dialog.component.html',\n  styleUrls: ['./snippet-dialog.component.scss']\n})\nexport class SnippetDialogComponent implements OnChanges {\n\n  constructor() { }\n\n  @Input()\n  spec: SnippetDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec) {\n      //this.titleControl.setValue(this.spec.data.title)\n      this.fieldsControl.controls = []\n      this.spec.descriptor.items.forEach(item => {\n          let value = this.spec.data.attributes[item.name]\n          this.fieldsControl.push(new FormControl(value))\n      })\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })\n\n  get titleControl():FormControl {\n    return <FormControl> this.formGroup.get('fields')\n  }\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnippetDialogSpec",
            "id": "interface-SnippetDialogSpec-5f78fa2c028b17837cd476b0de6203ca85f4ef23c90a174dacfb719e1890ab3740c3c890e2d49838a94980459141fddbc5b1662ec50852089ed4834b6ea3b584",
            "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ConsoleDescriptorDto} from \"@fabric/models\";\n\nexport interface SnippetDialogData {\n  title?: string\n  attributes?: { [key: string]: string };\n  fields?: string[]\n}\n\nexport interface SnippetDialogSpec {\n  descriptor: ConsoleDescriptorDto\n  data: SnippetDialogData\n  cancel: () => void\n  confirm: (data: SnippetDialogData) => void\n}\n\n@Component({\n  selector: 'app-snippet-dialog',\n  templateUrl: './snippet-dialog.component.html',\n  styleUrls: ['./snippet-dialog.component.scss']\n})\nexport class SnippetDialogComponent implements OnChanges {\n\n  constructor() { }\n\n  @Input()\n  spec: SnippetDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec) {\n      //this.titleControl.setValue(this.spec.data.title)\n      this.fieldsControl.controls = []\n      this.spec.descriptor.items.forEach(item => {\n          let value = this.spec.data.attributes[item.name]\n          this.fieldsControl.push(new FormControl(value))\n      })\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })\n\n  get titleControl():FormControl {\n    return <FormControl> this.formGroup.get('fields')\n  }\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnippetDialogData",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "descriptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConsoleDescriptorDto",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnippetDto",
            "id": "interface-SnippetDto-b534a93d6926e1fe6382343a2a9e91615916059060b5de7f99ca723f97d874e10e97bc7cee9f23ed36bd74c065549a5bd9bff5cc1a659ff86bab7a0d3b0b627d",
            "file": "src/app/api/models/snippet-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnippetDto {\n  attributes?: { [key: string]: string };\n  title?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StructureDto",
            "id": "interface-StructureDto-a246e1ce250475bfe5a43cdc7ac75eeaf5952f168cd2123d9bc9cab73f059a6b80f632ba3cb9739e748a0eee08385e0a7dc3bf74ccbd5fbdbc5f3a3aff21dbbc",
            "file": "src/app/api/models/structure-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StructureDto {\n  attributes?: { [key: string]: string };\n  children?: Array<StructureDto>;\n  id?: string;\n  structureType?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<StructureDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "structureType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemComponentDialogData",
            "id": "interface-SystemComponentDialogData-2ff6eb83a40af3df6f7c0703d02de9380cdbd9b33753f35468d9e915cd96c3801db2b5533aaabe110bc1e1bb8cba5e58c310362458bea475c959eec9e167a7b4",
            "file": "src/app/system-description-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\nimport {SystemDescriptionService} from '../../system-description.service';\nimport {SystemTypeDescriptorDto} from \"@fabric/models\";\n\nexport interface SystemComponentDialogData {\n    key: string,\n    label: string,\n    systemType: string,\n}\n\nexport interface SystemComponentDialogSpec {\n    systemTypes: SystemTypeDescriptorDto[]\n    keys: string[];\n    data: SystemComponentDialogData\n    cancel: () => void\n    confirm: (data: SystemComponentDialogData) => void\n}\n\n\n@Component({\n    selector: 'app-system-component-dialog',\n    templateUrl: './system-component-dialog.component.html',\n    styleUrls: ['./system-component-dialog.component.scss']\n})\nexport class SystemComponentDialogComponent implements OnInit, OnChanges {\n\n    constructor() {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SystemComponentDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n            this.formGroup.setValue(this.spec.data)\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })\n\n    public get keyControl(): FormControl {\n        return <FormControl> this.formGroup.get('key')\n    }\n\n    public keyControlInvalid() : boolean {\n        return showValidationMessages(this.keyControl)\n    }\n\n    public get labelControl(): FormControl {\n        return <FormControl> this.formGroup.get('label')\n    }\n\n    labelControlInvalid() {\n        return showValidationMessages(this.labelControl)\n    }\n\n    private get systemTypeControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemType')\n    }\n\n\n    systemTypeControlInvalid() {\n        return showValidationMessages(this.systemTypeControl)\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemComponentDialogSpec",
            "id": "interface-SystemComponentDialogSpec-2ff6eb83a40af3df6f7c0703d02de9380cdbd9b33753f35468d9e915cd96c3801db2b5533aaabe110bc1e1bb8cba5e58c310362458bea475c959eec9e167a7b4",
            "file": "src/app/system-description-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\nimport {SystemDescriptionService} from '../../system-description.service';\nimport {SystemTypeDescriptorDto} from \"@fabric/models\";\n\nexport interface SystemComponentDialogData {\n    key: string,\n    label: string,\n    systemType: string,\n}\n\nexport interface SystemComponentDialogSpec {\n    systemTypes: SystemTypeDescriptorDto[]\n    keys: string[];\n    data: SystemComponentDialogData\n    cancel: () => void\n    confirm: (data: SystemComponentDialogData) => void\n}\n\n\n@Component({\n    selector: 'app-system-component-dialog',\n    templateUrl: './system-component-dialog.component.html',\n    styleUrls: ['./system-component-dialog.component.scss']\n})\nexport class SystemComponentDialogComponent implements OnInit, OnChanges {\n\n    constructor() {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SystemComponentDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n            this.formGroup.setValue(this.spec.data)\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })\n\n    public get keyControl(): FormControl {\n        return <FormControl> this.formGroup.get('key')\n    }\n\n    public keyControlInvalid() : boolean {\n        return showValidationMessages(this.keyControl)\n    }\n\n    public get labelControl(): FormControl {\n        return <FormControl> this.formGroup.get('label')\n    }\n\n    labelControlInvalid() {\n        return showValidationMessages(this.labelControl)\n    }\n\n    private get systemTypeControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemType')\n    }\n\n\n    systemTypeControlInvalid() {\n        return showValidationMessages(this.systemTypeControl)\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDialogData",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemTypeDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemComponentDto",
            "id": "interface-SystemComponentDto-b4658d797939768dfd2a63a9c2d73f4a87dd6d812cf968b261ee9a616d83c4039994756687e974878f53b0a9eb8718b4466148d6e923f383758b035b71207011",
            "file": "src/app/api/models/system-component-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SystemComponentDto {\n  key?: string;\n  label?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemDescriptionDto",
            "id": "interface-SystemDescriptionDto-ef08509cc510340d3405574c5af7932d35d62d87fffb91d6fdfaef051059932a7c93297b4b519b2a8288cf0987b5d9acabe78281d76b7485e732601efb2cb395",
            "file": "src/app/api/models/system-description-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EnvironmentDto } from './environment-dto';\nimport { SystemComponentDto } from './system-component-dto';\nexport interface SystemDescriptionDto {\n  environments?: Array<EnvironmentDto>;\n  settings?: { [key: string]: {  } };\n  systemComponents?: Array<SystemComponentDto>;\n}\n",
            "properties": [
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<EnvironmentDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "systemComponents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SystemComponentDto>",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemDescriptionState",
            "id": "interface-SystemDescriptionState-1289dbba31363e2ebb912d824c1b471afc2c400e5422a296b06d6860e5693b1871981e0daf43cf6328167b36a2adbebb32bdfa1fb9addcd8c8c35a068086f400",
            "file": "src/app/system-description-page/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from \"@fabric/services\";\nimport {SettingsDialogData, SettingsDialogSpec} from \"./settings-panel/settings-dialog/settings-dialog.component\";\nimport {MongoMetaModelService} from \"./meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service\";\n\n\nexport interface Setting {\n    key: string,\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string,\n    environmentKey : string,\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService,\n        private mongoMetaModelService: MongoMetaModelService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string): Promise<StructureDto> {\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).toPromise()\n          .then(() => this.loadEnvironmentSystemComponentStructure(environmentKey, systemComponent.key))\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemDescriptionDto",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemTypeDescriptorDto",
            "id": "interface-SystemTypeDescriptorDto-909d0e5701f524b0179e49a4114023cb22c9c0dee6bbebc519aba635c39b53d6dd143dc17b8e6719b41455b576081a8a486c7c32df003ab449a99a724559b00e",
            "file": "src/app/api/models/system-type-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SettingDescriptorDto } from './setting-descriptor-dto';\nexport interface SystemTypeDescriptorDto {\n  settingDescriptors?: Array<SettingDescriptorDto>;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "settingDescriptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SettingDescriptorDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserPrincipalLookupService",
            "id": "interface-UserPrincipalLookupService-28b822800d2033ba2643faf3f568ae067ea4c51aeb057a8ef9e39c93f2df1f0e78cccb3300f1ec74f516c6daba6225536ff731ddebc147c759e48bd238022d7b",
            "file": "src/app/api/models/user-principal-lookup-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserPrincipalLookupService {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "WorkspaceSettings",
            "id": "interface-WorkspaceSettings-68b8e7b596c4cba4de7d6587b46aa6bfecd346cdecf7ea5fa3fdf15d43f8b2c6229c3bf436503de94aa737552fc6f4c3a111e9598bf28ac420926e8c7ab64299",
            "file": "src/app/api/models/workspace-settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Path } from './path';\nexport interface WorkspaceSettings {\n  workspaceFolder?: Path;\n}\n",
            "properties": [
                {
                    "name": "workspaceFolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiConfiguration",
            "id": "injectable-ApiConfiguration-db041dc06e29ffff133e6d5e32db744ae15b56d237310730b07121a087b880ef86bfa2e2e7295842e4664c922ffe09403d7b1d5a30d7ab08039b93a07ba2355e",
            "file": "src/app/api/api-configuration.ts",
            "properties": [
                {
                    "name": "rootUrl",
                    "defaultValue": "'http://localhost:8080'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Global configuration</p>\n",
            "rawdescription": "\n\nGlobal configuration\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:8080';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "type": "injectable"
        },
        {
            "name": "BaseService",
            "id": "injectable-BaseService-aa17020d3b263477ad20c7513d92cd15eaad1b8f29c1936606cba913bbe75d1bf3c4e7c112e28da035af8391d0a69fd770e37b5cbf86ec26eb83a0e6789cdbaa",
            "file": "src/app/api/base-service.ts",
            "properties": [
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Base class for services</p>\n",
            "rawdescription": "\n\nBase class for services\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "rootUrl": {
                    "name": "rootUrl",
                    "setSignature": {
                        "name": "rootUrl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "rawdescription": "\n\nSets the root URL for API operations in this service.\n",
                        "description": "<p>Sets the root URL for API operations in this service.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "rootUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 24,
                        "rawdescription": "\n\nReturns the root url for all operations in this service. If not set directly in this\nservice, will fallback to `ApiConfiguration.rootUrl`.\n",
                        "description": "<p>Returns the root url for all operations in this service. If not set directly in this\nservice, will fallback to <code>ApiConfiguration.rootUrl</code>.</p>\n"
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CommandControllerService",
            "id": "injectable-CommandControllerService-c7e673939bd7d18a612b39165ce08b524e08d3db0d1aa9f9554c1378360a55ba27510306cd6354c30f08a1ae633f0f1973b36a0a26aafa03aab66c958d6ee707",
            "file": "src/app/api/services/command-controller.service.ts",
            "properties": [
                {
                    "name": "DummyUsingPostPath",
                    "defaultValue": "'/api/metamodel/dummy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation dummyUsingPost</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPath part for operation dummyUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetExecutionInfoUsingGetPath",
                    "defaultValue": "'/api/metamodel/info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getExecutionInfoUsingGet</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nPath part for operation getExecutionInfoUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "dummyUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ExecutionId>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndummy.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `dummyUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>dummy.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>dummyUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dummyUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ExecutionId>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndummy.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `dummyUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>dummy.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>dummyUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExecutionInfoUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ExecutionDto>",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetExecutionInfo.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getExecutionInfoUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getExecutionInfo.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getExecutionInfoUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExecutionInfoUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ExecutionDto>>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetExecutionInfo.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getExecutionInfoUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getExecutionInfo.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getExecutionInfoUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Command Controller</p>\n",
            "rawdescription": "\n\nCommand Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ExecutionDto } from '../models/execution-dto';\nimport { ExecutionId } from '../models/execution-id';\n\n\n/**\n * Command Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommandControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation dummyUsingPost\n   */\n  static readonly DummyUsingPostPath = '/api/metamodel/dummy';\n\n  /**\n   * dummy.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `dummyUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dummyUsingPost$Response(params?: {\n  }): Observable<StrictHttpResponse<ExecutionId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CommandControllerService.DummyUsingPostPath, 'post');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ExecutionId>;\n      })\n    );\n  }\n\n  /**\n   * dummy.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `dummyUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dummyUsingPost(params?: {\n  }): Observable<ExecutionId> {\n\n    return this.dummyUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ExecutionId>) => r.body as ExecutionId)\n    );\n  }\n\n  /**\n   * Path part for operation getExecutionInfoUsingGet\n   */\n  static readonly GetExecutionInfoUsingGetPath = '/api/metamodel/info';\n\n  /**\n   * getExecutionInfo.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getExecutionInfoUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExecutionInfoUsingGet$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<ExecutionDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CommandControllerService.GetExecutionInfoUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ExecutionDto>;\n      })\n    );\n  }\n\n  /**\n   * getExecutionInfo.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getExecutionInfoUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExecutionInfoUsingGet(params?: {\n    id?: string;\n  }): Observable<ExecutionDto> {\n\n    return this.getExecutionInfoUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ExecutionDto>) => r.body as ExecutionDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ConnectionControllerService",
            "id": "injectable-ConnectionControllerService-3ed4c6abeb2cbf09a17f906699c59edd5be76f2e29619d2fc1c53e3ea27d57cfb675b2973eeb65b42232df74ad17f096c0e3b3fd3bee6e96ebc205a6665bfa06",
            "file": "src/app/api/services/connection-controller.service.ts",
            "properties": [
                {
                    "name": "TestConnectionUsingPostPath",
                    "defaultValue": "'/api/connection'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation testConnectionUsingPost</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPath part for operation testConnectionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "testConnectionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConnectionTestResponseDto>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntestConnection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `testConnectionUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>testConnection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>testConnectionUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testConnectionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ConnectionTestResponseDto>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntestConnection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `testConnectionUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>testConnection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>testConnectionUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Connection Controller</p>\n",
            "rawdescription": "\n\nConnection Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ConnectionTestRequestDto } from '../models/connection-test-request-dto';\nimport { ConnectionTestResponseDto } from '../models/connection-test-response-dto';\n\n\n/**\n * Connection Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConnectionControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation testConnectionUsingPost\n   */\n  static readonly TestConnectionUsingPostPath = '/api/connection';\n\n  /**\n   * testConnection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `testConnectionUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  testConnectionUsingPost$Response(params?: {\n    body?: ConnectionTestRequestDto\n  }): Observable<StrictHttpResponse<ConnectionTestResponseDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConnectionControllerService.TestConnectionUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ConnectionTestResponseDto>;\n      })\n    );\n  }\n\n  /**\n   * testConnection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `testConnectionUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  testConnectionUsingPost(params?: {\n    body?: ConnectionTestRequestDto\n  }): Observable<ConnectionTestResponseDto> {\n\n    return this.testConnectionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ConnectionTestResponseDto>) => r.body as ConnectionTestResponseDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ConsoleControllerService",
            "id": "injectable-ConsoleControllerService-4b50d6637c7cd5c2e6d0c28fc6beadcaa449237f8f67aa0bb0f79b0a5448123fd7551dbf5195babf1319c31aec250aa8bfce8107401e6c8a9b46fa15ad2b6985",
            "file": "src/app/api/services/console-controller.service.ts",
            "properties": [
                {
                    "name": "CreateSnippetUsingPostPath",
                    "defaultValue": "'/api/console/snippet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createSnippetUsingPost</p>\n",
                    "line": 151,
                    "rawdescription": "\n\nPath part for operation createSnippetUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetDescriptorUsingGetPath",
                    "defaultValue": "'/api/console/descriptor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getDescriptorUsingGet</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nPath part for operation getDescriptorUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSnippetsUsingGetPath",
                    "defaultValue": "'/api/console/snippets'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSnippetsUsingGet</p>\n",
                    "line": 216,
                    "rawdescription": "\n\nPath part for operation getSnippetsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RunRequestUsingPostPath",
                    "defaultValue": "'/api/console/run'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation runRequestUsingPost</p>\n",
                    "line": 97,
                    "rawdescription": "\n\nPath part for operation runRequestUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createSnippetUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateSnippet.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createSnippetUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>createSnippet.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createSnippetUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSnippetUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateSnippet.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createSnippetUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>createSnippet.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createSnippetUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescriptorUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConsoleDescriptorDto>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDescriptor.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getDescriptorUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDescriptor.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getDescriptorUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescriptorUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ConsoleDescriptorDto>>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDescriptor.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getDescriptorUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDescriptor.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getDescriptorUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSnippetsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<SnippetDto>>",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSnippets.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSnippetsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSnippets.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSnippetsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSnippetsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<SnippetDto>>>",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSnippets.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSnippetsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSnippets.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSnippetsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRequestUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConsoleResponseItemDto>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrunRequest.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `runRequestUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>runRequest.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>runRequestUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRequestUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ConsoleResponseItemDto>>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrunRequest.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `runRequestUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>runRequest.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>runRequestUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Console Controller</p>\n",
            "rawdescription": "\n\nConsole Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ConsoleDescriptorDto } from '../models/console-descriptor-dto';\nimport { ConsoleRequestDto } from '../models/console-request-dto';\nimport { ConsoleResponseItemDto } from '../models/console-response-item-dto';\nimport { SnippetDto } from '../models/snippet-dto';\n\n\n/**\n * Console Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConsoleControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getDescriptorUsingGet\n   */\n  static readonly GetDescriptorUsingGetPath = '/api/console/descriptor';\n\n  /**\n   * getDescriptor.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDescriptorUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDescriptorUsingGet$Response(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<ConsoleDescriptorDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.GetDescriptorUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ConsoleDescriptorDto>;\n      })\n    );\n  }\n\n  /**\n   * getDescriptor.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDescriptorUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDescriptorUsingGet(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<ConsoleDescriptorDto> {\n\n    return this.getDescriptorUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ConsoleDescriptorDto>) => r.body as ConsoleDescriptorDto)\n    );\n  }\n\n  /**\n   * Path part for operation runRequestUsingPost\n   */\n  static readonly RunRequestUsingPostPath = '/api/console/run';\n\n  /**\n   * runRequest.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `runRequestUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  runRequestUsingPost$Response(params?: {\n    body?: ConsoleRequestDto\n  }): Observable<StrictHttpResponse<ConsoleResponseItemDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.RunRequestUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ConsoleResponseItemDto>;\n      })\n    );\n  }\n\n  /**\n   * runRequest.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `runRequestUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  runRequestUsingPost(params?: {\n    body?: ConsoleRequestDto\n  }): Observable<ConsoleResponseItemDto> {\n\n    return this.runRequestUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ConsoleResponseItemDto>) => r.body as ConsoleResponseItemDto)\n    );\n  }\n\n  /**\n   * Path part for operation createSnippetUsingPost\n   */\n  static readonly CreateSnippetUsingPostPath = '/api/console/snippet';\n\n  /**\n   * createSnippet.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createSnippetUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createSnippetUsingPost$Response(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n    body?: SnippetDto\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.CreateSnippetUsingPostPath, 'post');\n    if (params) {\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * createSnippet.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createSnippetUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createSnippetUsingPost(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n    body?: SnippetDto\n  }): Observable<void> {\n\n    return this.createSnippetUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getSnippetsUsingGet\n   */\n  static readonly GetSnippetsUsingGetPath = '/api/console/snippets';\n\n  /**\n   * getSnippets.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSnippetsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSnippetsUsingGet$Response(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<Array<SnippetDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.GetSnippetsUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SnippetDto>>;\n      })\n    );\n  }\n\n  /**\n   * getSnippets.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSnippetsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSnippetsUsingGet(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<Array<SnippetDto>> {\n\n    return this.getSnippetsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SnippetDto>>) => r.body as Array<SnippetDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ConsoleService",
            "id": "injectable-ConsoleService-72acfeb7e9b701f7eace521c4cfa954a03a7eeff1456145dda4c750c299ce5aaa95fa50c8998f65a56c1c145f146cc6885b7578ef9d7652129df81c8778cf796",
            "file": "src/app/console-page/console.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addSnippet",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SnippetDto[]>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadDescriptor",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ConsoleDescriptorDto>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSnippets",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SnippetDto[]>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRequest",
                    "args": [
                        {
                            "name": "environmentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attributes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ConsoleResponseItemDto>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environmentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attributes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConsoleControllerService} from \"@fabric/services\";\nimport {ConsoleDescriptorDto, ConsoleResponseItemDto, SnippetDto} from \"@fabric/models\";\n\n@Injectable()\nexport class ConsoleService {\n\n    constructor(private consoleControllerService: ConsoleControllerService) {\n    }\n\n    loadDescriptor(systemComponentKey: string) : Promise<ConsoleDescriptorDto>{\n        return this.consoleControllerService.getDescriptorUsingGet({systemComponentKey})\n            .toPromise()\n    }\n\n    runRequest(environmentKey: string, systemComponentKey: string, attributes): Promise<ConsoleResponseItemDto> {\n        return this.consoleControllerService.runRequestUsingPost({\n            body: {\n                environmentKey,\n                systemComponentKey,\n                attributes\n            }\n        }).toPromise()\n    }\n\n    loadSnippets(systemComponentKey:string): Promise<SnippetDto[]> {\n        return this.consoleControllerService.getSnippetsUsingGet({systemComponentKey}).toPromise()\n    }\n\n    addSnippet(title: string, systemComponentKey: string, attributes: {}): Promise<SnippetDto[]> {\n        return this.consoleControllerService.createSnippetUsingPost({\n            systemComponentKey,\n            body: {\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemComponentKey))\n\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "consoleControllerService",
                        "type": "ConsoleControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "consoleControllerService",
                        "type": "ConsoleControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DashboardService",
            "id": "injectable-DashboardService-f1c1d959803ff62dbfba0a4692b24e9574af83e457ff07513a3b66501a42178a8c64d44a763b284cc2b709d28c7a46a2d95e4730ae6e9d07fad7d38ea73b1f70",
            "file": "src/app/dashboard-page/dashboard.service.ts",
            "properties": [
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<DashboardStoreState>({ summaries: []})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "summaries$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.summaries),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "createSnapshot",
                    "args": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSummaries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {SnapshotId, SnapshotSummaryDto} from \"@fabric/models\";\n\ninterface DashboardStoreState {\n    summaries: SnapshotSummaryDto[]\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DashboardService implements OnDestroy {\n\n    constructor(private snapshotControllerService: SnapshotControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<DashboardStoreState>({ summaries: []})\n\n    summaries$ = this.store.pipe(\n        map(state => state.summaries),\n        distinctUntilChanged(),\n    )\n\n    private subscriptions: Subscription[] = []\n\n    init() {\n        this.loadSummaries();\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    private loadSummaries() {\n        this.snapshotControllerService.listUsingGet({}).subscribe(summaries => {\n            this.store.next({summaries: summaries})\n        })\n    }\n\n    createSnapshot(environment: string, name: string) {\n        this.snapshotControllerService.createUsingPost({ environment, name}).subscribe(\n        (dto) => this.loadSummaries()\n        )\n    }\n\n    delete(snapshotId: SnapshotId) {\n        this.snapshotControllerService.deleteByIdUsingDelete({id: snapshotId.id}).subscribe(()=> {\n            this.loadSummaries()\n        })\n\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetaModelControllerService",
            "id": "injectable-MetaModelControllerService-b1e1d42d692dd6d6086a51c342d8394eca197e022cc3f8f1a382b6176f424a5365ae8fc4bf03f0a329697cf24f91ffbba08bce030bcd5b9016082d4c53edc83b",
            "file": "src/app/api/services/meta-model-controller.service.ts",
            "properties": [
                {
                    "name": "CreateMetaModelUsingPostPath",
                    "defaultValue": "'/api/metamodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createMetaModelUsingPost</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nPath part for operation createMetaModelUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createMetaModelUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MetaModelId>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMetaModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createMetaModelUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createMetaModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createMetaModelUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMetaModelUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MetaModelId>>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMetaModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createMetaModelUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createMetaModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createMetaModelUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Meta Model Controller</p>\n",
            "rawdescription": "\n\nMeta Model Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { MetaModelId } from '../models/meta-model-id';\n\n\n/**\n * Meta Model Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetaModelControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation createMetaModelUsingPost\n   */\n  static readonly CreateMetaModelUsingPostPath = '/api/metamodel';\n\n  /**\n   * createMetaModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createMetaModelUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createMetaModelUsingPost$Response(params?: {\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<MetaModelId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MetaModelControllerService.CreateMetaModelUsingPostPath, 'post');\n    if (params) {\n      rb.query('environmentKey', params.environmentKey, {\"style\":\"form\"});\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MetaModelId>;\n      })\n    );\n  }\n\n  /**\n   * createMetaModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createMetaModelUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createMetaModelUsingPost(params?: {\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<MetaModelId> {\n\n    return this.createMetaModelUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<MetaModelId>) => r.body as MetaModelId)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-c7e2a67208794340bf0d0ce9557a7d3df755014a832dab05990cf4704905fc9cd25b5b1084ed5dd1621bde18459144f43edc59ff415a548130e37518b55cabaf",
            "file": "src/app/common/modal/modal-service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n// based on https://github.com/cornflourblue/angular-10-custom-modal\n// licence MIT\n\n@Injectable({providedIn: 'root'})\nexport class ModalService {\n  private modals: any[] = [];\n\n  add(modal: any) {\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n\n  remove(id: string) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x.id !== id);\n  }\n\n  open(id: string) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    modal.open();\n  }\n\n  close(id: string) {\n    // close modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    modal.close();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "MongoMetaModelService",
            "id": "injectable-MongoMetaModelService-0ad0dedcaf8f91a225cdf406e9f20bd07e353fb1a5578a5b3f830a1dd9bc00b902dd1f5b9e7354d7bca555dffc4a3590bde83150a8508ff527c89b8b70c648d5",
            "file": "src/app/system-description-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
            "properties": [
                {
                    "name": "metaModels$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.modelMap),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MongoMetaModelStoreState>({ modelMap: new Map() })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoMetaModel, MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoMetaModelStoreState {\n  modelMap: Map<String, MongoMetaModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoMetaModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoMetaModelStoreState>({ modelMap: new Map() })\n\n  metaModels$ = this.store.pipe(\n      map(state => state.modelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::metaModels$ >>', this.metaModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getMetaModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoMetaModel> = this.store.getValue().modelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ modelMap : new Map<String, MongoMetaModel>(map) })\n    })\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MongoNavigationModelService",
            "id": "injectable-MongoNavigationModelService-4f46ff1e41869ec3bc8d099bb9c91a77db6fd219a9c1e73283bbb4784ef3cbf8e8963746dd44ae2ef0a37fb5742c61d60558364eaff50172ebf7eb1fa6d18b2d",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
            "properties": [
                {
                    "name": "navigationModels$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.navigationModelMap),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MongoNavigationModelStoreState>({ navigationModelMap: new Map() })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoNavigationModelStoreState {\n  navigationModelMap: Map<String, MongoNavigationModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoNavigationModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoNavigationModelStoreState>({ navigationModelMap: new Map() })\n\n  navigationModels$ = this.store.pipe(\n      map(state => state.navigationModelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::navigationModels$ >>', this.navigationModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getNavigationModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoNavigationModel> = this.store.getValue().navigationModelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ navigationModelMap : new Map<String, MongoNavigationModel>(map) })\n    })\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MongoService",
            "id": "injectable-MongoService-18e76ce4072761643ecae86ef50d89e06abf2f29e3d04c9e5f2ea7441501f354e194593c4ab42e30cb438e39a4a502517ba102e709ad1946b8ef037dda59801e",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo.service.ts",
            "properties": [
                {
                    "name": "mongoSnapshot$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.mongoSnapshot),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MongoSnapshotStoreState>({ mongoSnapshot: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "componentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\n\n\ninterface MongoSnapshotStoreState {\n  mongoSnapshot: MongoSnapshot\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoService {\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { }\n\n  private store = new BehaviorSubject<MongoSnapshotStoreState>({ mongoSnapshot: null})\n\n  mongoSnapshot$ = this.store.pipe(\n      map(state => state.mongoSnapshot),\n      distinctUntilChanged(),\n  )\n\n  public load(snapshotId: SnapshotId, componentKey: string) {\n    this.mongoSnapshotControllerService.getMongoSnapshotUsingGet({ id: snapshotId.id, componentKey}).subscribe(mongoSnapshot =>\n      this.store.next({ mongoSnapshot })\n    )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MongoSnapshotControllerService",
            "id": "injectable-MongoSnapshotControllerService-247974ee9eab8378e5526151b8ce0bf37b34b4454a3b0827ec22c3bec8e705c26249704ecb19c7d7be747a2eb1aa72a519d29d70b68e348a2201c581a84cbb45",
            "file": "src/app/api/services/mongo-snapshot-controller.service.ts",
            "properties": [
                {
                    "name": "GetMetaModelUsingGetPath",
                    "defaultValue": "'/api/mongo/metamodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getMetaModelUsingGet</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPath part for operation getMetaModelUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetMongoSnapshotUsingGetPath",
                    "defaultValue": "'/api/mongo/snapshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getMongoSnapshotUsingGet</p>\n",
                    "line": 158,
                    "rawdescription": "\n\nPath part for operation getMongoSnapshotUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetNavigationModelUsingGetPath",
                    "defaultValue": "'/api/mongo/navigationmodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getNavigationModelUsingGet</p>\n",
                    "line": 96,
                    "rawdescription": "\n\nPath part for operation getNavigationModelUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getMetaModelUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MongoMetaModel>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMetaModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getMetaModelUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMetaModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getMetaModelUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetaModelUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MongoMetaModel>>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMetaModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getMetaModelUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMetaModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getMetaModelUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMongoSnapshotUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MongoSnapshot>",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMongoSnapshot.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getMongoSnapshotUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMongoSnapshot.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getMongoSnapshotUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMongoSnapshotUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MongoSnapshot>>",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMongoSnapshot.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getMongoSnapshotUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMongoSnapshot.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getMongoSnapshotUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationModelUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MongoNavigationModel>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigationModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getNavigationModelUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getNavigationModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getNavigationModelUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationModelUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MongoNavigationModel>>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigationModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getNavigationModelUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getNavigationModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getNavigationModelUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Mongo Snapshot Controller</p>\n",
            "rawdescription": "\n\nMongo Snapshot Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { MongoMetaModel } from '../models/mongo-meta-model';\nimport { MongoNavigationModel } from '../models/mongo-navigation-model';\nimport { MongoSnapshot } from '../models/mongo-snapshot';\n\n\n/**\n * Mongo Snapshot Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MongoSnapshotControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getMetaModelUsingGet\n   */\n  static readonly GetMetaModelUsingGetPath = '/api/mongo/metamodel';\n\n  /**\n   * getMetaModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getMetaModelUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMetaModelUsingGet$Response(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<MongoMetaModel>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MongoSnapshotControllerService.GetMetaModelUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MongoMetaModel>;\n      })\n    );\n  }\n\n  /**\n   * getMetaModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getMetaModelUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMetaModelUsingGet(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<MongoMetaModel> {\n\n    return this.getMetaModelUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<MongoMetaModel>) => r.body as MongoMetaModel)\n    );\n  }\n\n  /**\n   * Path part for operation getNavigationModelUsingGet\n   */\n  static readonly GetNavigationModelUsingGetPath = '/api/mongo/navigationmodel';\n\n  /**\n   * getNavigationModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getNavigationModelUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getNavigationModelUsingGet$Response(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<MongoNavigationModel>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MongoSnapshotControllerService.GetNavigationModelUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MongoNavigationModel>;\n      })\n    );\n  }\n\n  /**\n   * getNavigationModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getNavigationModelUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getNavigationModelUsingGet(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<MongoNavigationModel> {\n\n    return this.getNavigationModelUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<MongoNavigationModel>) => r.body as MongoNavigationModel)\n    );\n  }\n\n  /**\n   * Path part for operation getMongoSnapshotUsingGet\n   */\n  static readonly GetMongoSnapshotUsingGetPath = '/api/mongo/snapshot';\n\n  /**\n   * getMongoSnapshot.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getMongoSnapshotUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMongoSnapshotUsingGet$Response(params?: {\n    id?: string;\n\n    /**\n     * componentKey\n     */\n    componentKey?: string;\n  }): Observable<StrictHttpResponse<MongoSnapshot>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MongoSnapshotControllerService.GetMongoSnapshotUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n      rb.query('componentKey', params.componentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MongoSnapshot>;\n      })\n    );\n  }\n\n  /**\n   * getMongoSnapshot.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getMongoSnapshotUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMongoSnapshotUsingGet(params?: {\n    id?: string;\n\n    /**\n     * componentKey\n     */\n    componentKey?: string;\n  }): Observable<MongoSnapshot> {\n\n    return this.getMongoSnapshotUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<MongoSnapshot>) => r.body as MongoSnapshot)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SnapshotControllerService",
            "id": "injectable-SnapshotControllerService-6c935dae074b174b04624277b499661bb9fe89cb16be2281e2dd6b901a6b98b3f0e679266d6f17b79baad63c7adc0fec2938e778ee1e98e6b7770191bf13b5da",
            "file": "src/app/api/services/snapshot-controller.service.ts",
            "properties": [
                {
                    "name": "CreateUsingPostPath",
                    "defaultValue": "'/api/snaphot/snapshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createUsingPost</p>\n",
                    "line": 142,
                    "rawdescription": "\n\nPath part for operation createUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "DeleteByIdUsingDeletePath",
                    "defaultValue": "'/api/snaphot/delete'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation deleteByIdUsingDelete</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPath part for operation deleteByIdUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetByIdUsingGetPath",
                    "defaultValue": "'/api/snaphot/snapshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getByIdUsingGet</p>\n",
                    "line": 88,
                    "rawdescription": "\n\nPath part for operation getByIdUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "ListUsingGetPath",
                    "defaultValue": "'/api/snaphot/snapshots'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation listUsingGet</p>\n",
                    "line": 215,
                    "rawdescription": "\n\nPath part for operation listUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SnapshotId>",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>create.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SnapshotId>>",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>create.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteByIdUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteById.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `deleteByIdUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteById.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>deleteByIdUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteByIdUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteById.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `deleteByIdUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteById.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>deleteByIdUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByIdUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SnapshotDto>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetById.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getByIdUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getById.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getByIdUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByIdUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SnapshotDto>>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetById.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getByIdUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getById.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getByIdUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<SnapshotSummaryDto>>",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlist.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `listUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>list.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>listUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<SnapshotSummaryDto>>>",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlist.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `listUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>list.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>listUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Snapshot Controller</p>\n",
            "rawdescription": "\n\nSnapshot Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { SnapshotDto } from '../models/snapshot-dto';\nimport { SnapshotId } from '../models/snapshot-id';\nimport { SnapshotSummaryDto } from '../models/snapshot-summary-dto';\n\n\n/**\n * Snapshot Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnapshotControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation deleteByIdUsingDelete\n   */\n  static readonly DeleteByIdUsingDeletePath = '/api/snaphot/delete';\n\n  /**\n   * deleteById.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteByIdUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteByIdUsingDelete$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.DeleteByIdUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * deleteById.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteByIdUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteByIdUsingDelete(params?: {\n    id?: string;\n  }): Observable<void> {\n\n    return this.deleteByIdUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getByIdUsingGet\n   */\n  static readonly GetByIdUsingGetPath = '/api/snaphot/snapshot';\n\n  /**\n   * getById.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getByIdUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByIdUsingGet$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<SnapshotDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.GetByIdUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SnapshotDto>;\n      })\n    );\n  }\n\n  /**\n   * getById.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getByIdUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByIdUsingGet(params?: {\n    id?: string;\n  }): Observable<SnapshotDto> {\n\n    return this.getByIdUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SnapshotDto>) => r.body as SnapshotDto)\n    );\n  }\n\n  /**\n   * Path part for operation createUsingPost\n   */\n  static readonly CreateUsingPostPath = '/api/snaphot/snapshot';\n\n  /**\n   * create.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createUsingPost$Response(params?: {\n\n    /**\n     * environment\n     */\n    environment?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<StrictHttpResponse<SnapshotId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.CreateUsingPostPath, 'post');\n    if (params) {\n      rb.query('environment', params.environment, {\"style\":\"form\"});\n      rb.query('name', params.name, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SnapshotId>;\n      })\n    );\n  }\n\n  /**\n   * create.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createUsingPost(params?: {\n\n    /**\n     * environment\n     */\n    environment?: string;\n\n    /**\n     * name\n     */\n    name?: string;\n  }): Observable<SnapshotId> {\n\n    return this.createUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<SnapshotId>) => r.body as SnapshotId)\n    );\n  }\n\n  /**\n   * Path part for operation listUsingGet\n   */\n  static readonly ListUsingGetPath = '/api/snaphot/snapshots';\n\n  /**\n   * list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<Array<SnapshotSummaryDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.ListUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SnapshotSummaryDto>>;\n      })\n    );\n  }\n\n  /**\n   * list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `listUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listUsingGet(params?: {\n  }): Observable<Array<SnapshotSummaryDto>> {\n\n    return this.listUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SnapshotSummaryDto>>) => r.body as Array<SnapshotSummaryDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SnapshotService",
            "id": "injectable-SnapshotService-282c7a58327aa5d9e91b11e0b39e2e8bb94670201dd9598e81e0a841ce3dabfbac9015986283747badc4d706417f657031538464876ff2c252e938c8229b317d",
            "file": "src/app/snapshot-page/snapshot.service.ts",
            "properties": [
                {
                    "name": "snapshot$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.snapshot),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<SnapshotStoreState>({ snapshot: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSnapshot",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {SnapshotDto, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {map,distinctUntilChanged} from \"rxjs/operators\";\n\ninterface SnapshotStoreState {\n  snapshot: SnapshotDto\n}\n\n@Injectable()\nexport class SnapshotService {\n\n  constructor(private snapshotControllerService : SnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<SnapshotStoreState>({ snapshot: null})\n\n  snapshot$ = this.store.pipe(\n      map(state => state.snapshot),\n      distinctUntilChanged(),\n  )\n\n  init() {\n    this.snapshot$.subscribe((dto)=> console.log(\">> snapshot$\", dto))\n  }\n\n  loadSnapshot(snapshotId: SnapshotId) {\n    this.snapshotControllerService.getByIdUsingGet(snapshotId).subscribe(dto => {\n      this.store.next({ snapshot: dto })\n    })\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SystemDescriptionControllerService",
            "id": "injectable-SystemDescriptionControllerService-0b5b73ac51cb789ae341d57df06c49f9e92323a7a5794662bf209dcffbad4b398f507e68100d433eb6cbbd0243e172a9cc3ae0a36ede373066131dfb36260129",
            "file": "src/app/api/services/system-description-controller.service.ts",
            "properties": [
                {
                    "name": "GetEnvironmentStructureUsingGetPath",
                    "defaultValue": "'/api/systemdescription/structure/env'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getEnvironmentStructureUsingGet</p>\n",
                    "line": 212,
                    "rawdescription": "\n\nPath part for operation getEnvironmentStructureUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSystemComponentEnvironmentStructureUsingGetPath",
                    "defaultValue": "'/api/systemdescription/structure/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSystemComponentEnvironmentStructureUsingGet</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nPath part for operation getSystemComponentEnvironmentStructureUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSystemDescriptionUsingGetPath",
                    "defaultValue": "'/api/systemdescription'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSystemDescriptionUsingGet</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPath part for operation getSystemDescriptionUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSystemTypeDescriptorsUsingGetPath",
                    "defaultValue": "'/api/systemdescription/types'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSystemTypeDescriptorsUsingGet</p>\n",
                    "line": 274,
                    "rawdescription": "\n\nPath part for operation getSystemTypeDescriptorsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SetSystemDescriptionUsingPostPath",
                    "defaultValue": "'/api/systemdescription'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation setSystemDescriptionUsingPost</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nPath part for operation setSystemDescriptionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getEnvironmentStructureUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StructureDto>",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetEnvironmentStructure.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getEnvironmentStructureUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getEnvironmentStructure.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getEnvironmentStructureUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnvironmentStructureUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StructureDto>>",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetEnvironmentStructure.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getEnvironmentStructureUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getEnvironmentStructure.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getEnvironmentStructureUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemComponentEnvironmentStructureUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StructureDto>",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemComponentEnvironmentStructure.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSystemComponentEnvironmentStructureUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemComponentEnvironmentStructure.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSystemComponentEnvironmentStructureUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemComponentEnvironmentStructureUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StructureDto>>",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemComponentEnvironmentStructure.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSystemComponentEnvironmentStructureUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemComponentEnvironmentStructure.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSystemComponentEnvironmentStructureUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemDescriptionUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SystemDescriptionDto>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemDescription.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSystemDescriptionUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemDescription.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSystemDescriptionUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemDescriptionUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SystemDescriptionDto>>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemDescription.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSystemDescriptionUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemDescription.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSystemDescriptionUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemTypeDescriptorsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<SystemTypeDescriptorDto>>",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemTypeDescriptors.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSystemTypeDescriptorsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemTypeDescriptors.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSystemTypeDescriptorsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemTypeDescriptorsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<SystemTypeDescriptorDto>>>",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemTypeDescriptors.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSystemTypeDescriptorsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemTypeDescriptors.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSystemTypeDescriptorsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSystemDescriptionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetSystemDescription.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `setSystemDescriptionUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>setSystemDescription.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>setSystemDescriptionUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSystemDescriptionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetSystemDescription.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `setSystemDescriptionUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>setSystemDescription.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>setSystemDescriptionUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>System Description Controller</p>\n",
            "rawdescription": "\n\nSystem Description Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { StructureDto } from '../models/structure-dto';\nimport { SystemDescriptionDto } from '../models/system-description-dto';\nimport { SystemTypeDescriptorDto } from '../models/system-type-descriptor-dto';\n\n\n/**\n * System Description Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SystemDescriptionControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getSystemDescriptionUsingGet\n   */\n  static readonly GetSystemDescriptionUsingGetPath = '/api/systemdescription';\n\n  /**\n   * getSystemDescription.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemDescriptionUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemDescriptionUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<SystemDescriptionDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetSystemDescriptionUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SystemDescriptionDto>;\n      })\n    );\n  }\n\n  /**\n   * getSystemDescription.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemDescriptionUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemDescriptionUsingGet(params?: {\n  }): Observable<SystemDescriptionDto> {\n\n    return this.getSystemDescriptionUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SystemDescriptionDto>) => r.body as SystemDescriptionDto)\n    );\n  }\n\n  /**\n   * Path part for operation setSystemDescriptionUsingPost\n   */\n  static readonly SetSystemDescriptionUsingPostPath = '/api/systemdescription';\n\n  /**\n   * setSystemDescription.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `setSystemDescriptionUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  setSystemDescriptionUsingPost$Response(params?: {\n    body?: SystemDescriptionDto\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.SetSystemDescriptionUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * setSystemDescription.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `setSystemDescriptionUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  setSystemDescriptionUsingPost(params?: {\n    body?: SystemDescriptionDto\n  }): Observable<void> {\n\n    return this.setSystemDescriptionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getSystemComponentEnvironmentStructureUsingGet\n   */\n  static readonly GetSystemComponentEnvironmentStructureUsingGetPath = '/api/systemdescription/structure/';\n\n  /**\n   * getSystemComponentEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemComponentEnvironmentStructureUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemComponentEnvironmentStructureUsingGet$Response(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<StructureDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetSystemComponentEnvironmentStructureUsingGetPath, 'get');\n    if (params) {\n      rb.query('envKey', params.envKey, {\"style\":\"form\"});\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StructureDto>;\n      })\n    );\n  }\n\n  /**\n   * getSystemComponentEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemComponentEnvironmentStructureUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemComponentEnvironmentStructureUsingGet(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StructureDto> {\n\n    return this.getSystemComponentEnvironmentStructureUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<StructureDto>) => r.body as StructureDto)\n    );\n  }\n\n  /**\n   * Path part for operation getEnvironmentStructureUsingGet\n   */\n  static readonly GetEnvironmentStructureUsingGetPath = '/api/systemdescription/structure/env';\n\n  /**\n   * getEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getEnvironmentStructureUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getEnvironmentStructureUsingGet$Response(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n  }): Observable<StrictHttpResponse<StructureDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetEnvironmentStructureUsingGetPath, 'get');\n    if (params) {\n      rb.query('envKey', params.envKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StructureDto>;\n      })\n    );\n  }\n\n  /**\n   * getEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getEnvironmentStructureUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getEnvironmentStructureUsingGet(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n  }): Observable<StructureDto> {\n\n    return this.getEnvironmentStructureUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<StructureDto>) => r.body as StructureDto)\n    );\n  }\n\n  /**\n   * Path part for operation getSystemTypeDescriptorsUsingGet\n   */\n  static readonly GetSystemTypeDescriptorsUsingGetPath = '/api/systemdescription/types';\n\n  /**\n   * getSystemTypeDescriptors.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemTypeDescriptorsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemTypeDescriptorsUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<Array<SystemTypeDescriptorDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetSystemTypeDescriptorsUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SystemTypeDescriptorDto>>;\n      })\n    );\n  }\n\n  /**\n   * getSystemTypeDescriptors.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemTypeDescriptorsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemTypeDescriptorsUsingGet(params?: {\n  }): Observable<Array<SystemTypeDescriptorDto>> {\n\n    return this.getSystemTypeDescriptorsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SystemTypeDescriptorDto>>) => r.body as Array<SystemTypeDescriptorDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SystemDescriptionService",
            "id": "injectable-SystemDescriptionService-1289dbba31363e2ebb912d824c1b471afc2c400e5422a296b06d6860e5693b1871981e0daf43cf6328167b36a2adbebb32bdfa1fb9addcd8c8c35a068086f400",
            "file": "src/app/system-description-page/system-description.service.ts",
            "properties": [
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<SystemDescriptionState>({systemDescription: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "systemTypeDescriptors$",
                    "defaultValue": "new BehaviorSubject<SystemTypeDescriptorDto[]>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methods": [
                {
                    "name": "addEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSetting",
                    "args": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSystemComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSetting",
                    "args": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSystemComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMetaModel",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "environmentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureDto>",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "environmentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingDescriptors",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadEnvironmentSystemComponentStructure",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureDto>",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadEnvironmentSystemStructure",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureDto>",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSystemDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSystemTypeDescriptors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveSystemDescription",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testConnection",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "settings",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ConnectionTestResponseDto>",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "settings",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEnvironment",
                    "args": [
                        {
                            "name": "old",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "old",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updated",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSetting",
                    "args": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSystemComponent",
                    "args": [
                        {
                            "name": "old",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "old",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updated",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from \"@fabric/services\";\nimport {SettingsDialogData, SettingsDialogSpec} from \"./settings-panel/settings-dialog/settings-dialog.component\";\nimport {MongoMetaModelService} from \"./meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service\";\n\n\nexport interface Setting {\n    key: string,\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string,\n    environmentKey : string,\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService,\n        private mongoMetaModelService: MongoMetaModelService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string): Promise<StructureDto> {\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).toPromise()\n          .then(() => this.loadEnvironmentSystemComponentStructure(environmentKey, systemComponent.key))\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionControllerService",
                        "type": "SystemDescriptionControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metaModelControllerService",
                        "type": "MetaModelControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "connectionControllerService",
                        "type": "ConnectionControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mongoMetaModelService",
                        "type": "MongoMetaModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionControllerService",
                        "type": "SystemDescriptionControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaModelControllerService",
                        "type": "MetaModelControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "connectionControllerService",
                        "type": "ConnectionControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mongoMetaModelService",
                        "type": "MongoMetaModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "systemDescription": {
                    "name": "systemDescription",
                    "getSignature": {
                        "name": "systemDescription",
                        "type": "",
                        "returnType": "SystemDescriptionDto",
                        "line": 117
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "WorkspaceRestControllerService",
            "id": "injectable-WorkspaceRestControllerService-9f2c89125b903fbfbae0869afd28585c8239d8dab3dc8785cf61ae1b5324296a3ad6d88ed22a66a476dc206fe23f621ce572d89e446eee3a886fbf848ad536c5",
            "file": "src/app/api/services/workspace-rest-controller.service.ts",
            "properties": [
                {
                    "name": "GetSettingsUsingGetPath",
                    "defaultValue": "'/api/settings/settings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSettingsUsingGet</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nPath part for operation getSettingsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getSettingsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkspaceSettings>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSettings.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSettingsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSettings.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSettingsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<WorkspaceSettings>>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSettings.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSettingsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSettings.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSettingsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Workspace Rest Controller</p>\n",
            "rawdescription": "\n\nWorkspace Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { WorkspaceSettings } from '../models/workspace-settings';\n\n\n/**\n * Workspace Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkspaceRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getSettingsUsingGet\n   */\n  static readonly GetSettingsUsingGetPath = '/api/settings/settings';\n\n  /**\n   * getSettings.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSettingsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSettingsUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<WorkspaceSettings>> {\n\n    const rb = new RequestBuilder(this.rootUrl, WorkspaceRestControllerService.GetSettingsUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<WorkspaceSettings>;\n      })\n    );\n  }\n\n  /**\n   * getSettings.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSettingsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSettingsUsingGet(params?: {\n  }): Observable<WorkspaceSettings> {\n\n    return this.getSettingsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<WorkspaceSettings>) => r.body as WorkspaceSettings)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-d83b95cb897fd7f1ecc7216a31a9167598810a902c9c43ec11b6a93965548994186b900fe348e64bdf35a97b36d2fdb26731097dc1738e7f73bc67d2d432a47c",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConnectionTester",
            "id": "class-ConnectionTester-4ce3603220e9c8682843871f70b341321e40498046751c93d96ca232daca50680f670549cd051fcdca4141f8d26e5d0d0d207abfe6a49fbecc8c3460df132a13",
            "file": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './settings-dialog.component.html',\n    styleUrls: ['./settings-dialog.component.scss']\n})\nexport class SettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.specWrapper.getSystemType(this.spec.data.systemComponentKey))\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "testResult",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionTestResponseDto",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "testRunning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "settingObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settingObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HasConfirmationDialogMixin",
            "id": "class-HasConfirmationDialogMixin-ac09e8256d96d3773e0cc5c364f8e7e386a36b14e74fbf4007261553a674bd673e4915058ab9698b6fa98788f63bfeca540546c703b97b992bcb9ebbac9332e2",
            "file": "src/app/common/confirmation-dialog/has-confirmation-dialog.mixin.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ModalService} from \"../modal/modal-service\";\nimport {ConfirmationDialogSpec} from \"./confirmation-dialog.component\";\n\nexport abstract class HasConfirmationDialogMixin {  // todo make this a proper mixin\n\n    protected constructor(protected modalService: ModalService) { }\n\n    // confirmation dialog\n\n    confirmationDialogSpec: any;\n\n    abstract confirmationDialogId(): string\n\n    openConfirmationDialog(confirmationDialogSpec: ConfirmationDialogSpec) {\n        this.confirmationDialogSpec = confirmationDialogSpec\n        this.modalService.open(this.confirmationDialogId())\n    }\n\n    closeConfirmationDialog() {\n        this.modalService.close(this.confirmationDialogId())\n    }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HeaderParameter",
            "id": "class-HeaderParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 176,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the HTTP request header</p>\n",
            "rawdescription": "\n\nA parameter in the HTTP request header\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagedCollection",
            "id": "class-PagedCollection-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "CollectionSnapshot",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "CollectionSnapshot",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "lastPageNr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pageNr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [
                {
                    "name": "getIdx",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "needsPager",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toLastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toPreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Parameter",
            "id": "class-Parameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Base class for a parameter</p>\n",
            "rawdescription": "\n\nBase class for a parameter\n",
            "methods": [
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParameterCodec",
            "id": "class-ParameterCodec-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "properties": [],
            "description": "<p>Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See <a href=\"https://github.com/angular/angular/issues/18261\">https://github.com/angular/angular/issues/18261</a></p>\n",
            "rawdescription": "\n\nCustom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n",
            "methods": [
                {
                    "name": "decodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpParameterCodec"
            ]
        },
        {
            "name": "PathParameter",
            "id": "class-PathParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the operation path</p>\n",
            "rawdescription": "\n\nA parameter in the operation path\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueryParameter",
            "id": "class-QueryParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the query</p>\n",
            "rawdescription": "\n\nA parameter in the query\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RequestBuilder",
            "id": "class-RequestBuilder-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 204,
                "jsdoctags": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_bodyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | null",
                    "optional": false,
                    "description": "",
                    "line": 203
                },
                {
                    "name": "_bodyContentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "_header",
                    "defaultValue": "new Map<string, HeaderParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 202,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_path",
                    "defaultValue": "new Map<string, PathParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 200,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_query",
                    "defaultValue": "new Map<string, QueryParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "operationPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Helper to build http requests from parameters</p>\n",
            "rawdescription": "\n\nHelper to build http requests from parameters\n",
            "methods": [
                {
                    "name": "body",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the body content, along with the content type\n",
                    "description": "<p>Sets the body content, along with the content type</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuilds the request with the current set parameters\n",
                    "description": "<p>Builds the request with the current set parameters</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formDataValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "header",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a header parameter\n",
                    "description": "<p>Sets a header parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "path",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a path parameter\n",
                    "description": "<p>Sets a path parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a query parameter\n",
                    "description": "<p>Sets a query parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SettingsDialogSpecWrapper",
            "id": "class-SettingsDialogSpecWrapper-4ce3603220e9c8682843871f70b341321e40498046751c93d96ca232daca50680f670549cd051fcdca4141f8d26e5d0d0d207abfe6a49fbecc8c3460df132a13",
            "file": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './settings-dialog.component.html',\n    styleUrls: ['./settings-dialog.component.scss']\n})\nexport class SettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.specWrapper.getSystemType(this.spec.data.systemComponentKey))\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spec",
                        "type": "SettingsDialogSpec",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "spec",
                        "type": "SettingsDialogSpec",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getSystemType",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StructureDto2TreeNodeConverter",
            "id": "class-StructureDto2TreeNodeConverter-756f5dfda07dc54512b97f6afd682ebd28eed3e4cf112f49c3d077edad0ecc37d8e7989d2775932006e0410a467a95c433d4533d70982686a70774701ba11780",
            "file": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions, TreeNode} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nclass StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SnapshotDialogTreeNode[]",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRecursive",
                    "args": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SnapshotDialogTreeNode",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SystemDescriptionWrapper",
            "id": "class-SystemDescriptionWrapper-1289dbba31363e2ebb912d824c1b471afc2c400e5422a296b06d6860e5693b1871981e0daf43cf6328167b36a2adbebb32bdfa1fb9addcd8c8c35a068086f400",
            "file": "src/app/system-description-page/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from \"@fabric/services\";\nimport {SettingsDialogData, SettingsDialogSpec} from \"./settings-panel/settings-dialog/settings-dialog.component\";\nimport {MongoMetaModelService} from \"./meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service\";\n\n\nexport interface Setting {\n    key: string,\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string,\n    environmentKey : string,\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService,\n        private mongoMetaModelService: MongoMetaModelService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string): Promise<StructureDto> {\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).toPromise()\n          .then(() => this.loadEnvironmentSystemComponentStructure(environmentKey, systemComponent.key))\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescription",
                        "type": "SystemDescriptionDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "systemDescription",
                        "type": "SystemDescriptionDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getEnvironmentByKey",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentDto",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnvironments",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemType",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingRows",
                    "args": [],
                    "optional": false,
                    "returnType": "SettingRow[]",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settingRowsForSystemComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionButtonsComponent",
            "id": "component-ActionButtonsComponent-de3b0e7808e2035ce75f1e4dfa6e0de78e27e01aed1904bc801955ed09218d08d1689788309b8b998e0400ba56d2eef8937b0ea2b598d39efe7fe53fe0710d1c",
            "file": "src/app/common/grid/action-buttons/action-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-buttons",
            "styleUrls": [
                "./action-buttons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ActionsSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "callActionHandler",
                    "args": [
                        {
                            "name": "action",
                            "type": "ActionSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ActionSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface ActionSpec {\n  handler: () => void\n  label: string\n}\n\nexport interface ActionsSpec {\n  actions: ActionSpec[]\n}\n\n@Component({\n  selector: 'app-action-buttons',\n  templateUrl: './action-buttons.component.html',\n  styleUrls: ['./action-buttons.component.scss']\n})\nexport class ActionButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  actions: ActionSpec[]\n\n  @Input()\n  spec: ActionsSpec\n\n  ngOnInit(): void {\n    // cfr https://stackoverflow.com/questions/71011494/angular-8-click-event-not-firing-inside-ngfor-when-iterating-over-object-array\n    this.actions = this.spec.actions\n  }\n\n  callActionHandler(action: ActionSpec) {\n    action.handler()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./action-buttons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"spec\" class=\"d-flex flex-row mb-3\">\n    <ng-container *ngFor=\"let action of this.actions\">\n        <a class=\"btn  btn-sm btn-outline-primary  m-2\"\n           (click)=\"callActionHandler(action)\">{{action.label}}\n        </a>\n    </ng-container>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cb305de246bc8e937e1b8d3fb215e5dc4daf1db31e1f3d02b9e066b7e669453cf012b9de3627868e69c7a2927a77da80260a327327e7c85244a230fac66ab75b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'fabric-frontend-ng'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'fabric-frontend-ng';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "BackButtonComponent",
            "id": "component-BackButtonComponent-d0b64b5c602e1545f30e5142393474f20627e5484d2da6bc73bb31f380a66d93f3fed181196b0b7e048f1e0abdd546dff4fcba75f32979b1742a20a7d5d1c5e3",
            "file": "src/app/common/back-button/back-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-back-button",
            "styleUrls": [
                "./back-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any[] | string | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-back-button',\n  templateUrl: './back-button.component.html',\n  styleUrls: ['./back-button.component.scss']\n})\nexport class BackButtonComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  routerLink: any[] | string | null | undefined\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./back-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a style=\"text-decoration: none; \" [routerLink]=\"routerLink\">&thinsp; &#9664; &nbsp;</a>\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-776615923215f6c5482f2270abe570abbcb5f6b3f59c35e4fd3d52358b039ddb693ef93c5e38fa070456398b1677ef72ce7bfb9be2f8a938dbf0719c05a62f15",
            "file": "src/app/common/layout/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumbs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "BreadcrumbItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface BreadcrumbItem {\n  label?: string\n  route?: string\n}\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  breadcrumbs: BreadcrumbItem[]\n\n  ngOnInit(): void {\n  }\n\n  get active(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-1\n    return this.breadcrumbs[idx]\n  }\n\n  get parentOfActive(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-2\n    return this.breadcrumbs[idx]\n  }\n\n  get allParents(): BreadcrumbItem[] {\n    let idxActive = this.breadcrumbs.length-1\n    return this.breadcrumbs.slice(0, idxActive)\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "active": {
                    "name": "active",
                    "getSignature": {
                        "name": "active",
                        "type": "",
                        "returnType": "BreadcrumbItem",
                        "line": 23
                    }
                },
                "parentOfActive": {
                    "name": "parentOfActive",
                    "getSignature": {
                        "name": "parentOfActive",
                        "type": "",
                        "returnType": "BreadcrumbItem",
                        "line": 28
                    }
                },
                "allParents": {
                    "name": "allParents",
                    "getSignature": {
                        "name": "allParents",
                        "type": "[]",
                        "returnType": "BreadcrumbItem[]",
                        "line": 33
                    }
                }
            },
            "templateData": "<nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <app-back-button [routerLink]=\"parentOfActive.route\"></app-back-button>\n        <li *ngFor=\"let breadcrumb of allParents\" class=\"breadcrumb-item\"><a [routerLink]=\"breadcrumb.route\">{{breadcrumb.label}}</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{active.label}}</li>\n    </ol>\n</nav>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-1009ff9abfa95b495160a829a45d39299156678089bca892c691485174519748ddceaea8b57c760e1c4825ec3f9d1276fb448deb53fdfbbd00cdc105ce31c98b",
            "file": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog",
            "styleUrls": [
                "./confirmation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ConfirmationDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faExclamationTriangle",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nexport interface ConfirmationDialogSpec {\n  title: string\n  message: string\n  warning? : string\n  cancel: () => void\n  confirm: () => void\n}\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  @Input()\n  spec: ConfirmationDialogSpec\n\n  faExclamationTriangle=faExclamationTriangle\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./confirmation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"spec\" class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <div class=\"modal-header\">\n      <h5 class=\"modal-title\">{{spec.title}}</h5>\n      <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n    </div>\n    <div class=\"modal-body\">\n      <p>{{spec.message}}</p>\n      <p><div *ngIf=\"spec.warning\">\n        <fa-icon  [icon]=\"faExclamationTriangle\" size=\"2x\" class=\"text-danger\"></fa-icon>\n        {{spec.warning}}\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\">Yes</button>\n      <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">No</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ConsolePageComponent",
            "id": "component-ConsolePageComponent-83584a41f4bc164cd833d4bc1162d4b0d711e00936bb9a2c38fae763cf73418034e281d1778260581cbf4613a9e23bbc4243867dd7ac64c7df24d9642f6fdb5b",
            "file": "src/app/console-page/console-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-console-page",
            "styleUrls": [
                "./console-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./console-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\n    {\n      label: 'Home',\n      route: '/'\n    },\n    {\n      label: 'Console'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbItem[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSourceSelection",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "DataSourceSelection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "DataSourceSelection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {BreadcrumbItem} from \"../common/layout/breadcrumb/breadcrumb.component\";\nimport {DataSourceSelection} from \"./data-source-selection-panel/data-source-selection-panel.component\";\n\n@Component({\n  selector: 'app-console-page',\n  templateUrl: './console-page.component.html',\n  styleUrls: ['./console-page.component.scss']\n})\nexport class ConsolePageComponent implements OnInit {\n\n  breadcrumbs: BreadcrumbItem[] = [\n    {\n      label: 'Home',\n      route: '/'\n    },\n    {\n      label: 'Console'\n    }\n  ]\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  selectedDataSource: DataSourceSelection\n\n  selectDataSource(dataSource: DataSourceSelection) {\n    this.selectedDataSource = dataSource\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./console-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #title>\n    <app-title text=\"Console\"></app-title>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n</ng-template>\n\n<ng-template #middle>\n    <app-data-source-selection-panel (selected)=\"selectDataSource($event)\"></app-data-source-selection-panel>\n    <app-console-panel *ngIf=\"selectedDataSource\" [dataSource]=\"selectedDataSource\"></app-console-panel>\n</ng-template>"
        },
        {
            "name": "ConsolePanelComponent",
            "id": "component-ConsolePanelComponent-f1d70e71942638dff8ed7387a48c20b7d13a12eaf1cab42e1e2987400c1dcfa09a3d4b66eefbc120128e126b0115e5e051c0127b5ae0df646fbd7593deaa5d67",
            "file": "src/app/console-page/console-panel/console-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ConsoleService"
                }
            ],
            "selector": "app-console-panel",
            "styleUrls": [
                "./console-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./console-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "DataSourceSelection",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "descriptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConsoleDescriptorDto",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "faPlay",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    fields: new FormArray([])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "historyItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HistoryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "jsonOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "snippetDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnippetDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "snippets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnippetDto[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "stackTraceOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 154
                }
            ],
            "methodsClass": [
                {
                    "name": "addHistoryItem",
                    "args": [
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSnippet",
                    "args": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeSnippetDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "convertHistoryItemToSnippet",
                    "args": [
                        {
                            "name": "historyItem",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "historyItem",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fieldControl",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "descriptorDto",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "descriptorDto",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSnippets",
                    "args": [
                        {
                            "name": "snippets",
                            "type": "SnippetDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "snippets",
                            "type": "SnippetDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSnippetDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SnippetDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SnippetDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snippetDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "snippetSelected",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {ConsoleService} from \"../console.service\";\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\nimport {DataSourceSelection} from \"../data-source-selection-panel/data-source-selection-panel.component\";\nimport {faPlay} from '@fortawesome/free-solid-svg-icons';\nimport {ConsoleDescriptorDto, SnippetDto} from \"@fabric/models\";\nimport {HistoryItem} from \"./history-panel/history-panel.component\";\nimport {SnippetDialogData, SnippetDialogSpec} from \"./snippet-dialog/snippet-dialog.component\";\nimport {ModalService} from \"../../common/modal/modal-service\";\n\n@Component({\n  selector: 'app-console-panel',\n  templateUrl: './console-panel.component.html',\n  styleUrls: ['./console-panel.component.scss'],\n  providers: [ConsoleService]\n})\nexport class ConsolePanelComponent implements OnChanges {\n\n  faPlay = faPlay\n\n  constructor(private modalService: ModalService, private service: ConsoleService) { }\n\n  @Input()\n  dataSource: DataSourceSelection\n\n  ngOnChanges(changes: SimpleChanges) {\n    let systemComponentKey = this.dataSource.systemComponentKey;\n    this.service.loadDescriptor(systemComponentKey).then((descriptor)=> this.initForm(descriptor))\n    this.service.loadSnippets(systemComponentKey).then((snippets)=>this.initSnippets(snippets))\n  }\n\n  descriptor: ConsoleDescriptorDto\n\n  // input query\n\n  formGroup: FormGroup = new FormGroup({\n    fields: new FormArray([])\n  })\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  private initForm(descriptorDto: ConsoleDescriptorDto) {\n    this.descriptor = descriptorDto\n    this.fieldsControl.controls = []\n    this.descriptor.items.forEach(item =>\n        this.fieldsControl.push(new FormControl(null))\n    )\n  }\n\n  doQuery() {\n    let attributes = {}\n    this.fieldsControl.value.forEach((fieldValue, i) => {\n      attributes[this.descriptor.items[i].name] = fieldValue\n    })\n    this.service.runRequest(\n        this.dataSource.environmentKey,\n        this.dataSource.systemComponentKey,\n        attributes\n    ).then((response) => {\n      this.jsonOutput = null\n      this.stackTraceOutput = null\n      switch (response.consoleOutputType) {\n        case 'JSON': {\n          this.jsonOutput = JSON.parse(response.content)\n          break\n        }\n        case 'STACKTRACE': {\n          this.stackTraceOutput = response.content\n          break\n        }\n      }\n      if(response.consoleOutputType != 'STACKTRACE') {\n        this.addHistoryItem(attributes)\n      }\n    })\n  }\n\n  // history\n\n  historyItems: HistoryItem[] = []\n\n  private addHistoryItem(attributes: {}) {\n    this.historyItems.push({\n      attributes\n    })\n  }\n\n  convertHistoryItemToSnippet(historyItem: HistoryItem) {\n      this.openSnippetDialog({\n        descriptor: this.descriptor,\n        data: {\n          attributes: historyItem.attributes\n        },\n        cancel: () => this.closeSnippetDialog(),\n        confirm: (data) => { this.addSnippet(this.descriptor, data); this.closeSnippetDialog() }\n      })\n  }\n\n  // snippets\n\n  snippets: SnippetDto[]\n\n  private initSnippets(snippets: SnippetDto[]) {\n    return this.snippets = snippets;\n  }\n\n  snippetSelected(snippet: SnippetDto) {\n    this.descriptor.items.forEach((item, index) => {\n      let value = snippet.attributes[item.name]\n      this.fieldControl(index).setValue(value)\n    })\n  }\n\n  private addSnippet(descriptor: ConsoleDescriptorDto, data: SnippetDialogData) {\n    let attributes = {}\n    descriptor.items.forEach((item, index) => {\n      attributes[item.name] = data.fields[index]\n    })\n    this.service.addSnippet(data.title, this.dataSource.systemComponentKey, attributes)\n        .then((snippets) => {\n          this.snippets = snippets\n        })\n  }\n\n  // snippet dialog\n\n  snippetDialogId(): string {\n    return 'snippet-dialog-id'\n  }\n\n  snippetDialogSpec: SnippetDialogSpec;\n\n  private openSnippetDialog(spec: SnippetDialogSpec) {\n    this.snippetDialogSpec = spec\n    this.modalService.open(this.snippetDialogId())\n  }\n\n  private closeSnippetDialog() {\n    this.snippetDialogSpec = null\n    this.modalService.close(this.snippetDialogId())\n  }\n\n\n\n  // output\n\n  jsonOutput: string\n  stackTraceOutput: string\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./console-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ConsoleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ConsoleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "fieldsControl": {
                    "name": "fieldsControl",
                    "getSignature": {
                        "name": "fieldsControl",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 40
                    }
                }
            },
            "templateData": "<div *ngIf=\"descriptor\" class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <app-panel>\n                <div style=\"min-height: 80vh\">\n                    <form [formGroup]=\"formGroup\">\n                        <ng-container formArrayName=\"fields\">\n                            <ng-container *ngFor=\"let item of descriptor.items; let i=index\">\n                                <ng-container *ngIf=\"item.inputType==='TEXT'\">\n                                    <input type=\"text\" class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                                </ng-container>\n                                <ng-container *ngIf=\"item.inputType==='TEXTAREA'\">\n                                    <textarea rows=\"12\" class=\"form-control\" [formControl]=\"fieldControl(i)\"></textarea>\n                                </ng-container>\n                                <ng-container *ngIf=\"item.inputType==='SELECT'\">\n                                    <select class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                                        <option *ngFor=\"let selectValue of item.selectValues\"\n                                                [ngValue]=\"selectValue\">{{selectValue}}</option>\n                                    </select>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                            <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"doQuery()\">\n                                <fa-icon [icon]=\"faPlay\"></fa-icon>\n                            </button>\n                    </form>\n                    <app-snippet-panel [snippets]=\"snippets\" (selected)=\"snippetSelected($event)\"></app-snippet-panel>\n                    <app-history-panel [historyItems]=\"historyItems\" (convert)=\"convertHistoryItemToSnippet($event)\" ></app-history-panel>\n                </div>\n            </app-panel>\n        </div>\n        <div class=\"col-md-9\">\n            <app-panel>\n                <div style=\"min-height: 80vh; max-height: 80vh; overflow: auto\">\n                    <ng-container *ngIf=\"jsonOutput\">\n                        <pre>{{jsonOutput | json}}</pre>\n                    </ng-container>\n                    <ng-container *ngIf=\"stackTraceOutput\" >\n                        <div class=\"bg-warning\">\n                            {{stackTraceOutput}}\n                        </div>\n                    </ng-container>\n                </div>\n            </app-panel>\n        </div>\n    </div>\n\n</div>\n\n<jw-modal [id]=\"snippetDialogId()\">\n    <app-snippet-dialog [spec]=\"snippetDialogSpec\"></app-snippet-dialog>\n</jw-modal>\n"
        },
        {
            "name": "DashboardPageComponent",
            "id": "component-DashboardPageComponent-fd94979ba106110f96992f81ad4c7f6d7b407e2be07545b55e5231ed228c5d36036be68479257df05ef8b01dfa4bf4f005c32d863542f0df1d801ecee342ca1d",
            "file": "src/app/dashboard-page/dashboard-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-page",
            "styleUrls": [
                "./dashboard-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DashboardService } from \"./dashboard.service\";\nimport {ModalService} from \"../common/modal/modal-service\";\nimport {SnapshotDialogData, SnapshotDialogSpec} from \"./snapshot-dialog/snapshot-dialog.component\";\nimport {SystemDescriptionService} from \"../system-description-page/system-description.service\";\n\n@Component({\n  selector: 'app-dashboard-page',\n  templateUrl: './dashboard-page.component.html',\n  styleUrls: ['./dashboard-page.component.scss']\n})\nexport class DashboardPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #title>\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-10\">\n                <h3>\n                    Snapshots\n                </h3>\n            </div>\n            <div class=\"col-md-1\">\n                <a class=\"btn  btn-sm btn-outline float-right m-2\" routerLink=\"/fe/systemdescription/\">Settings</a>\n            </div>\n            <div class=\"col-md-1\">\n                <a class=\"btn  btn-sm btn-outline float-right m-2\" routerLink=\"/fe/console/\">Console</a>\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <nav aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item active\" aria-current=\"page\"></li>\n        </ol>\n    </nav>\n</ng-template>\n\n<ng-template #middle>\n        <app-snapshot-overview-panel></app-snapshot-overview-panel>\n</ng-template>\n\n"
        },
        {
            "name": "DataSourceSelectionPanelComponent",
            "id": "component-DataSourceSelectionPanelComponent-23d5db79c1a4c6734c2a28ae8ac7f1d736c047000a682ca0c549320ef5a260b807f621e4392866b685830dfea023b6d5326da30c98a075ae974bbb81938d02b2",
            "file": "src/app/console-page/data-source-selection-panel/data-source-selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-source-selection-panel",
            "styleUrls": [
                "./data-source-selection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-source-selection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<DataSourceSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "faBolt",
                    "defaultValue": "faBolt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "expand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnvironmentChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {faBolt} from '@fortawesome/free-solid-svg-icons';\n\nexport interface DataSourceSelection {\n    environmentKey: string,\n    systemComponentKey: string\n}\n\n@Component({\n    selector: 'app-data-source-selection-panel',\n    templateUrl: './data-source-selection-panel.component.html',\n    styleUrls: ['./data-source-selection-panel.component.scss']\n})\nexport class DataSourceSelectionPanelComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$;\n\n    collapsed: boolean = false\n\n    faBolt = faBolt\n\n    ngOnInit(): void {\n    }\n\n    @Output()\n    selected = new EventEmitter<DataSourceSelection>()\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n    })\n\n    onEnvironmentChange() {\n\n    }\n\n    connect() {\n        this.selected.emit(this.formGroup.value)\n        this.collapse()\n    }\n\n    collapse() {\n        this.collapsed = true\n    }\n\n    expand() {\n        this.collapsed = false\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./data-source-selection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"!collapsed && systemDescription$ | async as systemDescription\">\n    <form [formGroup]=\"formGroup\">\n\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <div class=\"form-floating  mb-2\">\n                <select id=\"systemComponentKey\" formControlName=\"systemComponentKey\" class=\"form-select\"  >\n                    <option *ngFor=\"let systemComponent of systemDescription.systemComponents\"\n                            [ngValue]=\"systemComponent.key\">{{systemComponent.key}}</option>\n                </select>\n                <label for=\"systemComponentKey\" class=\"form-label\">Datasource</label>\n            </div>\n        </div>\n        <div class=\"col-md-3\">\n            <div class=\"form-floating mb-2\" >\n                <select id=\"environmentKey\" formControlName=\"environmentKey\" class=\"form-select\" (change)=\"onEnvironmentChange()\" >\n                    <option *ngFor=\"let environment of systemDescription.environments\"\n                            [ngValue]=\"environment.key\">{{environment.key}}</option>\n                </select>\n                <label for=\"environmentKey\" class=\"form-label\">Environment</label>\n            </div>\n        </div>\n        <div class=\"col-md-2\">\n            <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"connect()\">\n                <fa-icon [icon]=\"faBolt\"></fa-icon> Connect\n            </button>\n        </div>\n    </div>\n    </form>\n</ng-container>\n\n<ng-container *ngIf=\"collapsed\">\n    <button type=\"button\" class=\"btn btn-outline-success\" (click)=\"expand()\">\n        <fa-icon [icon]=\"faBolt\"></fa-icon>\n    </button>\n</ng-container>"
        },
        {
            "name": "DummyPageComponent",
            "id": "component-DummyPageComponent-db545d4d2415fa8bf927ad063570b0c90f54f5c00323647bc2d4720fbf52f840fa5641090f341ed5a31164c392679d816e21426888616c8fd4a1e65d0edccdbd",
            "file": "src/app/dashboard-page/dummy-page/dummy-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dummy-page",
            "styleUrls": [
                "./dummy-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dummy-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "executionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExecutionId",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "i",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {ExecutionId} from \"@fabric/models\";\nimport {CommandControllerService} from \"@fabric/services\";\n\n@Component({\n    selector: 'app-dummy-page',\n    templateUrl: './dummy-page.component.html',\n    styleUrls: ['./dummy-page.component.scss']\n})\nexport class DummyPageComponent implements OnInit {\n\n    constructor(\n        private route: ActivatedRoute,\n        private commandControllerService: CommandControllerService\n    ) {}\n\n    executionId: ExecutionId\n\n    info\n\n    ngOnInit(): void {\n        this.route.paramMap.subscribe((params) => {\n            this.executionId = {id: params.get('executionId')}\n            this.refresh()\n        })\n    }\n\n    i = 0\n    refresh() {\n        this.commandControllerService.getExecutionInfoUsingGet({ id : this.executionId.id}).subscribe((dto) => {\n            this.info = dto\n            console.log('setting dto', dto)\n            this.i++\n            if (this.i < 200) {\n                setTimeout(() => this.refresh(), 500)\n            }\n        })\n\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dummy-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"info\">\n    <pre>{{info | json}}</pre>\n</ng-container>"
        },
        {
            "name": "EnvironmentDialogComponent",
            "id": "component-EnvironmentDialogComponent-5851485ab52937c62c5efc90b4006ba7adec9e0e03c73b03d366c88f22368ca66a416f7401aa57bbe45b910bc13697917dc748ef7ed2deee8314c245f75ae63c",
            "file": "src/app/system-description-page/environment-panel/environment-dialog/environment-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-environment-dialog",
            "styleUrls": [
                "./environment-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environment-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EnvironmentDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\n\nexport interface EnvironmentDialogData {\n  key: string,\n  label: string,\n}\n\nexport interface EnvironmentDialogSpec {\n  keys: string[];\n  data: EnvironmentDialogData\n  cancel: () => void\n  confirm: (data: EnvironmentDialogData) => void\n}\n\n@Component({\n  selector: 'app-environment-dialog',\n  templateUrl: './environment-dialog.component.html',\n  styleUrls: ['./environment-dialog.component.scss']\n})\nexport class EnvironmentDialogComponent implements OnInit, OnChanges {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: EnvironmentDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n      this.formGroup.setValue(this.spec.data)\n      this.formGroup.markAsPristine()\n      this.formGroup.markAsUntouched()\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })\n\n  public get keyControl(): FormControl {\n    return <FormControl> this.formGroup.get('key')\n  }\n\n  public keyControlInvalid() : boolean {\n    return showValidationMessages(this.keyControl)\n  }\n\n  public get labelControl(): FormControl {\n    return <FormControl> this.formGroup.get('label')\n  }\n\n  labelControlInvalid() {\n    return showValidationMessages(this.labelControl)\n  }\n\n  private get systemTypeControl(): FormControl {\n    return <FormControl> this.formGroup.get('systemType')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./environment-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "keyControl": {
                    "name": "keyControl",
                    "getSignature": {
                        "name": "keyControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 47
                    }
                },
                "labelControl": {
                    "name": "labelControl",
                    "getSignature": {
                        "name": "labelControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 55
                    }
                },
                "systemTypeControl": {
                    "name": "systemTypeControl",
                    "getSignature": {
                        "name": "systemTypeControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 63
                    }
                }
            },
            "templateData": "<div *ngIf=\"formGroup\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Add System Component</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\" class=\"form-group\">\n                    <label for=\"key\" class=\"form-label\">Key</label>\n                    <input formControlName=\"key\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"keyControlInvalid()\">\n                    <div id=\"key\" class=\"form-text\">Enter a key for the component.</div>\n                    <app-validation-messages [control]=\"keyControl\"></app-validation-messages>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"label\" class=\"form-label\" >Label</label>\n                    <input formControlName=\"label\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"labelControlInvalid()\">\n                    <div id=\"label\" class=\"form-text\">Enter a description.</div>\n                </div>\n\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "EnvironmentPanelComponent",
            "id": "component-EnvironmentPanelComponent-71aff269d6805e9a4255b35ae2e5edb108794c16125ceaa69f2dba24c77037e0b772775f8e5b7ddf595001870461c2d84e33117ecd1b778460e72f18685d94ef",
            "file": "src/app/system-description-page/environment-panel/environment-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-environment-panel",
            "styleUrls": [
                "./environment-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environment-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "environmentDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEnvironment",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeEnvironmentDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "editEnvironment",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "environmentDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeys",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exceptEnvironment",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exceptEnvironment",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEnvironmentDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "EnvironmentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "EnvironmentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {EnvironmentDialogData, EnvironmentDialogSpec} from \"./environment-dialog/environment-dialog.component\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {ModalService} from \"../../common/modal/modal-service\";\nimport {SystemDescriptionService} from \"../system-description.service\";\n\n@Component({\n  selector: 'app-environment-panel',\n  templateUrl: './environment-panel.component.html',\n  styleUrls: ['./environment-panel.component.scss']\n})\nexport class EnvironmentPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n\n  constructor(modalService: ModalService, private service: SystemDescriptionService) {\n    super(modalService);\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  systemDescription: SystemDescriptionDto\n\n  // environments\n\n  environmentDialogSpec: EnvironmentDialogSpec\n\n  environmentDialogId(): string {\n    return 'environmentDialog'\n  }\n\n  private openEnvironmentDialog(spec: EnvironmentDialogSpec) {\n    this.environmentDialogSpec = spec\n    this.modalService.open(this.environmentDialogId())\n  }\n\n  private closeEnvironmentDialog() {\n    this.environmentDialogSpec = null\n    this.modalService.close(this.environmentDialogId())\n  }\n\n  addEnvironment(systemDescription: SystemDescriptionDto) {\n    this.openEnvironmentDialog({\n      keys: this.environmentKeys(systemDescription),\n      data: {\n        key: null,\n        label: null,\n      },\n      confirm: data => {\n        this.closeEnvironmentDialog()\n        this.service.addEnvironment(<SystemComponentDto>data)\n      },\n      cancel: () => this.closeEnvironmentDialog()\n    })\n  }\n\n  editEnvironment(systemDescription: SystemDescriptionDto, environment: EnvironmentDto) {\n    this.openEnvironmentDialog({\n      keys: this.environmentKeys(systemDescription, environment),\n      data: <EnvironmentDialogData> { ... environment},\n      confirm: data => {\n        this.closeEnvironmentDialog()\n        this.service.updateEnvironment(environment, <EnvironmentDto>data)\n      },\n      cancel: () => this.closeEnvironmentDialog()\n    })\n  }\n\n  removeEnvironment(environment: EnvironmentDto) {\n    this.openConfirmationDialog({\n      title: 'Confirm delete',\n      message: `Delete environment ${environment.key}?`,\n      warning: `This will also remove ${environment.key} connection settings`,\n      confirm: () => {\n        this.closeConfirmationDialog()\n        this.service.deleteEnvironment(environment)\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n  private environmentKeys(systemDescription: SystemDescriptionDto, exceptEnvironment?: SystemComponentDto): string[] {\n    return systemDescription.environments\n        .filter(environment => environment.key != exceptEnvironment?.key)\n        .map(environment => environment.key);\n  }\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-env'\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./environment-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <h4>Environments</h4>\n    <table class=\"table table-sm table-striped table-bordered\">\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Key</th>\n            <th scope=\"col\">Label</th>\n            <th scope=\"col\"></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let environment of systemDescription.environments\">\n            <th scope=\"row\"></th>\n            <td>{{environment.key}}</td>\n            <td>{{environment.label}}</td>\n            <td>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"editEnvironment(systemDescription, environment)\">Edit\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"removeEnvironment(environment)\">Remove\n                </div>\n            </td>\n\n        </tr>\n        </tbody>\n    </table>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n         (click)=\"addEnvironment(systemDescription)\">\n        Add\n    </div>\n</app-panel>\n\n<jw-modal [id]=\"environmentDialogId()\">\n    <app-environment-dialog [spec]=\"environmentDialogSpec\"></app-environment-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "HistoryPanelComponent",
            "id": "component-HistoryPanelComponent-cad8bcc54aba95a9881ce972bb51cbdf8b66ac8a1f34fd491359ef557bf608f280b341e253f172ba93339aece941fb30adbb17c4fc52f2687333f1c54b2bba35",
            "file": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history-panel",
            "styleUrls": [
                "./history-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./history-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "historyItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "HistoryItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "convert",
                    "defaultValue": "new EventEmitter<HistoryItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<HistoryItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "asOneLine",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToSnippet",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport interface HistoryItem {\n  attributes?: { [key: string]: string };\n}\n\n@Component({\n  selector: 'app-history-panel',\n  templateUrl: './history-panel.component.html',\n  styleUrls: ['./history-panel.component.scss']\n})\nexport class HistoryPanelComponent {\n\n  @Input()\n  historyItems: HistoryItem[]\n\n  @Output()\n  selected = new EventEmitter<HistoryItem>()\n\n  @Output()\n  convert = new EventEmitter<HistoryItem>()\n\n  apply(item: HistoryItem) {\n    this.selected.emit(item)\n  }\n\n  asOneLine(item: HistoryItem): string {\n    let line = ''\n    Object.keys(item.attributes).forEach((key, index) => {\n      let value = item.attributes[key]\n      if (value) {\n        line += index > 0 ? ' ' : ''\n        line += item.attributes[key]\n      }\n    })\n    return line\n  }\n\n  convertToSnippet(item: HistoryItem) {\n    this.convert.emit(item)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./history-panel.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"historyItems\">\n    <div class=\"list-group\">\n        <a class=\"list-group-item list-group-item-action list-group-item-light\" *ngFor=\"let item of historyItems\"\n           (click)=\"apply(item)\" href=\"javascript:void(0);\">\n            {{asOneLine(item)}}\n            <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"convertToSnippet(item)\">\n                convert into snippet\n            </button>\n        </a>\n    </div>\n</ng-container>"
        },
        {
            "name": "Layout1ColComponent",
            "id": "component-Layout1ColComponent-9d91de8ab231654ddbeb9f83b59e020d424d35896511707313ee65d16c1cda713ae086d66d0d591dc7180ee01dfe5b5e153dabf1a70e53b81f934808f2313fbc",
            "file": "src/app/common/layout/layout-1col/layout-1col.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-1col",
            "styleUrls": [
                "./layout-1col.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-1col.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "middle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef} from '@angular/core';\n\n@Component({\n  selector: 'app-layout-1col',\n  templateUrl: './layout-1col.component.html',\n  styleUrls: ['./layout-1col.component.scss']\n})\nexport class Layout1ColComponent {\n\n  @Input()\n  breadcrumb: TemplateRef<any>\n\n  @Input()\n  title: TemplateRef<any>\n\n  @Input()\n  middle: TemplateRef<any>\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../variables';\n\n.backdrop {\n  background-color: $storybook-secondary-100;\n  min-height: 100vh;\n}\n\n",
                    "styleUrl": "./layout-1col.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"backdrop\">\n    <ng-container *ngTemplateOutlet=\"title\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"breadcrumb\"></ng-container>\n\n    <div class=\"container-fluid\">\n        <div class=\"row middle\">\n            <div class=\"col-md-12\">\n                <ng-container *ngTemplateOutlet=\"middle\"></ng-container>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "MetaModelDialogComponent",
            "id": "component-MetaModelDialogComponent-ccdcc6ef3fdacff9c38dfce0ed6bf8a9a915585642af1e281bc3f472d1f007f3dca9ee94de4e2921f0a51744ab1d9120bbb58c2006913d2545cbd716ba9bbc83",
            "file": "src/app/system-description-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meta-model-dialog",
            "styleUrls": [
                "./meta-model-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meta-model-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "MetaModelDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "availableEnvironments",
                    "args": [],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {SystemDescriptionWrapper} from \"../../system-description.service\";\n\n\nexport interface MetaModelDialogData {\n  environmentKey: string\n}\n\nexport interface MetaModelDialogSpec {\n  systemComponent: SystemComponentDto\n  systemDescription: SystemDescriptionDto\n  data: MetaModelDialogData\n  cancel: () => void\n  confirm: (data: MetaModelDialogData) => void\n}\n\n@Component({\n  selector: 'app-meta-model-dialog',\n  templateUrl: './meta-model-dialog.component.html',\n  styleUrls: ['./meta-model-dialog.component.scss']\n})\nexport class MetaModelDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: MetaModelDialogSpec\n\n  formGroup: FormGroup = new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })\n\n  public get environmentKeyControl(): FormControl {\n    return <FormControl> this.formGroup.get('environmentKey')\n  }\n\n  environmentKeyControlInvalid() {\n    return showValidationMessages(this.environmentKeyControl)\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    return new SystemDescriptionWrapper(this.spec.systemDescription).getEnvironments(this.spec.systemComponent);\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./meta-model-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentKeyControl": {
                    "name": "environmentKeyControl",
                    "getSignature": {
                        "name": "environmentKeyControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 39
                    }
                }
            },
            "templateData": "<div *ngIf=\"formGroup && spec\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Fetch {{spec.systemComponent.label}} metadata</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\" class=\"form-group\">\n                    <label for=\"environmentKey\" class=\"form-label\">Environment</label>\n                    <select id=\"environmentKey\" formControlName=\"environmentKey\" class=\"form-select\" [class.is-invalid]=\"environmentKeyControlInvalid()\" >\n                        <option *ngFor=\"let environment of availableEnvironments()\"\n                                [ngValue]=\"environment.key\">{{environment.key}}</option>\n                    </select>\n                    <div class=\"form-text\">Select the environment where the metadata will be fetched from.</div>\n                </div>\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Fetch metadata</button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "MetaModelPanelComponent",
            "id": "component-MetaModelPanelComponent-ca47770bb456e8d6fd4435e47b7128d1805839c78bd43273590ec2c1d27aa7191a5cc88b0cfeb60b5c3d6d37f04f07becb371acf1e69adc25b8b960230c57c0e",
            "file": "src/app/system-description-page/meta-model-panel/meta-model-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meta-model-panel",
            "styleUrls": [
                "./meta-model-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meta-model-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SystemComponentDto",
                    "decorators": []
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metaModelDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaModelDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "structureDTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StructureDto",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addMetaModel",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeMetaModelDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "metaModelDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMetaModelDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "MetaModelDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "MetaModelDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {ModalService} from \"../../common/modal/modal-service\";\nimport {SystemDescriptionService} from \"../system-description.service\";\nimport {StructureDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {MetaModelDialogData, MetaModelDialogSpec} from \"./meta-model-dialog/meta-model-dialog.component\";\n\n@Component({\n  selector: 'app-meta-model-panel',\n  templateUrl: './meta-model-panel.component.html',\n  styleUrls: ['./meta-model-panel.component.scss']\n})\nexport class MetaModelPanelComponent extends HasConfirmationDialogMixin  implements OnInit {\n\n  constructor(modalService: ModalService, private service: SystemDescriptionService) {\n    super(modalService);\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  systemDescription: SystemDescriptionDto\n\n  @Input()\n  systemComponent: SystemComponentDto\n\n  metaModelDialogSpec: MetaModelDialogSpec;\n\n  confirmationDialogId(): string {\n    return \"metadata-confirmation-dialog-id\";\n  }\n\n  metaModelDialogId() {\n    return \"metadata-dialog\"\n  }\n  \n  private openMetaModelDialog(spec: MetaModelDialogSpec) {\n    this.metaModelDialogSpec = spec\n    this.modalService.open(this.metaModelDialogId())\n  }\n\n  private closeMetaModelDialog() {\n    this.metaModelDialogSpec = null\n    this.modalService.close(this.metaModelDialogId())\n  }\n\n  structureDTo: StructureDto\n\n  addMetaModel(systemDescription: SystemDescriptionDto) {\n    this.openMetaModelDialog({\n      systemComponent: this.systemComponent,\n      systemDescription,\n      data: {\n        environmentKey: null,\n      },\n      confirm: (data: MetaModelDialogData) => {\n        this.closeMetaModelDialog()\n        this.service.fetchMetaModel(this.systemComponent, data.environmentKey).then((structureDto =>  this.structureDTo = structureDto))\n      },\n      cancel: () => this.closeMetaModelDialog()\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./meta-model-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <h4>Metadata</h4>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\" (click)=\"addMetaModel(systemDescription)\">\n        Fetch\n    </div>\n    <pre>{{ structureDTo | json }}</pre>\n</app-panel>\n\n\n<jw-modal [id]=\"metaModelDialogId()\">\n    <app-meta-model-dialog [spec]=\"metaModelDialogSpec\"></app-meta-model-dialog>\n</jw-modal>\n\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-d74ee47333c88da5c2bfe8669b61c22405eae2385c548049d19e7fbbbfa634a9e28bda42e708d971aafee1609e244d7874f51eae05fdc19e515a652e530f40af",
            "file": "src/app/common/modal/modal.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jw-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {ModalService} from './modal-service';\n\n// based on https://github.com/cornflourblue/angular-10-custom-modal\n// licence MIT\n\n@Component({\n  selector: 'jw-modal',\n  styleUrls: ['./modal.component.css'],\n  templateUrl: 'modal.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n\n  @Input() id: string;\n  private element: any;\n\n  constructor(private modalService: ModalService, private el: ElementRef) {\n    this.element = el.nativeElement;\n  }\n\n  ngOnInit(): void {\n    if (!this.id) {\n      console.error('modal must have an id');\n      return;\n    }\n\n    document.body.appendChild(this.element);\n\n    this.element.addEventListener('click', el => {\n      if (el.target.className === 'jw-modal') {\n        this.close();\n      }\n    });\n\n    this.modalService.add(this);\n  }\n\n  ngOnDestroy(): void {\n    this.modalService.remove(this.id);\n    this.element.remove();\n  }\n\n  // open modal\n  open(): void {\n    this.element.style.display = 'block';\n    document.body.classList.add('jw-modal-open');\n  }\n\n  // close modal\n  close(): void {\n    this.element.style.display = 'none';\n    document.body.classList.remove('jw-modal-open');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "jw-modal {\n  display: none;\n}\n\njw-modal .jw-modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1000;\n  overflow: auto;\n}\n\njw-modal .jw-modal .jw-modal-body {\n  width: 800px;\n  margin: 130px auto;\n}\n\njw-modal .jw-modal-background {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #000;\n  opacity: 0.15;\n  z-index: 900;\n}\n\nbody.jw-modal-open {\n  overflow: hidden;\n}\n\n.modal-body {\n  max-height: calc(100vh - 200px);\n  overflow-y: auto;\n}\n",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"jw-modal\">\n  <div class=\"jw-modal-body\">\n    <ng-content></ng-content>\n  </div>\n</div>\n<div class=\"jw-modal-background\"></div>\n"
        },
        {
            "name": "MongoMetamodelPanelComponent",
            "id": "component-MongoMetamodelPanelComponent-de0094d6e1c95ee3864d6ea3021a6ed4344a77819af51fe064fc9586e96fa455d4b05347a779c49016ccf9ec1b8653ec4fa82fbfb0d17ca85d8d8608fc8afad4",
            "file": "src/app/system-description-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mongo-metamodel-panel",
            "styleUrls": [
                "./mongo-metamodel-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mongo-metamodel-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metaModels$",
                    "defaultValue": "this.mongoMetaModelService.metaModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {MongoMetaModelService} from \"./mongo-metamodel.service\";\n\n@Component({\n  selector: 'app-mongo-metamodel-panel',\n  templateUrl: './mongo-metamodel-panel.component.html',\n  styleUrls: ['./mongo-metamodel-panel.component.scss']\n})\nexport class MongoMetamodelPanelComponent implements OnInit {\n\n  constructor(private mongoMetaModelService: MongoMetaModelService) { }\n\n  metaModels$ = this.mongoMetaModelService.metaModels$\n\n  ngOnInit(): void {\n    this.mongoMetaModelService.load('MONGODB')\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mongo-metamodel-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoMetaModelService",
                        "type": "MongoMetaModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "mongoMetaModelService",
                        "type": "MongoMetaModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <pre *ngIf=\"metaModels$ | async as metaModels\">{{ metaModels.get('MONGODB') | json }}</pre>\n</app-panel>"
        },
        {
            "name": "MongoNavmodelPanelComponent",
            "id": "component-MongoNavmodelPanelComponent-f0af4f0519dc0ec44f0f709742a1057385247907e0292e01f5efe2a0eed4cfefd981b6d83104609ce5a859777d46372d5be7a376c140f97dd29ff753dfbddf9f",
            "file": "src/app/system-description-page/mongo-navmodel-panel/mongo-navmodel-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mongo-navmodel-panel",
            "styleUrls": [
                "./mongo-navmodel-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mongo-navmodel-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mongoNavigationModels$",
                    "defaultValue": "this.navigationService.navigationModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {MongoNavigationModelService} from \"../../snapshot-page/mongo-snapshot/mongo-navigation-model.service\";\n\n@Component({\n  selector: 'app-mongo-navmodel-panel',\n  templateUrl: './mongo-navmodel-panel.component.html',\n  styleUrls: ['./mongo-navmodel-panel.component.scss']\n})\nexport class MongoNavmodelPanelComponent implements OnInit {\n\n  constructor(private navigationService: MongoNavigationModelService) { }\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  ngOnInit(): void {\n    this.navigationService.load('MONGODB')\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mongo-navmodel-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "navigationService",
                        "type": "MongoNavigationModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "navigationService",
                        "type": "MongoNavigationModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <pre *ngIf=\"mongoNavigationModels$ | async as mongoNavigationModels\">{{ mongoNavigationModels.get('MONGODB') | json }}</pre>\n</app-panel>"
        },
        {
            "name": "MongoSnapshotComponent",
            "id": "component-MongoSnapshotComponent-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mongo-snapshot",
            "styleUrls": [
                "./mongo-snapshot.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mongo-snapshot.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "SnapshotId",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "documentSelection",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "mongoNavigationModels$",
                    "defaultValue": "this.navigationService.navigationModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "mongoSnapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MongoSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "mongoSnapshot$",
                    "defaultValue": "this.service.mongoSnapshot$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "pagedSelectedCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PagedCollection",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "selectedCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectCollection",
                    "args": [
                        {
                            "name": "collectionNavItem",
                            "type": "CollectionNavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionNavItem",
                            "type": "CollectionNavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDocument",
                    "args": [
                        {
                            "name": "docIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "docIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedDocument",
                    "args": [],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mongo-snapshot.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MongoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "MongoNavigationModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MongoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "MongoNavigationModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-panel>\n    <ng-container *ngIf=\"mongoNavigationModels$ | async as mongoNavigationModels\">\n        <ng-container *ngIf=\"mongoNavigationModels.get(componentKey) as mongoNavigationModel\">\n            <ul class=\"list-group\">\n                <li *ngFor=\"let root of  mongoNavigationModel.roots\" class=\"list-group-item \"\n                    [class.active]=\"root === selectedCollection\" (click)=\"selectCollection(root)\">\n                    {{root.collectionName}}\n                </li>\n            </ul>\n            <ng-container *ngIf=\"mongoSnapshot\">\n                <ng-container *ngIf=\"selectedCollection\">\n                    <ng-container *ngIf=\"documentSelection==null\">\n                      <ul *ngIf=\"pagedSelectedCollection.needsPager()\" class=\"pagination\">\n                        <li class=\"page-item\"><a class=\"page-link\" (click)=\"pagedSelectedCollection.toFirstPage()\">First</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\" (click)=\"pagedSelectedCollection.toPreviousPage()\">Previous</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\">{{(pagedSelectedCollection.pageNr + 1)}}/{{(pagedSelectedCollection.lastPageNr + 1)}}</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\"\n                                                 (click)=\"pagedSelectedCollection.toNextPage()\">Next</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\"\n                                                 (click)=\"pagedSelectedCollection.toLastPage()\">Last</a></li>\n                      </ul>\n                        <ul class=\"list-group\">\n                            <li class=\"list-group-item \"\n                                *ngFor=\"let document of pagedSelectedCollection.currentPage; let docIdx = index\"\n                                (click)=\"selectDocument(docIdx)\">\n                                {{document}}\n                            </li>\n                        </ul>\n                    </ng-container>\n                    <ng-container *ngIf=\"documentSelection!=null\">\n                        <pre>{{selectedDocument() | json}}</pre>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</app-panel>\n"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-a51a73e6ebaaf535727ea0fd30d54849385985825483bea89dfa0232aaa710ed6aebcbc5ba2fc4c03edd977ab4f24a4bbc850be2883fe473ba16c5c935736d81",
            "file": "src/app/common/panel/panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss']\n})\nexport class PanelComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n.panel-border {\n  background-color: $storybook-white !important;\n  border: 1px solid $storybook-secondary-400 !important;\n  margin-bottom: 7px;\n}\n\n.panel-container {\n  padding: 10px;\n}\n",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"panel-border\">\n  <div class=\"panel-container\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "PopupMenuComponent",
            "id": "component-PopupMenuComponent-0ed2a066939d050c3817abdaa5224e1550abfc0e1e39053eafafcfdc32891f5f99dc3539479d24da9479d665fdc02464183e284e09222363516fefb06a72513e",
            "file": "src/app/common/popup-menu/popup-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup-menu",
            "styleUrls": [
                "./popup-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "\"200px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuItemSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "visibility",
                    "defaultValue": "\"hidden\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.visibility'"
                        }
                    ]
                },
                {
                    "name": "x",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.left'"
                        }
                    ]
                },
                {
                    "name": "y",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.top'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "PopupMenuItemSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "PopupMenuItemSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDocumentClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.left",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.top",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.visibility",
                    "defaultValue": "\"hidden\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding, HostListener, Input, OnInit} from '@angular/core';\n\n// based on https://mobiarch.wordpress.com/2018/07/07/create-a-popup-menu-in-angular/\n\nexport interface PopupMenuItemSpec {\n  label: string\n  onClick: () => void\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.scss']\n})\nexport class PopupMenuComponent implements OnInit {\n  @HostBinding(\"style.top\") y = \"0px\"\n  @HostBinding(\"style.left\") x = \"0px\"\n  @HostBinding(\"style.visibility\") visibility = \"hidden\"\n  @Input() @HostBinding(\"style.width\") width = \"200px\"\n\n  constructor() {\n  }\n\n  items: PopupMenuItemSpec[]\n\n  ngOnInit() {\n  }\n\n  open(e: MouseEvent) {\n    this.x = `${e.pageX}px`\n    this.y = `${e.pageY}px`\n\n    this.visibility = \"visible\"\n\n    e.stopPropagation()\n  }\n\n  close() {\n    this.visibility = \"hidden\"\n  }\n\n  @HostListener('document:click')\n  public onDocumentClick() {\n    if (this.visibility === \"visible\") {\n      this.close()\n    }\n  }\n\n  onClick(item: PopupMenuItemSpec) {\n    item.onClick.apply(this, [])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n:host {\n  border-top: 1px solid rgb(13, 110, 253);\n  border-left: 1px solid rgb(13, 110, 253);\n  border-right: 1px solid rgb(13, 110, 253);\n  position: absolute;\n  z-index: 999;\n  cursor: pointer;\n  background: white;\n}\n\n.items p {\n  margin: 0px;\n  padding: 5px;\n  border-bottom: 1px solid rgb(13, 110, 253);\n}\n\n.items p:hover {\n  color: white;\n  background: $storybook-primary-300;\n}\n",
                    "styleUrl": "./popup-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items\" *ngFor=\"let item of items\">\n  <p (click)=\"onClick(item)\">{{item.label}}</p>\n</div>\n"
        },
        {
            "name": "SettingsDialogComponent",
            "id": "component-SettingsDialogComponent-4ce3603220e9c8682843871f70b341321e40498046751c93d96ca232daca50680f670549cd051fcdca4141f8d26e5d0d0d207abfe6a49fbecc8c3460df132a13",
            "file": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-dialog",
            "styleUrls": [
                "./settings-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "SettingsDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "connectionTester",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionTester",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "faBolt",
                    "defaultValue": "faBolt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "faCheckCircle",
                    "defaultValue": "faCheckCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "settingDescriptors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "specWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsDialogSpecWrapper",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configureSettingsControlForSystemType",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeyControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSettingDescriptors",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SettingDescriptorDto[]",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnvironmentChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSystemComponentKeyChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "settingsControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormArray",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "settingValueControl",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingValueControlInvalid",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "systemComponentKeyControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponentKeyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './settings-dialog.component.html',\n    styleUrls: ['./settings-dialog.component.scss']\n})\nexport class SettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.specWrapper.getSystemType(this.spec.data.systemComponentKey))\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"formGroup && spec\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Connection settings</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"form-floating mb-3\" >\n                    <select id=\"environmentKey\" formControlName=\"environmentKey\" class=\"form-select\" [class.is-invalid]=\"environmentKeyControlInvalid()\" (change)=\"onEnvironmentChange()\" >\n                        <option *ngFor=\"let environment of spec.environments\"\n                                [ngValue]=\"environment.key\">{{environment.key}}</option>\n                    </select>\n                    <label for=\"environmentKey\" class=\"form-label\">Environment</label>\n                    <app-validation-messages [control]=\"environmentKeyControl()\"></app-validation-messages>\n                </div>\n\n                <div class=\"form-floating  mb-3\">\n                    <select disabled id=\"systemComponentKey\" formControlName=\"systemComponentKey\" class=\"form-select\" [class.is-invalid]=\"systemComponentKeyControlInvalid()\" (change)=\"onSystemComponentKeyChange()\" >\n                        <option *ngFor=\"let systemComponent of spec.systemComponents\"\n                                [ngValue]=\"systemComponent.key\">{{systemComponent.key}}</option>\n                    </select>\n                    <label for=\"systemComponentKey\" class=\"form-label\">Datasource</label>\n                    <app-validation-messages [control]=\"systemComponentKeyControl()\"></app-validation-messages>\n                </div>\n\n                <ng-container formArrayName=\"settings\">\n                    <ng-container *ngFor=\"let settingDescriptor of settingDescriptors; let i=index\">\n                        <div class=\"form-floating mb-3\">\n                            <input [id]=\"settingDescriptor.key\" [formControl]=\"settingValueControl(i)\" [placeholder]=\"settingDescriptor.placeHolder\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"settingValueControlInvalid(i)\">\n                            <label [for]=\"settingDescriptor.key\" >{{settingDescriptor.description}}</label>\n                            <!-- <div id=\"label\" class=\"form-text\">{{settingDescriptor.placeHolder}}</div>-->\n                        </div>\n                    </ng-container>\n                </ng-container>\n\n                <br>\n                <span>\n                    <button type=\"button\" class=\"btn btn-outline-primary\" [disabled]=\"connectionTester?.testRunning\" (click)=\"runTest()\">\n                        <fa-icon  [icon]=\"faBolt\"></fa-icon> Test Connection\n                    </button>\n                    &nbsp;\n                    <ng-container *ngIf=\"connectionTester?.testRunning\">\n                        <span><img src=\"/assets/loading.gif\" height=\"100px\" alt=\"image\" (click)=\"cancelTest()\"></span>\n                    </ng-container>\n                    <ng-container *ngIf=\"connectionTester?.testResult\">\n                        <fa-icon *ngIf=\"connectionTester.testResult.result\" size=\"2x\" [icon]=\"faCheckCircle\" style=\"vertical-align:bottom; color: mediumseagreen\"></fa-icon>\n                        <span>\n                            <fa-icon *ngIf=\"!connectionTester.testResult.result\" size=\"2x\" [icon]=\"faCheckCircle\" style=\"vertical-align:bottom; color: orangered\"></fa-icon>\n                            {{connectionTester.testResult.message}}\n                        </span>\n                    </ng-container>\n                </span>\n\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "SettingsPanelComponent",
            "id": "component-SettingsPanelComponent-b62e9fed647735cd6b64b4da92876c8c23d2366e2eca2a44ab78f6f444b16068f59263709dffec54e605b036f346f9ba0f0e2746d06540d99c409b1c8be532db",
            "file": "src/app/system-description-page/settings-panel/settings-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-panel",
            "styleUrls": [
                "./settings-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SystemComponentDto",
                    "decorators": []
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "SystemTypeDescriptorDto[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "settingsDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addSetting",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "availableEnvironments",
                    "args": [],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeSettingsDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "editSetting",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSettingsDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SettingsDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SettingsDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeSetting",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingRowsForSystemComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "SettingRow[]",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settingsDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {ModalService} from \"../../common/modal/modal-service\";\nimport {SettingRow, SystemDescriptionService, SystemDescriptionWrapper} from \"../system-description.service\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {SettingsDialogSpec} from \"./settings-dialog/settings-dialog.component\";\n\n@Component({\n  selector: 'app-settings-panel',\n  templateUrl: './settings-panel.component.html',\n  styleUrls: ['./settings-panel.component.scss']\n})\nexport class SettingsPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n  constructor(modalService: ModalService, private service: SystemDescriptionService) {\n    super(modalService);\n  }\n\n  @Input()\n  systemTypes: SystemTypeDescriptorDto[]\n\n  @Input()\n  systemDescription: SystemDescriptionDto\n\n  @Input()\n  systemComponent: SystemComponentDto\n\n  ngOnInit(): void {\n  }\n\n  // connection settings\n\n  settingsDialogSpec: SettingsDialogSpec\n\n  settingsDialogId(): string {\n    return 'settings-dialog'\n  }\n\n  private openSettingsDialog(spec: SettingsDialogSpec) {\n    this.settingsDialogSpec = spec\n    this.modalService.open(this.settingsDialogId())\n  }\n\n  private closeSettingsDialog() {\n    this.settingsDialogSpec = null\n    this.modalService.close(this.settingsDialogId())\n  }\n\n  public addSetting(systemDescription: SystemDescriptionDto) {\n    this.openSettingsDialog({\n      mode: 'ADD',\n      systemTypes: this.systemTypes,\n      environments: this.availableEnvironments(),\n      systemComponents: systemDescription.systemComponents,\n      data: {\n        environmentKey: null,\n        systemComponentKey: this.systemComponent.key,\n        settings: []\n      },\n      confirm: (data) => {\n        this.service.addSetting(data)\n        this.closeSettingsDialog()\n      },\n      cancel: () => this.closeSettingsDialog()\n    })\n  }\n\n  public editSetting(systemDescription: SystemDescriptionDto, setting: SettingRow) {\n    this.openSettingsDialog({\n      mode: 'EDIT',\n      systemTypes: this.systemTypes,\n      environments: systemDescription.environments,\n      systemComponents: systemDescription.systemComponents,\n      data: {\n        environmentKey: setting.environmentKey,\n        systemComponentKey: setting.systemComponentKey,\n        settings: setting.settings\n      },\n      confirm: data => {\n        this.service.updateSetting(data)\n        this.closeSettingsDialog()\n      },\n      cancel: () => this.closeSettingsDialog()\n    })\n  }\n\n  public removeSetting(systemDescription: SystemDescriptionDto, setting: SettingRow) {\n    this.openConfirmationDialog({\n      title: 'Confirm delete',\n      message: `Delete ${setting.systemComponentKey} ${setting.environmentKey}?`,\n      confirm: () => {\n        this.service.deleteSetting(setting)\n        this.closeConfirmationDialog()\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    let takenEnvKeys: string[] = this.settingRowsForSystemComponent().map(row => row.environmentKey)\n    return this.systemDescription.environments.filter(env =>\n        !takenEnvKeys.find((takenEnv) => takenEnv === env.key)\n    )\n  }\n\n  public settingRowsForSystemComponent(): SettingRow[] {\n    return new SystemDescriptionWrapper(this.systemDescription).settingRowsForSystemComponent(this.systemComponent)\n  }\n\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-settings'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./settings-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <h4>Connection settings</h4>\n    <table class=\"table table-sm table-striped table-bordered\">\n        <thead>\n        <tr>\n            <th scope=\"col\">Environment</th>\n            <th scope=\"col\">Datasource</th>\n            <th scope=\"col\">Settings</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let settingRow of settingRowsForSystemComponent()\">\n            <td>{{settingRow.environmentKey}}</td>\n            <td>{{settingRow.systemComponentKey}}</td>\n            <td>\n                <div *ngFor=\"let setting of settingRow.settings\">\n                    {{setting.key}} = {{setting.value}}\n                </div>\n            </td>\n            <td>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"editSetting(systemDescription, settingRow)\">Edit\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"removeSetting(systemDescription, settingRow)\">Remove\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n         (click)=\"addSetting(systemDescription)\">\n        Add\n    </div>\n</app-panel>\n\n<jw-modal [id]=\"settingsDialogId()\">\n    <app-settings-dialog [spec]=\"settingsDialogSpec\"></app-settings-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "SnapshotDialogComponent",
            "id": "component-SnapshotDialogComponent-756f5dfda07dc54512b97f6afd682ebd28eed3e4cf112f49c3d077edad0ecc37d8e7989d2775932006e0410a467a95c433d4533d70982686a70774701ba11780",
            "file": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snapshot-dialog",
            "styleUrls": [
                "./snapshot-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "SnapshotDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "datepipe",
                    "defaultValue": "new DatePipe('en-US')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePipe",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "options",
                    "defaultValue": "{\n        useCheckbox: true,\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeOptions",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree'"
                        }
                    ]
                },
                {
                    "name": "treeNodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogTreeNode[]",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ondeSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnvironmentChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNameChangedManually",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions, TreeNode} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nclass StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentControl": {
                    "name": "environmentControl",
                    "getSignature": {
                        "name": "environmentControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 83
                    }
                },
                "nameControl": {
                    "name": "nameControl",
                    "getSignature": {
                        "name": "nameControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 87
                    }
                }
            },
            "templateData": "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Create Snapshot</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\">\n                    <label for=\"environment\" class=\"form-label\">Environment</label>\n                    <select formControlName=\"environment\" class=\"form-select\" (change)=\"onEnvironmentChanged()\">\n                        <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n                            <option *ngFor=\"let environment of systemDescription.environments\"\n                                    [ngValue]=\"environment.key\">{{environment.label}}</option>\n                        </ng-container>\n                    </select>\n                    <div id=\"environment\" class=\"form-text\">Enter an environment.</div>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"structure\" class=\"form-label\" >Data Selection</label>\n                    <div style=\"border: 1px solid rgb(206, 212, 218); overflow: hidden\">\n                        <div style=\"padding: 0.375rem 2.25rem 0.375rem 0.75rem; max-height: 200px; overflow-y: auto;\">\n                            <tree-root id=\"structure\" [nodes]=\"treeNodes\" [options]=\"options\" class=\"reverse\" #tree\n                                       (select)=\"onSelect($event)\"\n                                       (deselect)=\"ondeSelect($event)\"\n                            ></tree-root>\n                        </div>\n                    </div>\n                </div>\n\n<!--                <button (click)=\"test()\">get selection</button>-->\n<!--                <div class=\"mb-3\">-->\n<!--                    <label for=\"name\" class=\"form-label\">Name</label>-->\n<!--                    <input formControlName=\"name\" type=\"text\" class=\"form-control\" (keyup)=\"onNameChangedManually()\">-->\n<!--                    <div id=\"name\" class=\"form-text\">Enter a name for the snapshot.</div>-->\n<!--                </div>-->\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>\n"
        },
        {
            "name": "SnapshotOverviewPanelComponent",
            "id": "component-SnapshotOverviewPanelComponent-79007711f8d95b6763fe25d31bc73d908e9d840fa3c497dd4ce03b155adcc406eb412e9fdd071880700a06408381960685577de3ff59e6ef8feb3f1db1de2ab0",
            "file": "src/app/dashboard-page/snapshot-overview-panel/snapshot-overview-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snapshot-overview-panel",
            "styleUrls": [
                "./snapshot-overview-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-overview-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modalService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "summaries$",
                    "defaultValue": "this.service.summaries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "uploadDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotUploadDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSnapshotDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "closeUploadDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "confirmCreate",
                    "args": [
                        {
                            "name": "data",
                            "type": "SnapshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SnapshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmUpload",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "envkKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "envkKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDummySnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSnapshotDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SnapshotDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SnapshotDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openUploadDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SnapshotUploadDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SnapshotUploadDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snapshotDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "snapshotUploadDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "summaryActions",
                    "args": [
                        {
                            "name": "summary",
                            "type": "SnapshotSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemDesc",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionsSpec",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "SnapshotSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemDesc",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {SnapshotId, SnapshotSummaryDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {ModalService} from \"../../common/modal/modal-service\";\nimport {DashboardService} from \"../dashboard.service\";\nimport {SnapshotDialogData, SnapshotDialogSpec} from \"../snapshot-dialog/snapshot-dialog.component\";\nimport {ActionsSpec} from \"../../common/grid/action-buttons/action-buttons.component\";\nimport {SnapshotUploadDialogSpec} from \"../snapshot-upload-dialog/snapshot-upload-dialog.component\";\nimport {SystemDescriptionService} from \"../../system-description-page/system-description.service\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {CommandControllerService} from \"@fabric/services\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-snapshot-overview-panel',\n  templateUrl: './snapshot-overview-panel.component.html',\n  styleUrls: ['./snapshot-overview-panel.component.scss']\n})\nexport class SnapshotOverviewPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n  constructor(\n      public modalService: ModalService,\n      private service: DashboardService,\n      private systemDescriptionService : SystemDescriptionService,\n      private commandControllerService: CommandControllerService,\n      private _router: Router\n  ) {\n    super(modalService)\n  }\n\n  ngOnInit(): void {\n  }\n\n  // summaries\n  summaries$ = this.service.summaries$\n  systemDescription$ = this.systemDescriptionService.systemDescription$\n\n  summaryActions(summary: SnapshotSummaryDto, systemDesc: SystemDescriptionDto): ActionsSpec {\n      return {\n        actions: [\n          {\n            label: 'Delete',\n            handler: () => this.openConfirmationDialog({\n              title : 'Confirm Delete',\n              message: `Delete Snapshot ${summary.name}?`,\n              confirm: () => { this.closeConfirmationDialog(); this.confirmDelete(summary.snapshotId) },\n              cancel: () => this.closeConfirmationDialog()\n            })\n          },\n          {\n            label: 'Upload',\n            handler: () => this.openUploadDialog({\n              environments: systemDesc.environments,\n              data: {\n                environment: null\n              },\n              cancel: () => this.closeUploadDialog(),\n              confirm: (data) => {\n                this.closeUploadDialog()\n                this.confirmUpload(summary.snapshotId, data.environment)\n              }\n            })\n          }\n        ]\n      }\n  }\n\n  private confirmDelete(snapshotId: SnapshotId) {\n    this.service.delete(snapshotId)\n  }\n\n  private confirmUpload(snapshotId: SnapshotId, envkKey: string) {\n    this.createDummySnapshot()\n  }\n\n  createSnapshot() {\n    this.openSnapshotDialog({\n      useNameGenerator: true,\n      data: {\n        environment: null,\n        name: null\n      },\n      cancel: () => this.closeSnapshotDialog(),\n      confirm: (data) => { this.confirmCreate(data) ; this.closeSnapshotDialog() }\n    })\n  }\n\n  private confirmCreate(data: SnapshotDialogData) {\n    this.service.createSnapshot(data.environment, data.name)\n  }\n\n  // snapshot dialog\n\n  spec: SnapshotDialogSpec\n\n  snapshotDialogId() {\n    return 'snapshot-dialog'\n  }\n\n  private openSnapshotDialog(spec: SnapshotDialogSpec) {\n    this.spec = spec\n    this.modalService.open(this.snapshotDialogId())\n  }\n\n  private closeSnapshotDialog() {\n    this.modalService.close(this.snapshotDialogId())\n  }\n\n  // upload dialog\n\n  uploadDialogSpec: SnapshotUploadDialogSpec\n\n  snapshotUploadDialogId() {\n    return 'snapshot-upload-dialog'\n  }\n\n  private openUploadDialog(spec: SnapshotUploadDialogSpec) {\n    this.uploadDialogSpec = spec\n    this.modalService.open(this.snapshotUploadDialogId())\n  }\n\n  private closeUploadDialog() {\n    this.modalService.close(this.snapshotUploadDialogId())\n  }\n\n  // deletion confirmation dialog\n\n  confirmationDialogId(): string {\n    return 'delete-snapshot-confirmation-dialog'\n  }\n\n\n    createDummySnapshot() {\n        this.commandControllerService.dummyUsingPost({}).subscribe((executionId)=> {\n            this._router.navigate([\"fe\", \"dummy\", executionId.id] )\n        })\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-overview-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "DashboardService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"systemDescription$ | async as systemDescription \">\n    <ng-container *ngIf=\"summaries$ | async as summaries\">\n        <table class=\"table table-sm table-striped table-bordered\">\n            <thead>\n            <tr>\n                <th scope=\"col\">Snapshot</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let summary of summaries\">\n                <td>\n                    <a routerLink=\"/fe/snapshot/{{summary.snapshotId.id}}\">{{summary.name}}</a>\n                </td>\n                <td>\n                    <app-action-buttons [spec]=\"summaryActions(summary, systemDescription)\"></app-action-buttons>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <a class=\"btn  btn-sm btn-outline-primary float-right\" (click)=\"createSnapshot()\">Take snapshot</a>\n        <!--<a class=\"btn  btn-sm btn-outline-primary float-right\" (click)=\"createDummySnapshot()\">Dummy async snapshot</a>-->\n    </ng-container>\n</ng-container>\n\n<jw-modal [id]=\"snapshotDialogId()\">\n    <app-snapshot-dialog [spec]=\"spec\"></app-snapshot-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"snapshotUploadDialogId()\">\n    <app-snapshot-upload-dialog [spec]=\"uploadDialogSpec\"></app-snapshot-upload-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "SnapshotPageComponent",
            "id": "component-SnapshotPageComponent-00857b38b09556eae64ca78007eea64160a3bf03f10fe9fe18c826e72fd8af1e9a8257712a914c50de93e912f9fef2231d2804344bc72fc1a6bfd0ad64793ba6",
            "file": "src/app/snapshot-page/snapshot-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SnapshotService"
                }
            ],
            "selector": "app-snapshot-page",
            "styleUrls": [
                "./snapshot-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "snapshot$",
                    "defaultValue": "this.service.snapshot$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotId",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SnapshotService} from \"./snapshot.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {SnapshotId} from \"@fabric/models\";\n\n@Component({\n  selector: 'app-snapshot-page',\n  templateUrl: './snapshot-page.component.html',\n  styleUrls: ['./snapshot-page.component.scss'],\n  providers: [SnapshotService]\n})\nexport class SnapshotPageComponent implements OnInit {\n\n  constructor(\n      private route: ActivatedRoute,\n      private service: SnapshotService) {\n  }\n\n  snapshotId: SnapshotId\n\n  snapshot$ = this.service.snapshot$\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      this.snapshotId = { id : params.get('snapshotId') }\n      this.service.loadSnapshot(this.snapshotId)\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SnapshotService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SnapshotService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #title>\n    <div class=\"container-fluid\" *ngIf=\"snapshot$ | async as snapshot\">\n        <div class=\"row\">\n            <h3>Snapshot: {{snapshot.name}}</h3>\n        </div>\n    </div>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <div *ngIf=\"snapshot$ | async as snapshot\">\n        <nav aria-label=\"breadcrumb\">\n            <ol class=\"breadcrumb\">\n                <app-back-button [routerLink]=\"'/'\"></app-back-button>\n                <li class=\"breadcrumb-item\"><a routerLink=\"/\">Home</a></li>\n                <li class=\"breadcrumb-item active\" aria-current=\"page\">{{snapshot.name}}</li>\n            </ol>\n        </nav>\n    </div>\n</ng-template>\n\n<ng-template #middle>\n    <div *ngIf=\"snapshot$ | async as snapshot\">\n        <app-panel>\n            <pre>{{snapshot | json}}</pre>\n        </app-panel>\n\n        <div *ngFor=\"let componentSnapshot of snapshot.componentSnapshots\">\n            <div *ngIf=\"componentSnapshot.systemType=='MONGO'\">\n                <app-mongo-snapshot [snapshotId]=\"snapshotId\"\n                                    [componentKey]=\"componentSnapshot.componentKey\"></app-mongo-snapshot>\n            </div>\n        </div>\n\n    </div>\n</ng-template>\n"
        },
        {
            "name": "SnapshotUploadDialogComponent",
            "id": "component-SnapshotUploadDialogComponent-b456b21e9fa4bf32fb8f183facb5dc8af32d200f2feb67070ec92f2c7bec6c8f82b6024d40e4eb3b2576e907f9e0b6f4fc9a5374f84508614604185bf92a137f",
            "file": "src/app/dashboard-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snapshot-upload-dialog",
            "styleUrls": [
                "./snapshot-upload-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-upload-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SnapshotUploadDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto} from \"@fabric/models\";\n\nexport interface SnapshotUploadDialogData {\n  environment: string,\n}\n\nexport interface SnapshotUploadDialogSpec {\n  environments: EnvironmentDto[]\n  data: SnapshotUploadDialogData\n  cancel: () => void\n  confirm: (data: SnapshotUploadDialogData) => void\n}\n\n@Component({\n  selector: 'app-snapshot-upload-dialog',\n  templateUrl: './snapshot-upload-dialog.component.html',\n  styleUrls: ['./snapshot-upload-dialog.component.scss']\n})\nexport class SnapshotUploadDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: SnapshotUploadDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })\n\n  private get environmentControl(): FormControl {\n    return <FormControl> this.formGroup.get('environment')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-upload-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentControl": {
                    "name": "environmentControl",
                    "getSignature": {
                        "name": "environmentControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 41
                    }
                }
            },
            "templateData": "<div *ngIf=\"spec\" class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Upload Snapshot To Environment</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\">\n                    <label for=\"environment\" class=\"form-label\">Environment</label>\n                    <select formControlName=\"environment\" class=\"form-select\" >\n                            <option *ngFor=\"let environment of spec.environments\"\n                                    [ngValue]=\"environment.key\">{{environment.label}}</option>\n                    </select>\n                    <div id=\"environment\" class=\"form-text\">Enter an environment.</div>\n                </div>\n\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Start upload</button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>\n"
        },
        {
            "name": "SnippetDialogComponent",
            "id": "component-SnippetDialogComponent-5f78fa2c028b17837cd476b0de6203ca85f4ef23c90a174dacfb719e1890ab3740c3c890e2d49838a94980459141fddbc5b1662ec50852089ed4834b6ea3b584",
            "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snippet-dialog",
            "styleUrls": [
                "./snippet-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snippet-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "SnippetDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fieldControl",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ConsoleDescriptorDto} from \"@fabric/models\";\n\nexport interface SnippetDialogData {\n  title?: string\n  attributes?: { [key: string]: string };\n  fields?: string[]\n}\n\nexport interface SnippetDialogSpec {\n  descriptor: ConsoleDescriptorDto\n  data: SnippetDialogData\n  cancel: () => void\n  confirm: (data: SnippetDialogData) => void\n}\n\n@Component({\n  selector: 'app-snippet-dialog',\n  templateUrl: './snippet-dialog.component.html',\n  styleUrls: ['./snippet-dialog.component.scss']\n})\nexport class SnippetDialogComponent implements OnChanges {\n\n  constructor() { }\n\n  @Input()\n  spec: SnippetDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec) {\n      //this.titleControl.setValue(this.spec.data.title)\n      this.fieldsControl.controls = []\n      this.spec.descriptor.items.forEach(item => {\n          let value = this.spec.data.attributes[item.name]\n          this.fieldsControl.push(new FormControl(value))\n      })\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })\n\n  get titleControl():FormControl {\n    return <FormControl> this.formGroup.get('fields')\n  }\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snippet-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "titleControl": {
                    "name": "titleControl",
                    "getSignature": {
                        "name": "titleControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 46
                    }
                },
                "fieldsControl": {
                    "name": "fieldsControl",
                    "getSignature": {
                        "name": "fieldsControl",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 50
                    }
                }
            },
            "templateData": "<div *ngIf=\"spec && formGroup\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Create Snippet</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"form-floating  mb-3\">\n                    <input id=\"title\" formControlName=\"title\" type=\"text\" class=\"form-control\">\n                    <label for=\"title\" class=\"form-label\" >Title</label>\n                </div>\n                <div>\n                    <ng-container formArrayName=\"fields\">\n                        <ng-container *ngFor=\"let item of spec.descriptor.items; let i=index\">\n                            <ng-container *ngIf=\"item.inputType==='TEXT'\">\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                            </ng-container>\n                            <ng-container *ngIf=\"item.inputType==='TEXTAREA'\">\n                                <textarea rows=\"12\" class=\"form-control\" [formControl]=\"fieldControl(i)\"></textarea>\n                            </ng-container>\n                            <ng-container *ngIf=\"item.inputType==='SELECT'\">\n                                <select class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                                    <option *ngFor=\"let selectValue of item.selectValues\"\n                                            [ngValue]=\"selectValue\">{{selectValue}}</option>\n                                </select>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "SnippetPanelComponent",
            "id": "component-SnippetPanelComponent-fc24b56aab53816a68ba4b96f8e0015360481e576874b650b8d716817d87b20215a9096ce1fb7dccd3511ed76d0636dfc0398ec60476412ec7119f8e80879845",
            "file": "src/app/console-page/console-panel/snippet-panel/snippet-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snippet-panel",
            "styleUrls": [
                "./snippet-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snippet-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "snippets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "SnippetDto[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<SnippetDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {SnippetDto} from \"@fabric/models\";\n\n@Component({\n  selector: 'app-snippet-panel',\n  templateUrl: './snippet-panel.component.html',\n  styleUrls: ['./snippet-panel.component.scss']\n})\nexport class SnippetPanelComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  snippets: SnippetDto[]\n\n  @Output()\n  selected = new EventEmitter<SnippetDto>()\n\n  ngOnInit(): void {\n  }\n\n  apply(snippet: SnippetDto) {\n    this.selected.emit(snippet)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snippet-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"snippets\">\n    <div class=\"list-group\">\n        <a class=\"list-group-item list-group-item-action list-group-item-light\" *ngFor=\"let snippet of snippets\"\n           (click)=\"apply(snippet)\" href=\"javascript:void(0);\">\n            {{snippet.title}}\n        </a>\n    </div>\n</ng-container>"
        },
        {
            "name": "SystemComponentDialogComponent",
            "id": "component-SystemComponentDialogComponent-2ff6eb83a40af3df6f7c0703d02de9380cdbd9b33753f35468d9e915cd96c3801db2b5533aaabe110bc1e1bb8cba5e58c310362458bea475c959eec9e167a7b4",
            "file": "src/app/system-description-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-system-component-dialog",
            "styleUrls": [
                "./system-component-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./system-component-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "SystemComponentDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemTypeControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\nimport {SystemDescriptionService} from '../../system-description.service';\nimport {SystemTypeDescriptorDto} from \"@fabric/models\";\n\nexport interface SystemComponentDialogData {\n    key: string,\n    label: string,\n    systemType: string,\n}\n\nexport interface SystemComponentDialogSpec {\n    systemTypes: SystemTypeDescriptorDto[]\n    keys: string[];\n    data: SystemComponentDialogData\n    cancel: () => void\n    confirm: (data: SystemComponentDialogData) => void\n}\n\n\n@Component({\n    selector: 'app-system-component-dialog',\n    templateUrl: './system-component-dialog.component.html',\n    styleUrls: ['./system-component-dialog.component.scss']\n})\nexport class SystemComponentDialogComponent implements OnInit, OnChanges {\n\n    constructor() {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SystemComponentDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n            this.formGroup.setValue(this.spec.data)\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })\n\n    public get keyControl(): FormControl {\n        return <FormControl> this.formGroup.get('key')\n    }\n\n    public keyControlInvalid() : boolean {\n        return showValidationMessages(this.keyControl)\n    }\n\n    public get labelControl(): FormControl {\n        return <FormControl> this.formGroup.get('label')\n    }\n\n    labelControlInvalid() {\n        return showValidationMessages(this.labelControl)\n    }\n\n    private get systemTypeControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemType')\n    }\n\n\n    systemTypeControlInvalid() {\n        return showValidationMessages(this.systemTypeControl)\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./system-component-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "keyControl": {
                    "name": "keyControl",
                    "getSignature": {
                        "name": "keyControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 52
                    }
                },
                "labelControl": {
                    "name": "labelControl",
                    "getSignature": {
                        "name": "labelControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 60
                    }
                },
                "systemTypeControl": {
                    "name": "systemTypeControl",
                    "getSignature": {
                        "name": "systemTypeControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 68
                    }
                }
            },
            "templateData": "<div *ngIf=\"spec && formGroup \"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\">Add Datasource</h5>\n            <button type=\"button\" class=\"btn-close\" (click)=\"cancel()\"></button>\n        </div>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\" class=\"form-group\">\n                    <label for=\"key\" class=\"form-label\">Key</label>\n                    <input formControlName=\"key\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"keyControlInvalid()\">\n                    <div id=\"key\" class=\"form-text\">Enter a key for the component.</div>\n                    <app-validation-messages [control]=\"keyControl\"></app-validation-messages>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"label\" class=\"form-label\">Label</label>\n                    <input formControlName=\"label\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"labelControlInvalid()\">\n                    <div id=\"label\" class=\"form-text\">Enter a description.</div>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"systemType\" class=\"form-label\">Datasource type</label>\n                    <select id=\"systemType\" formControlName=\"systemType\" class=\"form-select\" [class.is-invalid]=\"systemTypeControlInvalid()\" >\n                        <option *ngFor=\"let systemType of spec.systemTypes\"\n                                [ngValue]=\"systemType.systemType\">{{systemType.systemType}}</option>\n                    </select>\n\n                    <div class=\"form-text\">Select a datasource type.</div>\n                </div>\n\n            </form>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"!formGroup.valid\">Save changes\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">Cancel</button>\n        </div>\n\n    </div>\n</div>"
        },
        {
            "name": "SystemComponentPanelComponent",
            "id": "component-SystemComponentPanelComponent-91d98060dad24b767cc5d87046ba9023f939dce8e3256632f9c88389be081ed6de5a9f5878a17e08f047026a52066106216da5923bf7f9d73b0d1fdfb1fc5861",
            "file": "src/app/system-description-page/system-component-panel/system-component-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-system-component-panel",
            "styleUrls": [
                "./system-component-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./system-component-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SystemComponentDto",
                    "decorators": []
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "SystemTypeDescriptorDto[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChanged",
                    "defaultValue": "new EventEmitter<SystemComponentDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "systemComponentDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addComponent",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeSystemComponentDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "editComponent",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSystemComponentDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SystemComponentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SystemComponentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "systemComponentDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponentKeys",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exceptSystemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exceptSystemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, Output, EventEmitter} from '@angular/core';\nimport {SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {SystemComponentDialogData, SystemComponentDialogSpec} from \"./system-component-dialog/system-component-dialog.component\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {ModalService} from \"../../common/modal/modal-service\";\nimport {SystemDescriptionService} from \"../system-description.service\";\n\n@Component({\n  selector: 'app-system-component-panel',\n  templateUrl: './system-component-panel.component.html',\n  styleUrls: ['./system-component-panel.component.scss']\n})\nexport class SystemComponentPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n  constructor(modalService: ModalService, private service: SystemDescriptionService) {\n    super(modalService);\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  systemTypes: SystemTypeDescriptorDto[]\n\n  @Input()\n  systemDescription: SystemDescriptionDto\n\n  @Input()\n  selection: SystemComponentDto\n\n  @Output()\n  selectionChanged = new EventEmitter<SystemComponentDto>()\n\n  select(systemComponent: SystemComponentDto) {\n      this.selectionChanged.emit(systemComponent)\n  }\n\n  // data sources\n\n  systemComponentDialogSpec: SystemComponentDialogSpec\n\n  systemComponentDialogId(): string {\n    return 'system-component-dialog'\n  }\n\n  private openSystemComponentDialog(spec: SystemComponentDialogSpec) {\n    this.systemComponentDialogSpec = spec\n    this.modalService.open(this.systemComponentDialogId())\n  }\n\n  private closeSystemComponentDialog() {\n    this.systemComponentDialogSpec = null\n    this.modalService.close(this.systemComponentDialogId())\n  }\n\n  addComponent(systemDescription: SystemDescriptionDto) {\n    this.openSystemComponentDialog({\n      systemTypes: this.systemTypes,\n      keys: this.systemComponentKeys(systemDescription),\n      data: {\n        key: null,\n        label: null,\n        systemType: null\n      },\n      confirm: data => {\n        this.closeSystemComponentDialog()\n        this.service.addSystemComponent(<SystemComponentDto>data)\n      },\n      cancel: () => this.closeSystemComponentDialog()\n    })\n  }\n\n  editComponent(systemDescription: SystemDescriptionDto, systemComponent: SystemComponentDto) {\n    this.openSystemComponentDialog({\n      systemTypes: this.systemTypes,\n      keys: this.systemComponentKeys(systemDescription, systemComponent),\n      data: <SystemComponentDialogData> { ... systemComponent},\n      confirm: data => {\n        this.closeSystemComponentDialog()\n        this.service.updateSystemComponent(systemComponent, <SystemComponentDto>data)\n      },\n      cancel: () => this.closeSystemComponentDialog()\n    })\n  }\n\n\n  removeComponent(systemComponent: SystemComponentDto) {\n    this.openConfirmationDialog({\n      title: 'Confirm delete',\n      message: `Delete datasource ${systemComponent.key}?`,\n      warning: `This will also remove ${systemComponent.key}'s connection settings`,\n      confirm: () => {\n        this.closeConfirmationDialog()\n        this.service.deleteSystemComponent(systemComponent)\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n  private systemComponentKeys(systemDescription: SystemDescriptionDto, exceptSystemComponent?: SystemComponentDto): string[] {\n    return systemDescription.systemComponents\n        .filter(systemComponent => systemComponent.key != exceptSystemComponent?.key)\n        .map(systemComponent => systemComponent.key);\n  }\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-systemcomponent'\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./system-component-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <h4>Datasources</h4>\n    <table class=\"table table-sm table-striped table-bordered\">\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Key</th>\n            <th scope=\"col\">Label</th>\n            <th scope=\"col\">System type</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let systemComponent of systemDescription.systemComponents\" (click)=\"select(systemComponent)\">\n            <th scope=\"row\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" [checked]=\"systemComponent.key===selection?.key\">\n            </th>\n            <td>{{systemComponent.key}}</td>\n            <td>{{systemComponent.label}}</td>\n            <td>{{systemComponent.systemType}}</td>\n            <td>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"editComponent(systemDescription, systemComponent)\">Edit\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"removeComponent(systemComponent)\">Remove\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\" (click)=\"addComponent(systemDescription)\">\n        Add\n    </div>\n</app-panel>\n\n<jw-modal [id]=\"systemComponentDialogId()\">\n    <app-system-component-dialog [spec]=\"systemComponentDialogSpec\"></app-system-component-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "SystemDescriptionPageComponent",
            "id": "component-SystemDescriptionPageComponent-b3556cd8cdb3743c5469c6b51edab5698d6534cc6e79bcaf2302429d2358d150731a545243f76c5257c0f35d7e2097a6eb2d8a07c28a21b8c5c6b9716ba0957a",
            "file": "src/app/system-description-page/system-description-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-system-description-page",
            "styleUrls": [
                "./system-description-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./system-description-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedDataSourceTab",
                    "defaultValue": "'SETTINGS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSourceTabState",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedSystemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "selectedSystemDescriptionTab",
                    "defaultValue": "'SYSTEM'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemDescriptionTabState",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.service.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "systemTypeDescriptors$",
                    "defaultValue": "this.service.systemTypeDescriptors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDataSourceTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "DataSourceTabState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "DataSourceTabState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectSystemDescriptionTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "SystemDescriptionTabState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "SystemDescriptionTabState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "systemComponentSelectionChanged",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SystemDescriptionService} from \"./system-description.service\";\nimport {SystemComponentDto} from \"@fabric/models\";\n\ntype SystemDescriptionTabState = 'ENVIRONMENTS' | 'SYSTEM'\ntype DataSourceTabState = 'SETTINGS' | 'METADATA'\n\n@Component({\n    selector: 'app-system-description-page',\n    templateUrl: './system-description-page.component.html',\n    styleUrls: ['./system-description-page.component.scss']\n})\nexport class SystemDescriptionPageComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    systemDescription$ = this.service.systemDescription$\n\n    systemTypeDescriptors$ = this.service.systemTypeDescriptors$\n\n    selectedSystemDescriptionTab: SystemDescriptionTabState = 'SYSTEM'\n\n    selectedDataSourceTab: DataSourceTabState = 'SETTINGS'\n\n    ngOnInit(): void {\n    }\n\n    selectSystemDescriptionTab(tab: SystemDescriptionTabState) {\n        this.selectedSystemDescriptionTab = tab\n    }\n\n    selectDataSourceTab(tab: DataSourceTabState) {\n        this.selectedDataSourceTab = tab\n    }\n\n    selectedSystemComponent: SystemComponentDto\n\n    systemComponentSelectionChanged(systemComponent: SystemComponentDto) {\n        this.selectedSystemComponent = systemComponent\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./system-description-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #title>\n    <div class=\"row\">\n        <h3>Settings</h3>\n    </div>\n</ng-template>\n\n\n<ng-template #breadcrumb>\n    <nav aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n            <app-back-button [routerLink]=\"'/'\"></app-back-button>\n            <li class=\"breadcrumb-item\"><a routerLink=\"/\">Home</a></li>\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">Settings</li>\n        </ol>\n    </nav>\n</ng-template>\n\n\n<ng-template #middle>\n    <ng-container *ngIf=\"systemTypeDescriptors$ | async as systemTypeDescriptors\">\n        <div *ngIf=\"systemDescription$ | async as systemDescription\">\n            <div class=\"container-fluid\">\n                <div class=\"row\">\n                    <div class=\"col-md-2\">\n                        <ul class=\"nav nav-tabs flex-column\">\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" [class.active]=\"selectedSystemDescriptionTab==='SYSTEM'\"\n                                   aria-current=\"page\"\n                                   (click)=\"selectSystemDescriptionTab('SYSTEM')\"\n                                   href=\"javascript:void(0);\">Datasources</a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" [class.active]=\"selectedSystemDescriptionTab==='ENVIRONMENTS'\"\n                                   (click)=\"selectSystemDescriptionTab('ENVIRONMENTS')\" href=\"javascript:void(0);\">Environments</a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class=\"col-md-10\">\n                        <ng-container [ngSwitch]=\"selectedSystemDescriptionTab\">\n                            <ng-container *ngSwitchCase=\"'ENVIRONMENTS'\">\n                                <app-environment-panel [systemDescription]=\"systemDescription\"></app-environment-panel>\n                            </ng-container>\n                            <ng-container *ngSwitchCase=\"'SYSTEM'\">\n                                <app-system-component-panel\n                                        [systemDescription]=\"systemDescription\"\n                                        [systemTypes]=\"systemTypeDescriptors\"\n                                        (selectionChanged)=\"systemComponentSelectionChanged($event)\"\n                                        [selection]=\"selectedSystemComponent\">\n                                </app-system-component-panel>\n                                <br>\n                                <ng-container *ngIf=\"selectedSystemComponent\">\n                                    <h4>{{selectedSystemComponent.label}} details</h4>\n                                    <ul class=\"nav nav-tabs\">\n                                        <li class=\"nav-item\">\n                                            <a class=\"nav-link\"\n                                               [class.active]=\"selectedDataSourceTab==='SETTINGS'\"\n                                               (click)=\"selectDataSourceTab('SETTINGS')\"\n                                               href=\"javascript:void(0);\">\n                                                Connection settings\n                                            </a>\n                                        </li>\n                                        <li class=\"nav-item\">\n                                            <a class=\"nav-link\"\n                                               [class.active]=\"selectedDataSourceTab==='METADATA'\"\n                                               (click)=\"selectDataSourceTab('METADATA')\"\n                                               href=\"javascript:void(0);\">\n                                                Metadata\n                                            </a>\n                                        </li>\n                                    </ul>\n                                    <ng-container [ngSwitch]=\"selectedDataSourceTab\">\n                                        <ng-container *ngSwitchCase=\"'SETTINGS'\">\n                                            <app-settings-panel\n                                                    [systemDescription]=\"systemDescription\"\n                                                    [systemTypes]=\"systemTypeDescriptors\"\n                                                    [systemComponent]=\"selectedSystemComponent\">\n                                            </app-settings-panel>\n                                        </ng-container>\n                                        <ng-container *ngSwitchCase=\"'METADATA'\">\n                                            <app-meta-model-panel\n                                                    [systemDescription]=\"systemDescription\"\n                                                    [systemComponent]=\"selectedSystemComponent\">\n                                            </app-meta-model-panel>\n                                        </ng-container>\n                                    </ng-container>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </ng-container>\n\n</ng-template>\n\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-8235fb4ac983aac1cdfceaf5f011cda3697f8260b0fd66fb7b826c53da6a09737beafa28c9651213e6ced8d3959bbfa7c02da19514bd189fd98ba9bbd288ba15",
            "file": "src/app/common/layout/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.scss']\n})\nexport class TitleComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  text: string\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <h3>{{text}}</h3>\n</div>\n"
        },
        {
            "name": "ValidationMessagesComponent",
            "id": "component-ValidationMessagesComponent-e7514fb51f2974628725d80a2216ed9fd0ed57461e20adac497c7ceec51f785a59742da57ef16e3ce7a8e0a89a204c68f60cf9772b77e904eb65edc23a195b1a",
            "file": "src/app/common/validation-messages/validation-messages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-validation-messages",
            "styleUrls": [
                "./validation-messages.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./validation-messages.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validationMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from \"@angular/forms\";\n\n@Component({\n    selector: 'app-validation-messages',\n    templateUrl: './validation-messages.component.html',\n    styleUrls: ['./validation-messages.component.scss']\n})\nexport class ValidationMessagesComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    control: FormControl\n\n    show(): boolean {\n        return this.control.errors && (this.control.dirty || this.control.touched)\n    }\n\n    validationMessages(): string[] {\n        let errors = this.control.errors\n        if (errors) {\n            return Object.keys(errors).map(key => errors[key].value)\n        }\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./validation-messages.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span *ngIf=\"show()\" class=\"help-block\">\n    <span *ngFor=\"let message of validationMessages()\" style=\"display: block;\" class=\"invalid-feedback\" [innerHTML]=\"message\"></span>\n  </span>"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-6f33b7851fa67f91c3581eb12f26f01eb07267ef7981be5310e46ffc37d52bc62d964e6db97e3c95bce4d09f914a306bd0ae447a29f1c93dfefd3cf17af6a721",
            "description": "<p>Module that provides all services and configuration.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/api/api.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ApiModule>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { CommandControllerService } from './services/command-controller.service';\nimport { ConnectionControllerService } from './services/connection-controller.service';\nimport { ConsoleControllerService } from './services/console-controller.service';\nimport { MetaModelControllerService } from './services/meta-model-controller.service';\nimport { MongoSnapshotControllerService } from './services/mongo-snapshot-controller.service';\nimport { SnapshotControllerService } from './services/snapshot-controller.service';\nimport { SystemDescriptionControllerService } from './services/system-description-controller.service';\nimport { WorkspaceRestControllerService } from './services/workspace-rest-controller.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    CommandControllerService,\n    ConnectionControllerService,\n    ConsoleControllerService,\n    MetaModelControllerService,\n    MongoSnapshotControllerService,\n    SnapshotControllerService,\n    SystemDescriptionControllerService,\n    WorkspaceRestControllerService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiConfiguration"
                        },
                        {
                            "name": "CommandControllerService"
                        },
                        {
                            "name": "ConnectionControllerService"
                        },
                        {
                            "name": "ConsoleControllerService"
                        },
                        {
                            "name": "MetaModelControllerService"
                        },
                        {
                            "name": "MongoSnapshotControllerService"
                        },
                        {
                            "name": "SnapshotControllerService"
                        },
                        {
                            "name": "SystemDescriptionControllerService"
                        },
                        {
                            "name": "WorkspaceRestControllerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-06f439d683c6a47eca9c363940dc5cecd1216805518d51106598da3a2540976f852a17dfcb3783f9352b011c328b7739e5446146ddc9298107dcae55e1e3e6fb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n\nimport {CoreModule} from \"./core.module\";\nimport {FabricCommonModule} from \"./common/common.module\";\n\nimport {SystemDescriptionModule} from \"./system-description-page/system-description.module\";\nimport {ConsolePageModule} from './console-page/console-page.module';\nimport {DashboardModule} from \"./dashboard-page/dashboard.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    CoreModule,\n    AppRoutingModule,\n    FabricCommonModule,\n    SystemDescriptionModule,\n    ConsolePageModule,\n    DashboardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ConsolePageModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "DashboardModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        },
                        {
                            "name": "SystemDescriptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ff664866f5963c67f816fa37ffe65df38806ad95816e071a556177460112a8ea03ef9436953770d49f4403e9fe07f47850a3a3155108f63e9b98eb87e2529794",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {DashboardPageComponent} from \"./dashboard-page/dashboard-page.component\";\nimport {SnapshotPageComponent} from \"./snapshot-page/snapshot-page.component\";\nimport {SystemDescriptionPageComponent} from \"./system-description-page/system-description-page.component\";\nimport {ConsolePageComponent} from \"./console-page/console-page.component\";\nimport {DummyPageComponent} from \"./dashboard-page/dummy-page/dummy-page.component\";\n\n\nconst routes: Routes = [\n  {path: '', redirectTo: '/fe/dashboard', pathMatch: 'full'},\n  {path: 'fe/dashboard', component: DashboardPageComponent},\n  {path: 'fe/console', component: ConsolePageComponent},\n  {path: 'fe/systemdescription', component: SystemDescriptionPageComponent},\n  {path: 'fe/snapshot/:snapshotId', component: SnapshotPageComponent},\n  {path: 'fe/dummy/:executionId', component: DummyPageComponent},\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConsolePageModule",
            "id": "module-ConsolePageModule-50abc2d4662e8b1c08ed3a51b70a087c8841671972de214ef57a00153eb3a719aaf6526ddcae515d014cda83078e46d054bd42ced5b595bd1f8c435ff7bfa21c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/console-page/console-page.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\nimport {ConsolePageComponent} from \"./console-page.component\";\nimport {DataSourceSelectionPanelComponent} from './data-source-selection-panel/data-source-selection-panel.component';\nimport {ConsolePanelComponent} from './console-panel/console-panel.component';\nimport {SnippetPanelComponent} from './console-panel/snippet-panel/snippet-panel.component';\nimport {HistoryPanelComponent} from './console-panel/history-panel/history-panel.component';\nimport {SnippetDialogComponent} from './console-panel/snippet-dialog/snippet-dialog.component';\n\n@NgModule({\n    declarations: [\n        ConsolePageComponent,\n        DataSourceSelectionPanelComponent,\n        ConsolePanelComponent,\n        SnippetPanelComponent,\n        HistoryPanelComponent,\n        SnippetDialogComponent\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule\n    ],\n    exports: [\n        ConsolePageComponent\n    ]\n})\nexport class ConsolePageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConsolePageComponent"
                        },
                        {
                            "name": "ConsolePanelComponent"
                        },
                        {
                            "name": "DataSourceSelectionPanelComponent"
                        },
                        {
                            "name": "HistoryPanelComponent"
                        },
                        {
                            "name": "SnippetDialogComponent"
                        },
                        {
                            "name": "SnippetPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConsolePageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-d02b55e9ce6a7cd8e1ebd158d99072c1403ecb0191d8f74328aa71627fc4c4cd481e5bb3aeb9d2f38b458407c3d750024493978210fdf4b6e8d79c5cddd92ab0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ApiModule} from \"./api/api.module\";\nimport {environment} from \"../environments/environment\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {AppRoutingModule} from \"./app-routing.module\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {FontAwesomeModule} from \"@fortawesome/angular-fontawesome\";\nimport {TreeModule} from '@circlon/angular-tree-component';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ApiModule.forRoot({ rootUrl: environment.production ? '' : ('http://localhost:' + environment.port) }),\n    DragDropModule,\n    HttpClientModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    TreeModule\n  ],\n  exports: [\n    CommonModule,\n    DragDropModule,\n    HttpClientModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    TreeModule\n  ]\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-a8f723dac07b0ea7a4947ced3b54c3a11ee99b3f59c2cd7bb1fb23fa4f18c7c3b6d948001ae5bc29d67d2aa106eb6e0bca76597d015227d6a9f6d07c97a2e7f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/dashboard-page/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\nimport {DashboardPageComponent} from \"./dashboard-page.component\";\nimport {SnapshotPageComponent} from \"../snapshot-page/snapshot-page.component\";\nimport {SnapshotDialogComponent} from \"./snapshot-dialog/snapshot-dialog.component\";\nimport {MongoSnapshotComponent} from \"../snapshot-page/mongo-snapshot/mongo-snapshot.component\";\nimport { SnapshotOverviewPanelComponent } from './snapshot-overview-panel/snapshot-overview-panel.component';\nimport { SnapshotUploadDialogComponent } from './snapshot-upload-dialog/snapshot-upload-dialog.component';\nimport { DummyPageComponent } from './dummy-page/dummy-page.component';\n\n\n@NgModule({\n    declarations: [\n        DashboardPageComponent,\n        SnapshotPageComponent,\n        SnapshotDialogComponent,\n        MongoSnapshotComponent,\n        SnapshotOverviewPanelComponent,\n        SnapshotUploadDialogComponent,\n        DummyPageComponent,\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule\n    ],\n    exports: [\n        DashboardPageComponent,\n        SnapshotPageComponent,\n    ]\n})\nexport class DashboardModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardPageComponent"
                        },
                        {
                            "name": "DummyPageComponent"
                        },
                        {
                            "name": "MongoSnapshotComponent"
                        },
                        {
                            "name": "SnapshotDialogComponent"
                        },
                        {
                            "name": "SnapshotOverviewPanelComponent"
                        },
                        {
                            "name": "SnapshotPageComponent"
                        },
                        {
                            "name": "SnapshotUploadDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardPageComponent"
                        },
                        {
                            "name": "SnapshotPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FabricCommonModule",
            "id": "module-FabricCommonModule-5519db158c155b3fd722bb9d1a2c9766f45d6ea4d0ef2222ea45cde213d9ca0f006b37302058356ad6bc119b72190a9ff7a6d0bddf6d8b54dae4724b6ba11149",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/common/common.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\n\nimport {CoreModule} from \"../core.module\";\n\nimport {PopupMenuComponent} from './popup-menu/popup-menu.component';\nimport {ModalComponent} from './modal/modal.component'\nimport {Layout1ColComponent} from \"./layout/layout-1col/layout-1col.component\";\nimport {BackButtonComponent} from \"./back-button/back-button.component\";\nimport {PanelComponent} from \"./panel/panel.component\";\nimport {ConfirmationDialogComponent} from \"./confirmation-dialog/confirmation-dialog.component\";\nimport { ValidationMessagesComponent } from './validation-messages/validation-messages.component';\nimport { TitleComponent } from './layout/title/title.component';\nimport { BreadcrumbComponent } from './layout/breadcrumb/breadcrumb.component';\nimport { ActionButtonsComponent } from './grid/action-buttons/action-buttons.component';\n\n@NgModule({\n    declarations: [\n        ModalComponent,\n        PopupMenuComponent,\n        Layout1ColComponent,\n        BackButtonComponent,\n        PanelComponent,\n        ConfirmationDialogComponent,\n        ValidationMessagesComponent,\n        TitleComponent,\n        BreadcrumbComponent,\n        ActionButtonsComponent\n    ],\n    imports: [\n        CoreModule,\n    ],\n    exports: [\n        ModalComponent,\n        PopupMenuComponent,\n        Layout1ColComponent,\n        BackButtonComponent,\n        PanelComponent,\n        ConfirmationDialogComponent,\n        ValidationMessagesComponent,\n        TitleComponent,\n        BreadcrumbComponent,\n        ActionButtonsComponent\n    ]\n})\nexport class FabricCommonModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionButtonsComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "Layout1ColComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PanelComponent"
                        },
                        {
                            "name": "PopupMenuComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "ValidationMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionButtonsComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "Layout1ColComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PanelComponent"
                        },
                        {
                            "name": "PopupMenuComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "ValidationMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SystemDescriptionModule",
            "id": "module-SystemDescriptionModule-591a504bb42fa28ced86e6a37220ad82005da6d77a55b9537fca62d31320fbe5e9435bba6f23fde1bf91f302b3a15048aad482631a6e9ecaeeeb70829821c9ea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/system-description-page/system-description.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\n\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\n\nimport { MongoNavmodelPanelComponent } from './mongo-navmodel-panel/mongo-navmodel-panel.component';\nimport { EnvironmentDialogComponent } from './environment-panel/environment-dialog/environment-dialog.component';\nimport { SystemComponentDialogComponent } from './system-component-panel/system-component-dialog/system-component-dialog.component';\nimport { SettingsDialogComponent } from './settings-panel/settings-dialog/settings-dialog.component';\nimport { SystemDescriptionPageComponent } from './system-description-page.component';\nimport { EnvironmentPanelComponent } from './environment-panel/environment-panel.component';\nimport { SystemComponentPanelComponent } from './system-component-panel/system-component-panel.component';\nimport { SettingsPanelComponent } from './settings-panel/settings-panel.component';\nimport { MetaModelPanelComponent } from './meta-model-panel/meta-model-panel.component';\nimport { MetaModelDialogComponent } from './meta-model-panel/meta-model-dialog/meta-model-dialog.component';\nimport { MongoMetamodelPanelComponent } from './meta-model-panel/mongo-metamodel-panel/mongo-metamodel-panel.component';\n\n@NgModule({\n    declarations: [\n        SystemDescriptionPageComponent,\n        SystemComponentPanelComponent,\n        SystemComponentDialogComponent,\n        EnvironmentPanelComponent,\n        EnvironmentDialogComponent,\n        SettingsPanelComponent,\n        SettingsDialogComponent,\n        MongoNavmodelPanelComponent,\n        MetaModelPanelComponent,\n        MetaModelDialogComponent,\n        MongoMetamodelPanelComponent,\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule\n    ],\n    exports: [\n        SystemDescriptionPageComponent,\n    ]\n})\nexport class SystemDescriptionModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EnvironmentDialogComponent"
                        },
                        {
                            "name": "EnvironmentPanelComponent"
                        },
                        {
                            "name": "MetaModelDialogComponent"
                        },
                        {
                            "name": "MetaModelPanelComponent"
                        },
                        {
                            "name": "MongoMetamodelPanelComponent"
                        },
                        {
                            "name": "MongoNavmodelPanelComponent"
                        },
                        {
                            "name": "SettingsDialogComponent"
                        },
                        {
                            "name": "SettingsPanelComponent"
                        },
                        {
                            "name": "SystemComponentDialogComponent"
                        },
                        {
                            "name": "SystemComponentPanelComponent"
                        },
                        {
                            "name": "SystemDescriptionPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SystemDescriptionPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Case1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SnippetDialogComponentStory.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  port: 8080\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  port: 4200\n}"
            },
            {
                "name": "ParameterCodecInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/request-builder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ParameterCodec()"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "showValidationMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "function(control: AbstractControl): boolean {\n    return (control.touched || control.dirty) && !control.valid\n}"
            },
            {
                "name": "SnippetDialogComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SnippetDialogComponent>",
                "defaultValue": "(args: SnippetDialogComponent) => ({\n  component: SnippetDialogComponent,\n  props: args,\n})"
            },
            {
                "name": "unique",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "function (fieldName: string, values: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n        let controlValue: string = control.value;\n        const invalid = controlValue && !!values.find(val => val === controlValue)\n        return invalid ? {unique: { value: `The ${fieldName} '${controlValue}' is already in use.`}} : null;\n    }\n}"
            }
        ],
        "functions": [
            {
                "name": "log",
                "file": "src/app/common/logging.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "param1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "param2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "param1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "param2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logChangesToObservable",
                "file": "src/app/common/logging.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "observable",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "observable",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DataSourceTabState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"SETTINGS\" | \"METADATA\"",
                "file": "src/app/system-description-page/system-description-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "StrictHttpResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/api/strict-http-response.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                "kind": 187
            },
            {
                "name": "SystemDescriptionTabState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"ENVIRONMENTS\" | \"SYSTEM\"",
                "file": "src/app/system-description-page/system-description-page.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts": [
                {
                    "name": "Case1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SnippetDialogComponentStory.bind({})"
                },
                {
                    "name": "SnippetDialogComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SnippetDialogComponent>",
                    "defaultValue": "(args: SnippetDialogComponent) => ({\n  component: SnippetDialogComponent,\n  props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts": [
                {
                    "name": "DEFAULT_PAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  port: 8080\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  port: 4200\n}"
                }
            ],
            "src/app/api/request-builder.ts": [
                {
                    "name": "ParameterCodecInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/request-builder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ParameterCodec()"
                }
            ],
            "src/app/common/validators.ts": [
                {
                    "name": "showValidationMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "function(control: AbstractControl): boolean {\n    return (control.touched || control.dirty) && !control.valid\n}"
                },
                {
                    "name": "unique",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "function (fieldName: string, values: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n        let controlValue: string = control.value;\n        const invalid = controlValue && !!values.find(val => val === controlValue)\n        return invalid ? {unique: { value: `The ${fieldName} '${controlValue}' is already in use.`}} : null;\n    }\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/common/logging.ts": [
                {
                    "name": "log",
                    "file": "src/app/common/logging.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "param1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "param2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logChangesToObservable",
                    "file": "src/app/common/logging.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observable",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observable",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/system-description-page/system-description-page.component.ts": [
                {
                    "name": "DataSourceTabState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"SETTINGS\" | \"METADATA\"",
                    "file": "src/app/system-description-page/system-description-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "SystemDescriptionTabState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"ENVIRONMENTS\" | \"SYSTEM\"",
                    "file": "src/app/system-description-page/system-description-page.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/api/strict-http-response.ts": [
                {
                    "name": "StrictHttpResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/api/strict-http-response.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                    "kind": 187
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/fe/dashboard",
                        "pathMatch": "full"
                    },
                    {
                        "path": "fe/dashboard",
                        "component": "DashboardPageComponent"
                    },
                    {
                        "path": "fe/console",
                        "component": "ConsolePageComponent"
                    },
                    {
                        "path": "fe/systemdescription",
                        "component": "SystemDescriptionPageComponent"
                    },
                    {
                        "path": "fe/snapshot/:snapshotId",
                        "component": "SnapshotPageComponent"
                    },
                    {
                        "path": "fe/dummy/:executionId",
                        "component": "DummyPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 6,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiConfigurationParams",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/base-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/models/collection-nav-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionNavItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/collection-snapshot.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionSnapshot",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/connection-test-request-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConnectionTestRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/connection-test-response-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConnectionTestResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/console-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/console-descriptor-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleDescriptorItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/console-request-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/console-response-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleResponseItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/environment-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/execution-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExecutionDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/execution-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExecutionId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/file-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileStore",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/file-system.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileSystem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/iterable-file-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IterableFileStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/iterable-path.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IterablePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/meta-model-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/mongo-meta-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoMetaModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/mongo-navigation-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoNavigationModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/mongo-snapshot.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoSnapshot",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/path.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Path",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/setting-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-component-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-summary-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotSummaryDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snippet-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnippetDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/structure-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StructureDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-component-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-description-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemDescriptionDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-type-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemTypeDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/user-principal-lookup-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserPrincipalLookupService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/workspace-settings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceSettings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Parameter",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParameterCodec",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueryParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RequestBuilder",
                "coveragePercent": 37,
                "coverageCount": "6/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ParameterOptions",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ParameterCodecInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/command-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommandControllerService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/connection-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConnectionControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/api/services/console-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConsoleControllerService",
                "coveragePercent": 86,
                "coverageCount": "13/15",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/meta-model-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetaModelControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/api/services/mongo-snapshot-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoSnapshotControllerService",
                "coveragePercent": 83,
                "coverageCount": "10/12",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/snapshot-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnapshotControllerService",
                "coveragePercent": 86,
                "coverageCount": "13/15",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/system-description-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemDescriptionControllerService",
                "coveragePercent": 88,
                "coverageCount": "16/18",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/workspace-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceRestControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/has-confirmation-dialog.mixin.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HasConfirmationDialogMixin",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/grid/action-buttons/action-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/grid/action-buttons/action-buttons.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionSpec",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/grid/action-buttons/action-buttons.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionsSpec",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/layout/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/layout/breadcrumb/breadcrumb.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BreadcrumbItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/layout/layout-1col/layout-1col.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Layout1ColComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/layout/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/logging.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/logging.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logChangesToObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/modal/modal-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/popup-menu/popup-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/common/popup-menu/popup-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopupMenuItemSpec",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/validation-messages/validation-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ValidationMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showValidationMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unique",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConsolePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/console-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConsolePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistoryPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HistoryItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnippetDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnippetDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnippetDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SnippetDialogComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-panel/snippet-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnippetPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConsoleService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/data-source-selection-panel/data-source-selection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataSourceSelectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/data-source-selection-panel/data-source-selection-panel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceSelection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/dashboard-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/dashboard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DashboardService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/dashboard.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/dummy-page/dummy-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DummyPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StructureDto2TreeNodeConverter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDialogTreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-overview-panel/snapshot-overview-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotOverviewPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotUploadDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotUploadDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotUploadDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoNavigationModelService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoNavigationModelStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MongoSnapshotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagedCollection",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionSelector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentSelector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootSelector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Selector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/mongo-snapshot/mongo.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoSnapshotStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/snapshot-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/snapshot.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnapshotService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot-page/snapshot.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/environment-panel/environment-dialog/environment-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/environment-panel/environment-dialog/environment-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/environment-panel/environment-dialog/environment-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/environment-panel/environment-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetaModelDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/meta-model-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetaModelPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MongoMetamodelPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoMetaModelService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoMetaModelStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/mongo-navmodel-panel/mongo-navmodel-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MongoNavmodelPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConnectionTester",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SettingsDialogSpecWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/settings-panel/settings-dialog/settings-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/settings-panel/settings-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SystemComponentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemComponentDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemComponentDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-component-panel/system-component-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SystemComponentPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-description-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SystemDescriptionPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-description.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SystemDescriptionWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-description.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemDescriptionService",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-description.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Setting",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-description.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingRow",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/system-description-page/system-description.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemDescriptionState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}