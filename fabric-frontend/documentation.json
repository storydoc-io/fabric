{
    "pipes": [],
    "interfaces": [
        {
            "name": "ActionSpec",
            "id": "interface-ActionSpec-4dd2843b489d93d65137c1138b58ee4386313224fd0cb16a338c59112cd3737af3fdfb4f5027d3759b377c2fad4d56dede48394ec982ba2d4f9c716bb8d3201c",
            "file": "src/app/common/styleguide/action-buttons/action-buttons.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface ActionSpec {\n  handler: () => void\n  label: string\n  id? : string\n}\n\nexport interface ActionsSpec {\n  actions: ActionSpec[]\n}\n\n@Component({\n  selector: 'app-action-buttons',\n  templateUrl: './action-buttons.component.html',\n  styleUrls: ['./action-buttons.component.scss']\n})\nexport class ActionButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  actions: ActionSpec[]\n\n  @Input()\n  spec: ActionsSpec\n\n  ngOnInit(): void {\n    // cfr https://stackoverflow.com/questions/71011494/angular-8-click-event-not-firing-inside-ngfor-when-iterating-over-object-array\n    this.actions = this.spec.actions\n  }\n\n  callActionHandler(action: ActionSpec) {\n    action.handler()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "handler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ActionSpec",
            "id": "interface-ActionSpec-848ef5609186c9db88faecf53957118a84395a687dc4ac6e57a7f4cfa55d4877a0fe64fea7c7afcaebc8c5d3dd421df91facda5a11c5af6920c977480e364ddf-1",
            "file": "src/app/common/styleguide/side-bar/side-bar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {SideBarService} from \"./side-bar.service\";\nimport {RoutingService} from \"../../routing.service\";\n\ninterface ActionSpec {\n    label: string\n    id?: PageId\n    route?: string[]\n    level: number\n}\n\ntype PageId = 'settings' | 'environments'| 'datasources' | 'snapshots' | 'console' | 'navigation'\n\n@Component({\n    selector: 'app-side-bar',\n    templateUrl: './side-bar.component.html',\n    styleUrls: ['./side-bar.component.scss']\n})\nexport class SideBarComponent {\n\n    constructor(private router: Router, private sideBarService: SideBarService, private routingService: RoutingService) {\n    }\n\n    @Input()\n    active: PageId;\n\n    actions: ActionSpec[] = [\n        {\n            id: 'settings',\n            label: 'Settings',\n            level: 0\n        },\n        {\n            id: 'environments',\n            label: 'Environments',\n            route: this.routingService.environmentsPageRoute(),\n            level: 1\n        },\n        {\n            id: 'datasources',\n            label: 'Datasources',\n            route: this.routingService.dataSourcesPageRoute(),\n            level: 1\n        },\n        {\n            id: 'console',\n            label: 'Console',\n            route: this.routingService.consolePageRoute(),\n            level: 0\n        },\n        {\n            id: 'snapshots',\n            label: 'Snapshots',\n            level: 0,\n            route: this.routingService.snapshotsPageroute(),\n\n        },\n\n    ]\n\n    navigateTo(route: string[]) {\n        this.sideBarService.collapse()\n        this.router.navigate(route)\n    }\n\n    toggleCollapse() {\n        this.sideBarService.toggleState()\n    }\n\n    collapsed(): boolean {\n        return this.sideBarService.collapsed;\n    }\n\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PageId",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ActionSpec-1"
        },
        {
            "name": "ActionsSpec",
            "id": "interface-ActionsSpec-4dd2843b489d93d65137c1138b58ee4386313224fd0cb16a338c59112cd3737af3fdfb4f5027d3759b377c2fad4d56dede48394ec982ba2d4f9c716bb8d3201c",
            "file": "src/app/common/styleguide/action-buttons/action-buttons.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface ActionSpec {\n  handler: () => void\n  label: string\n  id? : string\n}\n\nexport interface ActionsSpec {\n  actions: ActionSpec[]\n}\n\n@Component({\n  selector: 'app-action-buttons',\n  templateUrl: './action-buttons.component.html',\n  styleUrls: ['./action-buttons.component.scss']\n})\nexport class ActionButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  actions: ActionSpec[]\n\n  @Input()\n  spec: ActionsSpec\n\n  ngOnInit(): void {\n    // cfr https://stackoverflow.com/questions/71011494/angular-8-click-event-not-firing-inside-ngfor-when-iterating-over-object-array\n    this.actions = this.spec.actions\n  }\n\n  callActionHandler(action: ActionSpec) {\n    action.handler()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ApiConfigurationParams",
            "id": "interface-ApiConfigurationParams-db041dc06e29ffff133e6d5e32db744ae15b56d237310730b07121a087b880ef86bfa2e2e7295842e4664c922ffe09403d7b1d5a30d7ab08039b93a07ba2355e",
            "file": "src/app/api/api-configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:8080';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "properties": [
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Parameters for <code>ApiModule.forRoot()</code></p>\n",
            "rawdescription": "\n\nParameters for `ApiModule.forRoot()`\n",
            "methods": []
        },
        {
            "name": "AttributeDto",
            "id": "interface-AttributeDto-10f674b4ee5a9a41cbd3157265bfdafddb628fa7b4a8cae562b6323cbb7899b22cff2b3bc1ef46a5471637cf59f9ac525733aab8519442f6401e33ef32a75e4c",
            "file": "src/app/api/models/attribute-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityDto } from './entity-dto';\nexport interface AttributeDto {\n  entries?: Array<EntityDto>;\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "entries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<EntityDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AttributeItem",
            "id": "interface-AttributeItem-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "entries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityItem[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "BreadcrumbItem",
            "id": "interface-BreadcrumbItem-3c8cac2e633e9921b446f718fc5509b325b9b153344a7235a88b1168895c6aa1a5c96803a32ef508048b35512180c52be5793ae431918af253cfdc29dfbe7c6b",
            "file": "src/app/common/styleguide/breadcrumb/breadcrumb.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface BreadcrumbItem {\n  label?: string\n  route?: string | string[]\n}\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  breadcrumbs: BreadcrumbItem[]\n\n  ngOnInit(): void {\n  }\n\n  get active(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-1\n    return this.breadcrumbs[idx]\n  }\n\n  get parentOfActive(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-2\n    return this.breadcrumbs[idx]\n  }\n\n  get allParents(): BreadcrumbItem[] {\n    let idxActive = this.breadcrumbs.length-1\n    return this.breadcrumbs.slice(0, idxActive)\n  }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Collection",
            "id": "interface-Collection-50dcff88ce63e262cca8f70babb565d214d34c193a285898e7394aea9236a3425fe2a4e1c951a1d09f0529bcd72fa2cd7ac13ac9007724c03487ebe82338bbfc",
            "file": "src/app/api/models/collection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Collection {\n  name?: string;\n  schema?: {  };\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "schema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CollectionNavItem",
            "id": "interface-CollectionNavItem-6d7f3ca6fa382f9b556d9c5a381d156eb1b40868ad9296659dce55e497bf2a3c42d7b0f34bfc5b92cbc109344e8faaec57fbca18e17a4a4aaf8c3f6de2576ba5",
            "file": "src/app/api/models/collection-nav-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CollectionNavItem {\n  collectionName?: string;\n}\n",
            "properties": [
                {
                    "name": "collectionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CollectionSelector",
            "id": "interface-CollectionSelector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Selector"
        },
        {
            "name": "CollectionSnapshot",
            "id": "interface-CollectionSnapshot-b1f927a4bde09839ea302a10554dba3b8908c2f9c6dfb5d9c998c3071f1662fe5d88f74eb239a62b824ac3aec75d9cd88e7a449cc9be7b20188da7df3af8d959",
            "file": "src/app/api/models/collection-snapshot.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CollectionSnapshot {\n  collectionName?: string;\n  documents?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "collectionName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "documents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Column",
            "id": "interface-Column-fa3ac25861f5c47267ced53652d64827a69157065fbc700f0f204eb615d919c8be91690f5ec0cf1ef44d414503f1091ac08086271e480ad7e172fcb49be65010",
            "file": "src/app/api/models/column.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Column {\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ColumnPart",
            "id": "interface-ColumnPart-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListPart[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConfirmationDialogSpec",
            "id": "interface-ConfirmationDialogSpec-1009ff9abfa95b495160a829a45d39299156678089bca892c691485174519748ddceaea8b57c760e1c4825ec3f9d1276fb448deb53fdfbbd00cdc105ce31c98b",
            "file": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nexport interface ConfirmationDialogSpec {\n  title: string\n  message: string\n  warning? : string\n  cancel: () => void\n  confirm: () => void\n}\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  @Input()\n  spec: ConfirmationDialogSpec\n\n  faExclamationTriangle=faExclamationTriangle\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm()\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "warning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConnectionStatus",
            "id": "interface-ConnectionStatus-937f4a4926b9551c7e74a541f13594715280ec6b91e408835d4ac9c18f864f9fd4d2d7bfaaf40ddb4ba32130d629f3a3d14290a8440db9d2688b3417deeca0b8",
            "file": "src/app/common/styleguide/status/status.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {faArrowUp, faExclamationTriangle} from '@fortawesome/free-solid-svg-icons';\n\nexport interface ConnectionStatus {\n  status: 'Calling' | 'OK' | 'Problem'\n  msg: string\n}\n\n@Component({\n  selector: 'app-status',\n  templateUrl: './status.component.html',\n  styleUrls: ['./status.component.scss']\n})\nexport class StatusComponent {\n\n  faExclamationTriangle = faExclamationTriangle\n  faArrowUp = faArrowUp\n\n  @Input()\n  status: ConnectionStatus\n\n  @Output()\n  onClicked = new EventEmitter()\n\n  showStatus() {\n      this.onClicked.emit()\n  }\n}\n",
            "properties": [
                {
                    "name": "msg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"Calling\" | \"OK\" | \"Problem\"",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConnectionTestRequestDto",
            "id": "interface-ConnectionTestRequestDto-81f18f029e355f5976e057ebc42ff6e7900cfdba19e415bd49fc65ec45fd5231729a7c3c68eb82d84424a5ce10e289849a50adc9f5370fff0bd41ce91980a57e",
            "file": "src/app/api/models/connection-test-request-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConnectionTestRequestDto {\n  settings?: { [key: string]: string };\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConnectionTestResponseDto",
            "id": "interface-ConnectionTestResponseDto-9881baaa41dacd5c50db29cc10534140e86ef82e58a3b77746f4144b0855bf506d21798a5c3d7a2d88af0a4cd181bd10b4c76d47a5c4c88a5b87abb71572b724",
            "file": "src/app/api/models/connection-test-response-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConnectionTestResponseDto {\n  message?: string;\n  result?: boolean;\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleDescriptorDto",
            "id": "interface-ConsoleDescriptorDto-2d2feb4fe5aa1f8446693ed7f1e1d2b8a859afaef28129de2607efe07cba316c5d3ac6ebe6d99ed6d9b70eeb0e42fbe256ef4f1d9a52ad8751c42c0ee92b097b",
            "file": "src/app/api/models/console-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ConsoleDescriptorItemDto } from './console-descriptor-item-dto';\nexport interface ConsoleDescriptorDto {\n  items?: Array<ConsoleDescriptorItemDto>;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ConsoleDescriptorItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleDescriptorItemDto",
            "id": "interface-ConsoleDescriptorItemDto-fa5d2bb89a36b5af786641a682af2537b50d95642132f759d766eabf47eb22d20a40ea711c4d6aedaa69b74a616faa5b0c7f1f2b545ba74211a8877092397acd",
            "file": "src/app/api/models/console-descriptor-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConsoleDescriptorItemDto {\n  inputType?: 'SELECT' | 'TEXT' | 'TEXTAREA';\n  name?: string;\n  placeholder?: string;\n  selectValues?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"SELECT\" | \"TEXT\" | \"TEXTAREA\"",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectValues",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConsoleState",
            "id": "interface-ConsoleState-f013a931eee25b4e1ca8769ee6d3958e59718c6f20956ae479af7449a367dab6ffa0a3eeabb05798ec961163e0fc32fcf00df639f7b4279f0a15a26543f982af",
            "file": "src/app/console-page/console.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConsoleControllerService} from \"@fabric/services\";\nimport {ConsoleDescriptorDto, NavItem, QueryCompositeDto, SnippetDto, TabularResultSet} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\nexport interface Output {\n    jsonOutput: string\n    stackTraceOutput: string\n    tabularResponse: TabularResultSet\n}\n\ninterface ConsoleState {\n    rootQueryComposite: QueryCompositeDto\n    selection: QueryCompositeDto\n    output: Output\n\n}\n\n\n\n@Injectable()\nexport class ConsoleService {\n\n    constructor(private consoleControllerService: ConsoleControllerService) {\n        this.init()\n    }\n\n    subscriptions = []\n\n    init() {\n        this.subscriptions.push(logChangesToObservable('store::output$ >>', this.output$))\n    }\n\n    private store = new BehaviorSubject<ConsoleState>(this.initialConsoleState())\n\n    root$ = this.store.pipe(\n        map(state => state.rootQueryComposite),\n        distinctUntilChanged(),\n    )\n\n    selection$ = this.store.pipe(\n        map(state => state.selection),\n        distinctUntilChanged(),\n    )\n\n    output$ = this.store.pipe(\n        map(state => state.output),\n        distinctUntilChanged(),\n    )\n\n    private initialConsoleState(): ConsoleState  {\n         let rootQueryComposite = this.createQueryComposite()\n         return {\n             rootQueryComposite,\n             selection: rootQueryComposite,\n             output: {\n                 jsonOutput: null,\n                 stackTraceOutput: null,\n                 tabularResponse: null\n             }\n         }\n    }\n\n    private idCounter: 0\n\n    private createQueryComposite(): QueryCompositeDto {\n        return {\n            id: \"\" + this.idCounter++,\n            children: []\n        }\n    }\n\n    addQuery() {\n    }\n\n    clearOutput() {\n        this.store.next({\n            ... this.store.value,\n            output: {\n                jsonOutput: null,\n                stackTraceOutput: null,\n                tabularResponse: null\n            }\n        })\n    }\n\n\n    loadDescriptor(systemType: string) : Promise<ConsoleDescriptorDto>{\n        return this.consoleControllerService.getDescriptorUsingGet({systemType})\n            .toPromise()\n    }\n\n    runRequest(queryComposite: QueryCompositeDto) {\n        this.clearOutput();\n        return this.consoleControllerService.runRequestUsingPost({\n            body: queryComposite\n        }).subscribe((dto)=> {\n\n            this.store.value.selection.result = dto.result\n\n            let result = dto.result\n            let output\n            switch (result.resultType) {\n                case 'JSON': {\n                    output = {\n                        jsonOutput : JSON.parse(result.content)\n                    }\n                    break\n                }\n                case 'STACKTRACE': {\n                    output = {\n                        stackTraceOutput : result.content\n                    }\n                    break\n                }\n                case 'TABULAR' : {\n                    output = {\n                        tabularResponse : result.tabular\n                    }\n                }\n            }\n            this.store.next({\n                ... this.store.value,\n                output\n            })\n\n            if (result.resultType != 'STACKTRACE') {\n                // this.addHistoryItem(attributes)\n            }\n\n\n        })\n    }\n\n    loadSnippets(systemType:string): Promise<SnippetDto[]> {\n        return this.consoleControllerService.getSnippetsUsingGet({systemType}).toPromise()\n    }\n\n    addSnippet(title: string, systemType: string, attributes: {}): Promise<SnippetDto[]> {\n        return this.consoleControllerService.createSnippetUsingPost({\n            systemType,\n            body: {\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n\n    }\n\n    editSnippet(id: string, title: string, systemType: string, attributes: {}) {\n        return this.consoleControllerService.updateSnippetUsingPut({\n            systemType,\n            body: {\n                id,\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n    }\n\n    deleteSnippet(id: string, systemType: string) {\n        return this.consoleControllerService.deleteSnippetUsingDelete({\n            systemType,\n            id\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n    }\n\n    loadNavItems(systemComponentKey: string): Promise<NavItem[]>  {\n        return this.consoleControllerService.getNavigationUsingPost({body: {\n            systemComponentKey,\n        }}).toPromise()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "output",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Output",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rootQueryComposite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryCompositeDto",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryCompositeDto",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DashboardStoreState",
            "id": "interface-DashboardStoreState-085c8860e836b9cea11622b0c6c537b83a11549d8a04a3ffe92b19c8ced3e0013f8e4c253739037a88db1a0c67ed20a07a5b837b44904ad3b1ff8bcd35bdee93",
            "file": "src/app/snapshot/snapshots-page/snapshots.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {ExecutionId, SnapshotId, SnapshotSummaryDto} from \"@fabric/models\";\n\ninterface DashboardStoreState {\n    summaries: SnapshotSummaryDto[]\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SnapshotsService implements OnDestroy {\n\n    constructor(private snapshotControllerService: SnapshotControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<DashboardStoreState>({ summaries: []})\n\n    summaries$ = this.store.pipe(\n        map(state => state.summaries),\n        distinctUntilChanged(),\n    )\n\n    private subscriptions: Subscription[] = []\n\n    init() {\n        this.loadSummaries();\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    private loadSummaries() {\n        this.snapshotControllerService.listUsingGet({}).subscribe(summaries => {\n            this.store.next({summaries: summaries})\n        })\n    }\n\n    createSnapshot(environment: string, name: string) {\n        this.snapshotControllerService.createUsingPost({\n            body: {\n                environmentKey: environment,\n                name\n            }\n        }).subscribe(\n        (dto) => this.loadSummaries()\n        )\n    }\n\n    delete(snapshotId: SnapshotId) {\n        this.snapshotControllerService.deleteByIdUsingDelete({id: snapshotId.id}).subscribe(()=> {\n            this.loadSummaries()\n        })\n\n    }\n\n    upload(snapshotId: SnapshotId, envKey: string): Promise<ExecutionId> {\n        return this.snapshotControllerService.uploadUsingPost({\n            environmentKey: envKey,\n            id: snapshotId.id\n        }).toPromise()\n    }\n}\n",
            "properties": [
                {
                    "name": "summaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotSummaryDto[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSourceSelection",
            "id": "interface-DataSourceSelection-b9e2bfffd7d72e807a083c4fa26aa0cb5141386966d1c1267c41c8f2310b6c0c5086d9b0caa46db00d08933dc9986bfed2de96a23770980f0971d2d54f062a0d",
            "file": "src/app/component/data-source-selection-panel/data-source-selection-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {SystemDescriptionService, SystemDescriptionWrapper} from \"../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {faBolt, faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\n\nexport interface DataSourceSelection {\n    environment: EnvironmentDto,\n    systemComponent: SystemComponentDto\n}\n\n@Component({\n    selector: 'app-data-source-selection-panel',\n    templateUrl: './data-source-selection-panel.component.html',\n    styleUrls: ['./data-source-selection-panel.component.scss']\n})\nexport class DataSourceSelectionPanelComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$;\n\n    connected: boolean = false;\n\n    faBolt = faBolt\n    faTimes = faTimes\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    systemDescription: SystemDescriptionDto\n\n    @Output()\n    selected = new EventEmitter<DataSourceSelection>()\n\n    formGroup: FormGroup = new FormGroup({\n        environment: new FormControl(null, [Validators.required]),\n        systemComponent: new FormControl(null, [Validators.required]),\n    })\n\n    get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    getAvailableEnvironments(systemDescription: SystemDescriptionDto): EnvironmentDto[] {\n        let systemComponentKey = this.systemComponentControl.value?.key\n        if (!systemComponentKey) return []\n        return new SystemDescriptionWrapper(systemDescription).getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey)\n    }\n\n    get systemComponentControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemComponent')\n    }\n\n    selectedSystemComponent() {\n        return this.systemComponentControl.value;\n    }\n\n\n    connect() {\n        let value = this.formGroup.value;\n        console.log('value:', value)\n        this.selected.emit(value)\n        this.connected = true\n    }\n\n    disconnect() {\n        this.selected.emit(null)\n        this.connected = false\n        this.formGroup.setValue({ environmentKey: null, systemComponentKey : null })\n    }\n\n}\n",
            "properties": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDto",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DocumentSelector",
            "id": "interface-DocumentSelector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Selector"
        },
        {
            "name": "EntityDto",
            "id": "interface-EntityDto-88c555ce295251668ec87c1971d94f7c33206209c2dfbd3505c79226796715fc16b5d90d1b1f938de6cf280b90ea09a2eec527fde36f60028d1b63b0aa65ea1a",
            "file": "src/app/api/models/entity-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeDto } from './attribute-dto';\nexport interface EntityDto {\n  attributes?: Array<AttributeDto>;\n  entityType?: string;\n  json?: boolean;\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<AttributeDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "entityType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "json",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EntityItem",
            "id": "interface-EntityItem-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeItem[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "entity_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "entity_ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EnvironmentDialogData",
            "id": "interface-EnvironmentDialogData-5851485ab52937c62c5efc90b4006ba7adec9e0e03c73b03d366c88f22368ca66a416f7401aa57bbe45b910bc13697917dc748ef7ed2deee8314c245f75ae63c",
            "file": "src/app/settings/environments-page/environment-panel/environment-dialog/environment-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\n\nexport interface EnvironmentDialogData {\n  key: string,\n  label: string,\n}\n\nexport interface EnvironmentDialogSpec {\n  keys: string[];\n  data: EnvironmentDialogData\n  cancel: () => void\n  confirm: (data: EnvironmentDialogData) => void\n}\n\n@Component({\n  selector: 'app-environment-dialog',\n  templateUrl: './environment-dialog.component.html',\n  styleUrls: ['./environment-dialog.component.scss']\n})\nexport class EnvironmentDialogComponent implements OnInit, OnChanges {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: EnvironmentDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n      this.formGroup.setValue(this.spec.data)\n      this.formGroup.markAsPristine()\n      this.formGroup.markAsUntouched()\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })\n\n  public get keyControl(): FormControl {\n    return <FormControl> this.formGroup.get('key')\n  }\n\n  public keyControlInvalid() : boolean {\n    return showValidationMessages(this.keyControl)\n  }\n\n  public get labelControl(): FormControl {\n    return <FormControl> this.formGroup.get('label')\n  }\n\n  labelControlInvalid() {\n    return showValidationMessages(this.labelControl)\n  }\n\n  private get systemTypeControl(): FormControl {\n    return <FormControl> this.formGroup.get('systemType')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EnvironmentDialogSpec",
            "id": "interface-EnvironmentDialogSpec-5851485ab52937c62c5efc90b4006ba7adec9e0e03c73b03d366c88f22368ca66a416f7401aa57bbe45b910bc13697917dc748ef7ed2deee8314c245f75ae63c",
            "file": "src/app/settings/environments-page/environment-panel/environment-dialog/environment-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\n\nexport interface EnvironmentDialogData {\n  key: string,\n  label: string,\n}\n\nexport interface EnvironmentDialogSpec {\n  keys: string[];\n  data: EnvironmentDialogData\n  cancel: () => void\n  confirm: (data: EnvironmentDialogData) => void\n}\n\n@Component({\n  selector: 'app-environment-dialog',\n  templateUrl: './environment-dialog.component.html',\n  styleUrls: ['./environment-dialog.component.scss']\n})\nexport class EnvironmentDialogComponent implements OnInit, OnChanges {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: EnvironmentDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n      this.formGroup.setValue(this.spec.data)\n      this.formGroup.markAsPristine()\n      this.formGroup.markAsUntouched()\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })\n\n  public get keyControl(): FormControl {\n    return <FormControl> this.formGroup.get('key')\n  }\n\n  public keyControlInvalid() : boolean {\n    return showValidationMessages(this.keyControl)\n  }\n\n  public get labelControl(): FormControl {\n    return <FormControl> this.formGroup.get('label')\n  }\n\n  labelControlInvalid() {\n    return showValidationMessages(this.labelControl)\n  }\n\n  private get systemTypeControl(): FormControl {\n    return <FormControl> this.formGroup.get('systemType')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDialogData",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "EnvironmentDto",
            "id": "interface-EnvironmentDto-2f2b77a2cd249ec767cbf794b56c048961209023feba9714ab74eb64d8f3de26070db07a777f96479bfcd0f06aaa5d6a0ab700f1f90ce69d6d0d8c9860541d0f",
            "file": "src/app/api/models/environment-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EnvironmentDto {\n  key?: string;\n  label?: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExecutionDto",
            "id": "interface-ExecutionDto-e6e1f2c5ed7acc4d7b1b73703ad8681cec88bae32b84bd6b69130d01536b7cdca3c9b85e563a8c07dd85be2c18920178f8110ba8f4a0616438dcaa25a540699b",
            "file": "src/app/api/models/execution-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ExecutionDto {\n  children?: Array<ExecutionDto>;\n  label?: string;\n  percentDone?: number;\n  status?: 'DONE' | 'ERROR' | 'PAUSED' | 'READY' | 'RUNNING' | 'UNRESPONSIVE';\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ExecutionDto>",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "percentDone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"DONE\" | \"ERROR\" | \"PAUSED\" | \"READY\" | \"RUNNING\" | \"UNRESPONSIVE\"",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExecutionId",
            "id": "interface-ExecutionId-46397e6d926bf03dd37a4310926c13cb93eeb24aaf23876af907fd03978f1b35d494effcf0d4020d3f67432f82f9b59090153794c91635226ce0abd2ce221029",
            "file": "src/app/api/models/execution-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ExecutionId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileStore",
            "id": "interface-FileStore-1d2c0d68f3503e5542753b0c5b6960fdaa1e312d1d66349f08db01fc7e0b5c3ea42d0a7a22d1f59fa29723ca391abac8b9ecbf7c02323524648a53de95fcdbe6",
            "file": "src/app/api/models/file-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FileStore {\n  blockSize?: number;\n  readOnly?: boolean;\n  totalSpace?: number;\n  unallocatedSpace?: number;\n  usableSpace?: number;\n}\n",
            "properties": [
                {
                    "name": "blockSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "unallocatedSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "usableSpace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FileSystem",
            "id": "interface-FileSystem-447a1aba6f1b46b96c9b18603c6559da8d4ac69278724c7b4db8a594136e9dfea8199b7aeed32704f1446b9bcdc91beb809a392036e5659fba5fe825a5a1694d",
            "file": "src/app/api/models/file-system.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IterableFileStore } from './iterable-file-store';\nimport { IterablePath } from './iterable-path';\nimport { UserPrincipalLookupService } from './user-principal-lookup-service';\nexport interface FileSystem {\n  fileStores?: IterableFileStore;\n  open?: boolean;\n  readOnly?: boolean;\n  rootDirectories?: IterablePath;\n  separator?: string;\n  userPrincipalLookupService?: UserPrincipalLookupService;\n}\n",
            "properties": [
                {
                    "name": "fileStores",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterableFileStore",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rootDirectories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterablePath",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "separator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userPrincipalLookupService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPrincipalLookupService",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "HistoryItem",
            "id": "interface-HistoryItem-0de2f5125ad9cd8d25df6b7d7a7fe5fab88ee5418d76e82427867a2194e989329b2233fadb1a46466e41bdb14dacf979bdb44bf21ecbb16587209bfb94c17c60",
            "file": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ActionsSpec} from \"@fabric/common\";\n\nexport interface HistoryItem {\n  attributes?: { [key: string]: string };\n}\n\n@Component({\n  selector: 'app-history-panel',\n  templateUrl: './history-panel.component.html',\n  styleUrls: ['./history-panel.component.scss']\n})\nexport class HistoryPanelComponent {\n\n  @Input()\n  historyItems: HistoryItem[]\n\n  @Output()\n  onSelect = new EventEmitter<HistoryItem>()\n\n  @Output()\n  onConvert = new EventEmitter<HistoryItem>()\n\n  @Output()\n  onDelete = new EventEmitter<HistoryItem>()\n\n  select(item: HistoryItem) {\n    this.onSelect.emit(item)\n  }\n\n  asOneLine(item: HistoryItem): string {\n    let line = ''\n    Object.keys(item.attributes).forEach((key, index) => {\n      let value = item.attributes[key]\n      if (value) {\n        line += index > 0 ? ' ' : ''\n        line += item.attributes[key]\n      }\n    })\n    return line\n  }\n\n  convert(item: HistoryItem) {\n    this.onConvert.emit(item)\n  }\n\n  delete(item: HistoryItem) {\n    this.onDelete.emit(item)\n  }\n\n  actions(item: HistoryItem): ActionsSpec {\n    return {\n      actions: [\n        {\n            label: 'To Snippet',\n            handler: () => this.convert(item)\n        },\n        {\n          label: 'Select',\n          handler: () => this.select(item)\n        },\n        {\n          label: 'Delete',\n          handler: () => this.delete(item)\n        },\n      ]\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Item",
            "id": "interface-Item-5185119006d2303a9cb1235c61b8a81d22f108f05ed8716bc8e64affe3b256b20508d24dee649da92075d06686987c839021125e268eeccf6d6aa576ec9a7843",
            "file": "src/app/common/styleguide/command-progress/command-progress.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ExecutionDto} from \"@fabric/models\";\n\ninterface Item {\n    command: ExecutionDto\n    depth: number\n}\n\n@Component({\n    selector: 'app-command-progress',\n    templateUrl: './command-progress.component.html',\n    styleUrls: ['./command-progress.component.scss']\n})\nexport class CommandProgressComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    @Input()\n    command: ExecutionDto\n\n    items: Item[]\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.command) {\n            let items: Item[] = []\n            recursiveAddItems(this.command, items, 0)\n            this.items = items\n        }\n\n        function recursiveAddItems(command: ExecutionDto, items: Item[], depth) {\n            items.push({\n                command,\n                depth\n            })\n            command.children?.forEach(subCommand => recursiveAddItems(subCommand, items, depth + 1))\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    isComposite(item: Item): boolean | ExecutionDto[] {\n        if (!(item.command.children && item.command.children.length > 0)) return false\n        return item.command.children\n    }\n\n    itemWrapperStyle(item: Item) {\n        let indent = item.depth * 50;\n        return `margin-left: ${indent}px;`\n    }\n\n    itemChildren(item: Item): ExecutionDto[] {\n        return item.command.children\n    }\n\n\n    itemProgressBarStyle(item: Item): string {\n        return `width: ${item.command.percentDone}%;`\n    }\n\n    itemClasses(item: Item): string[] {\n        return this.commandClasses(item.command)\n    }\n\n    commandClasses(command: ExecutionDto) {\n        let classNames = ['progress-bar']\n        switch (command.status) {\n            case \"RUNNING\":\n                classNames.push('bg-info', 'progress-bar-animated', 'progress-bar-striped')\n                break\n            case \"PAUSED\":\n                classNames.push('bg-info')\n                break\n            case \"UNRESPONSIVE\":\n                classNames.push('bg-warning', 'progress-bar-striped', 'progress-bar-animated')\n                break\n            case \"DONE\" :\n                classNames.push('bg-success')\n                break\n            default:\n                classNames.push('bg-danger')\n        }\n        return classNames\n    }\n\n    subCommandPercent(subCommand: ExecutionDto, subCommands: ExecutionDto[]) {\n        return subCommand.percentDone\n    }\n\n    commandProgressBarStyle(command: ExecutionDto, subCommands: ExecutionDto[]) {\n        return `width: ${command.percentDone/subCommands.length}%;`\n    }\n\n}\n",
            "properties": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExecutionDto",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "depth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IterableFileStore",
            "id": "interface-IterableFileStore-4288f93037660b28716bf942a52b6c8fe71058cbfb1738b33347503f4b2987ba071c3d699b02f102549f662bc79a6261c624eb2c0b8a76122162497a86831bf1",
            "file": "src/app/api/models/iterable-file-store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IterableFileStore {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "IterablePath",
            "id": "interface-IterablePath-3c46aa4a899fea328dbed8628c3839102788a1888d7bd7f4916db4e273225c6d17371ebfe5b6427dd1be8110b9953ae53d8ebfb2ca7e1dab5ba5edbbdc52fed0",
            "file": "src/app/api/models/iterable-path.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IterablePath {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "ListEntryPart",
            "id": "interface-ListEntryPart-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "entry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityItem",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "json",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "lists",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListPart[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ListPart",
            "id": "interface-ListPart-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "entries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListEntryPart[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaModelDialogData",
            "id": "interface-MetaModelDialogData-ea895cc54ba13ee759e7ccd673f747d35c9e209f9f0c0a970058cbc97540373deb3b466a575d27eb4e3a41bb9bc3ffd05c0f9a40b7d2a299ea2fd9414fcdd645",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {SystemDescriptionWrapper} from \"../../../system-description.service\";\n\n\nexport interface MetaModelDialogData {\n  environmentKey: string\n}\n\nexport interface MetaModelDialogSpec {\n  systemComponent: SystemComponentDto\n  systemDescription: SystemDescriptionDto\n  data: MetaModelDialogData\n  cancel: () => void\n  confirm: (data: MetaModelDialogData) => void\n}\n\n@Component({\n  selector: 'app-meta-model-dialog',\n  templateUrl: './meta-model-dialog.component.html',\n  styleUrls: ['./meta-model-dialog.component.scss']\n})\nexport class MetaModelDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: MetaModelDialogSpec\n\n  formGroup: FormGroup = new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })\n\n  public get environmentKeyControl(): FormControl {\n    return <FormControl> this.formGroup.get('environmentKey')\n  }\n\n  environmentKeyControlInvalid() {\n    return showValidationMessages(this.environmentKeyControl)\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    return new SystemDescriptionWrapper(this.spec.systemDescription).getEnvironments(this.spec.systemComponent);\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaModelDialogSpec",
            "id": "interface-MetaModelDialogSpec-ea895cc54ba13ee759e7ccd673f747d35c9e209f9f0c0a970058cbc97540373deb3b466a575d27eb4e3a41bb9bc3ffd05c0f9a40b7d2a299ea2fd9414fcdd645",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {SystemDescriptionWrapper} from \"../../../system-description.service\";\n\n\nexport interface MetaModelDialogData {\n  environmentKey: string\n}\n\nexport interface MetaModelDialogSpec {\n  systemComponent: SystemComponentDto\n  systemDescription: SystemDescriptionDto\n  data: MetaModelDialogData\n  cancel: () => void\n  confirm: (data: MetaModelDialogData) => void\n}\n\n@Component({\n  selector: 'app-meta-model-dialog',\n  templateUrl: './meta-model-dialog.component.html',\n  styleUrls: ['./meta-model-dialog.component.scss']\n})\nexport class MetaModelDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: MetaModelDialogSpec\n\n  formGroup: FormGroup = new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })\n\n  public get environmentKeyControl(): FormControl {\n    return <FormControl> this.formGroup.get('environmentKey')\n  }\n\n  environmentKeyControlInvalid() {\n    return showValidationMessages(this.environmentKeyControl)\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    return new SystemDescriptionWrapper(this.spec.systemDescription).getEnvironments(this.spec.systemComponent);\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaModelDialogData",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemDescriptionDto",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaModelId",
            "id": "interface-MetaModelId-a8dec1a83121436f08cc46e2bff14b41e6114aa8bbbae411ead9f870004e079997fa7d2c0f6b064eb93c144567d4a03b2d21b438da8c98fe99159c6fc6b4fdad",
            "file": "src/app/api/models/meta-model-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaModelId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MetaModelState",
            "id": "interface-MetaModelState-5bff41d20621ad54f8c0ecd950b7f137599b679487461d108dd51f1ef85b4d7c07ac673a0080f2475035c3b53cd92d1857944bbc0337c4770dd597f3df69ab83",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MetaModelControllerService} from \"@fabric/services\";\nimport {EntityDto, SystemComponentDto} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\ninterface MetaModelState {\n    metaModel: EntityDto,\n    fetching: boolean\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MetaDataService {\n\n    private store = new BehaviorSubject<MetaModelState>({metaModel: null, fetching: false})\n\n    metaModel$ = this.store\n\n\n    constructor(private metaModelControllerService: MetaModelControllerService) {\n        this.init()\n    }\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('store::metaModel$ >>', this.metaModel$))\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    public loadMetaModel(envKey: string, systemComponentKey: string) {\n        return this.metaModelControllerService.getMetaModelAsEntityUsingGet({envKey, systemComponentKey}).subscribe(entityDto => {\n            this.store.next({metaModel: entityDto, fetching: false})\n        })\n    }\n\n    public fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string) {\n        this.store.next({metaModel: null, fetching: true})\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).subscribe(result => {\n            this.loadMetaModel(environmentKey, systemComponent.key)\n        })\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "fetching",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "metaModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityDto",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoMetaModel",
            "id": "interface-MongoMetaModel-1cc525ac01c60dca211a93675259e0d293a2e4aa54017fb05cf368a8b92a6e0b234ce87f13111ac4b37f6237e6c4c48db0b97e5553103841bf04125afeaedf6f",
            "file": "src/app/api/models/mongo-meta-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Collection } from './collection';\nexport interface MongoMetaModel {\n  collections?: Array<Collection>;\n  dbName?: string;\n}\n",
            "properties": [
                {
                    "name": "collections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Collection>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dbName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoMetaModelStoreState",
            "id": "interface-MongoMetaModelStoreState-0ad0dedcaf8f91a225cdf406e9f20bd07e353fb1a5578a5b3f830a1dd9bc00b902dd1f5b9e7354d7bca555dffc4a3590bde83150a8508ff527c89b8b70c648d5",
            "file": "src/app/settings/meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoMetaModel, MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoMetaModelStoreState {\n  modelMap: Map<String, MongoMetaModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoMetaModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoMetaModelStoreState>({ modelMap: new Map() })\n\n  metaModels$ = this.store.pipe(\n      map(state => state.modelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::metaModels$ >>', this.metaModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getMetaModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoMetaModel> = this.store.getValue().modelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ modelMap : new Map<String, MongoMetaModel>(map) })\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "modelMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<String | MongoMetaModel>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoNavigationModel",
            "id": "interface-MongoNavigationModel-4a53f7317dcc6d994b695d5bcee2dcf07579eb6138561a9a631c1a53dd8fa4ba9b5d92d02ebe3b12e7dea7f25ff4c51f1e63ba09a2968e13f8ce166e4c93ed98",
            "file": "src/app/api/models/mongo-navigation-model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CollectionNavItem } from './collection-nav-item';\nexport interface MongoNavigationModel {\n  roots?: Array<CollectionNavItem>;\n}\n",
            "properties": [
                {
                    "name": "roots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CollectionNavItem>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoNavigationModelStoreState",
            "id": "interface-MongoNavigationModelStoreState-4f46ff1e41869ec3bc8d099bb9c91a77db6fd219a9c1e73283bbb4784ef3cbf8e8963746dd44ae2ef0a37fb5742c61d60558364eaff50172ebf7eb1fa6d18b2d",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoNavigationModelStoreState {\n  navigationModelMap: Map<String, MongoNavigationModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoNavigationModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoNavigationModelStoreState>({ navigationModelMap: new Map() })\n\n  navigationModels$ = this.store.pipe(\n      map(state => state.navigationModelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::navigationModels$ >>', this.navigationModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getNavigationModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoNavigationModel> = this.store.getValue().navigationModelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ navigationModelMap : new Map<String, MongoNavigationModel>(map) })\n    })\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "navigationModelMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<String | MongoNavigationModel>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoSnapshot",
            "id": "interface-MongoSnapshot-249b46c6fc2ecda8a014e39f74d05d0251981defc721cd4fe9d686a1e0fcf85387cefda95bea12951c292a1cecec90d5816c1010bab122d4e9ce3d42b000afcf",
            "file": "src/app/api/models/mongo-snapshot.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CollectionSnapshot } from './collection-snapshot';\nexport interface MongoSnapshot {\n  collectionSnapshots?: Array<CollectionSnapshot>;\n}\n",
            "properties": [
                {
                    "name": "collectionSnapshots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CollectionSnapshot>",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MongoSnapshotStoreState",
            "id": "interface-MongoSnapshotStoreState-18e76ce4072761643ecae86ef50d89e06abf2f29e3d04c9e5f2ea7441501f354e194593c4ab42e30cb438e39a4a502517ba102e709ad1946b8ef037dda59801e",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\n\n\ninterface MongoSnapshotStoreState {\n  mongoSnapshot: MongoSnapshot\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoService {\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { }\n\n  private store = new BehaviorSubject<MongoSnapshotStoreState>({ mongoSnapshot: null})\n\n  mongoSnapshot$ = this.store.pipe(\n      map(state => state.mongoSnapshot),\n      distinctUntilChanged(),\n  )\n\n  public load(snapshotId: SnapshotId, componentKey: string) {\n    this.mongoSnapshotControllerService.getMongoSnapshotUsingGet({ id: snapshotId.id, componentKey}).subscribe(mongoSnapshot =>\n      this.store.next({ mongoSnapshot })\n    )\n  }\n\n}\n",
            "properties": [
                {
                    "name": "mongoSnapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MongoSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavigationRequest",
            "id": "interface-NavigationRequest-14299d693128fc617e91b8fb9f2e9d2eaf439d331193b046e36ca33c2de88d8ed8eac952350879956307f3b1c5a644ec8c46a39e9486f74d40b42d7b06f6e49a",
            "file": "src/app/api/models/navigation-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NavItem } from './nav-item';\nexport interface NavigationRequest {\n  environmentKey?: string;\n  navItem?: NavItem;\n  systemComponentKey?: string;\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "navItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavItem",
            "id": "interface-NavItem-14e465457d813790a089aea19426f1109ae9ec4a7abd5bc0c7400fee1a9d92a32975618c3f83e3ff1f956ffef9c0147be38ced4b8273ab0652a90f015b1d108f",
            "file": "src/app/api/models/nav-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NavItem {\n  attributes?: { [key: string]: string };\n  id?: string;\n  label?: string;\n  type?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavItemSpec",
            "id": "interface-NavItemSpec-e4daedfa736e26650d84d2b4455f9f1c37e305e01abaae8f54a4bc6ef7c049f780acc941cb7cc747d2e540ff2fcf3d3ac50fbaf63437080178cddbee114d130c",
            "file": "src/app/common/styleguide/nav/nav.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface NavSpec {\n  items: NavItemSpec[]\n  select: (string) => void\n  defaultSelection: string\n}\n\nexport interface NavItemSpec {\n  label: string\n  key: string\n}\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnChanges{\n\n  faAngleRight = faAngleRight\n\n  constructor() { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.doSelect(this.spec.defaultSelection)\n  }\n\n  active: string\n\n  @Input()\n  spec: NavSpec\n\n  doSelect(key: string) {\n    this.active = key\n    this.spec.select(key)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavSpec",
            "id": "interface-NavSpec-e4daedfa736e26650d84d2b4455f9f1c37e305e01abaae8f54a4bc6ef7c049f780acc941cb7cc747d2e540ff2fcf3d3ac50fbaf63437080178cddbee114d130c",
            "file": "src/app/common/styleguide/nav/nav.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface NavSpec {\n  items: NavItemSpec[]\n  select: (string) => void\n  defaultSelection: string\n}\n\nexport interface NavItemSpec {\n  label: string\n  key: string\n}\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnChanges{\n\n  faAngleRight = faAngleRight\n\n  constructor() { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.doSelect(this.spec.defaultSelection)\n  }\n\n  active: string\n\n  @Input()\n  spec: NavSpec\n\n  doSelect(key: string) {\n    this.active = key\n    this.spec.select(key)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "defaultSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItemSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NavTreeItemDto",
            "id": "interface-NavTreeItemDto-ce1977ba3438b86dcaa4cf0a588756dc717d30dd8ae9612e187208d096124db5ef693e3910af803b0a2188c22c13bfc4e933ba6be35fb07a82d4d75810f39926",
            "file": "src/app/navigation-page/navigation-tree/navigation-tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {NavItem, Row} from \"@fabric/models\";\n\nexport interface NavTreeItemDto {\n    root: boolean\n    navItems: NavItem[]\n    label?: string\n    rows?: Row[]\n    columns?: string[]\n    children?: NavTreeItemDto[]\n}\n\n@Component({\n  selector: 'app-navigation-tree',\n  templateUrl: './navigation-tree.component.html',\n  styleUrls: ['./navigation-tree.component.scss']\n})\nexport class NavigationTreeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  tree: NavTreeItemDto\n\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavTreeItemDto[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "navItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Row[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Output",
            "id": "interface-Output-f013a931eee25b4e1ca8769ee6d3958e59718c6f20956ae479af7449a367dab6ffa0a3eeabb05798ec961163e0fc32fcf00df639f7b4279f0a15a26543f982af",
            "file": "src/app/console-page/console.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConsoleControllerService} from \"@fabric/services\";\nimport {ConsoleDescriptorDto, NavItem, QueryCompositeDto, SnippetDto, TabularResultSet} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\nexport interface Output {\n    jsonOutput: string\n    stackTraceOutput: string\n    tabularResponse: TabularResultSet\n}\n\ninterface ConsoleState {\n    rootQueryComposite: QueryCompositeDto\n    selection: QueryCompositeDto\n    output: Output\n\n}\n\n\n\n@Injectable()\nexport class ConsoleService {\n\n    constructor(private consoleControllerService: ConsoleControllerService) {\n        this.init()\n    }\n\n    subscriptions = []\n\n    init() {\n        this.subscriptions.push(logChangesToObservable('store::output$ >>', this.output$))\n    }\n\n    private store = new BehaviorSubject<ConsoleState>(this.initialConsoleState())\n\n    root$ = this.store.pipe(\n        map(state => state.rootQueryComposite),\n        distinctUntilChanged(),\n    )\n\n    selection$ = this.store.pipe(\n        map(state => state.selection),\n        distinctUntilChanged(),\n    )\n\n    output$ = this.store.pipe(\n        map(state => state.output),\n        distinctUntilChanged(),\n    )\n\n    private initialConsoleState(): ConsoleState  {\n         let rootQueryComposite = this.createQueryComposite()\n         return {\n             rootQueryComposite,\n             selection: rootQueryComposite,\n             output: {\n                 jsonOutput: null,\n                 stackTraceOutput: null,\n                 tabularResponse: null\n             }\n         }\n    }\n\n    private idCounter: 0\n\n    private createQueryComposite(): QueryCompositeDto {\n        return {\n            id: \"\" + this.idCounter++,\n            children: []\n        }\n    }\n\n    addQuery() {\n    }\n\n    clearOutput() {\n        this.store.next({\n            ... this.store.value,\n            output: {\n                jsonOutput: null,\n                stackTraceOutput: null,\n                tabularResponse: null\n            }\n        })\n    }\n\n\n    loadDescriptor(systemType: string) : Promise<ConsoleDescriptorDto>{\n        return this.consoleControllerService.getDescriptorUsingGet({systemType})\n            .toPromise()\n    }\n\n    runRequest(queryComposite: QueryCompositeDto) {\n        this.clearOutput();\n        return this.consoleControllerService.runRequestUsingPost({\n            body: queryComposite\n        }).subscribe((dto)=> {\n\n            this.store.value.selection.result = dto.result\n\n            let result = dto.result\n            let output\n            switch (result.resultType) {\n                case 'JSON': {\n                    output = {\n                        jsonOutput : JSON.parse(result.content)\n                    }\n                    break\n                }\n                case 'STACKTRACE': {\n                    output = {\n                        stackTraceOutput : result.content\n                    }\n                    break\n                }\n                case 'TABULAR' : {\n                    output = {\n                        tabularResponse : result.tabular\n                    }\n                }\n            }\n            this.store.next({\n                ... this.store.value,\n                output\n            })\n\n            if (result.resultType != 'STACKTRACE') {\n                // this.addHistoryItem(attributes)\n            }\n\n\n        })\n    }\n\n    loadSnippets(systemType:string): Promise<SnippetDto[]> {\n        return this.consoleControllerService.getSnippetsUsingGet({systemType}).toPromise()\n    }\n\n    addSnippet(title: string, systemType: string, attributes: {}): Promise<SnippetDto[]> {\n        return this.consoleControllerService.createSnippetUsingPost({\n            systemType,\n            body: {\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n\n    }\n\n    editSnippet(id: string, title: string, systemType: string, attributes: {}) {\n        return this.consoleControllerService.updateSnippetUsingPut({\n            systemType,\n            body: {\n                id,\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n    }\n\n    deleteSnippet(id: string, systemType: string) {\n        return this.consoleControllerService.deleteSnippetUsingDelete({\n            systemType,\n            id\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n    }\n\n    loadNavItems(systemComponentKey: string): Promise<NavItem[]>  {\n        return this.consoleControllerService.getNavigationUsingPost({body: {\n            systemComponentKey,\n        }}).toPromise()\n    }\n\n}\n",
            "properties": [
                {
                    "name": "jsonOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "stackTraceOutput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tabularResponse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabularResultSet",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PagingDto",
            "id": "interface-PagingDto-146d905263c5a55fd2443495d5c38072a81266a2d705b399e2f719a876c733f9a32097ddce57e2302b595ccb2fcd029e29cf821a296b54fcdaffa2d2e1917bfb",
            "file": "src/app/api/models/paging-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface PagingDto {\n  nrOfResults?: number;\n  pageNr?: number;\n  pageSize?: number;\n}\n",
            "properties": [
                {
                    "name": "nrOfResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageNr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ParameterOptions",
            "id": "interface-ParameterOptions-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "properties": [
                {
                    "name": "explode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Defines the options for appending a parameter</p>\n",
            "rawdescription": "\n\nDefines the options for appending a parameter\n",
            "methods": []
        },
        {
            "name": "Path",
            "id": "interface-Path-71bddba6df3c6cf7cb0e96343a61c9338c8d0bd0bc0ffd1b2744a01611466b63ba3b6c6749fc6ef876f6d7c2ab6cc335b924dbbe47cac3409d73b0e308cdfe99",
            "file": "src/app/api/models/path.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FileSystem } from './file-system';\nexport interface Path {\n  absolute?: boolean;\n  fileName?: Path;\n  fileSystem?: FileSystem;\n  nameCount?: number;\n  parent?: Path;\n  root?: Path;\n}\n",
            "properties": [
                {
                    "name": "absolute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fileSystem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileSystem",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nameCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "root",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "PopupMenuItemSpec",
            "id": "interface-PopupMenuItemSpec-0ed2a066939d050c3817abdaa5224e1550abfc0e1e39053eafafcfdc32891f5f99dc3539479d24da9479d665fdc02464183e284e09222363516fefb06a72513e",
            "file": "src/app/common/popup-menu/popup-menu.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, HostBinding, HostListener, Input, OnInit} from '@angular/core';\n\n// based on https://mobiarch.wordpress.com/2018/07/07/create-a-popup-menu-in-angular/\n\nexport interface PopupMenuItemSpec {\n  label: string\n  onClick: () => void\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.scss']\n})\nexport class PopupMenuComponent implements OnInit {\n  @HostBinding(\"style.top\") y = \"0px\"\n  @HostBinding(\"style.left\") x = \"0px\"\n  @HostBinding(\"style.visibility\") visibility = \"hidden\"\n  @Input() @HostBinding(\"style.width\") width = \"200px\"\n\n  constructor() {\n  }\n\n  items: PopupMenuItemSpec[]\n\n  ngOnInit() {\n  }\n\n  open(e: MouseEvent) {\n    this.x = `${e.pageX}px`\n    this.y = `${e.pageY}px`\n\n    this.visibility = \"visible\"\n\n    e.stopPropagation()\n  }\n\n  close() {\n    this.visibility = \"hidden\"\n  }\n\n  @HostListener('document:click')\n  public onDocumentClick() {\n    if (this.visibility === \"visible\") {\n      this.close()\n    }\n  }\n\n  onClick(item: PopupMenuItemSpec) {\n    item.onClick.apply(this, [])\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "QueryCompositeDto",
            "id": "interface-QueryCompositeDto-3cc174824ebf96d605a2052c4cf5ae82680db710e58598e72de97445ec4870e4ce1c822909c3425c0dea318883ab0b6dd09bce5dd9a3503f3970befd591be779",
            "file": "src/app/api/models/query-composite-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { QueryDto } from './query-dto';\nimport { ResultDto } from './result-dto';\nexport interface QueryCompositeDto {\n  children?: Array<QueryCompositeDto>;\n  id?: string;\n  query?: QueryDto;\n  result?: ResultDto;\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<QueryCompositeDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryDto",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResultDto",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "QueryDto",
            "id": "interface-QueryDto-790784ea1b293b41e9aa4648fa6283b1f56166449cf8fbdef7c0fc5eaf55dd142590fb4029110d2a518842a887f0f4290666c6b010cf8fa77748955fc9be133f",
            "file": "src/app/api/models/query-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NavItem } from './nav-item';\nimport { PagingDto } from './paging-dto';\nexport interface QueryDto {\n  attributes?: { [key: string]: string };\n  environmentKey?: string;\n  navItem?: NavItem;\n  paging?: PagingDto;\n  systemComponentKey?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "navItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "paging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PagingDto",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ResultDto",
            "id": "interface-ResultDto-043680964d0b9e557dccc645594b087e9cf42b820da74d3992763a5450e347476a6d93c1dfe93650e2cdc556f1bf72b0692fb9cdad33a2e01c87492bb3982a9e",
            "file": "src/app/api/models/result-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NavItem } from './nav-item';\nimport { TabularResultSet } from './tabular-result-set';\nimport { TabularResultSetMetaDataDto } from './tabular-result-set-meta-data-dto';\nexport interface ResultDto {\n  content?: string;\n  description?: TabularResultSetMetaDataDto;\n  navItems?: Array<NavItem>;\n  resultType?: 'JSON' | 'MESSAGE' | 'STACKTRACE' | 'TABULAR';\n  systemType?: string;\n  tabular?: TabularResultSet;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabularResultSetMetaDataDto",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "navItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NavItem>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "resultType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"JSON\" | \"MESSAGE\" | \"STACKTRACE\" | \"TABULAR\"",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "tabular",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabularResultSet",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RootSelector",
            "id": "interface-RootSelector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "Selector"
        },
        {
            "name": "Row",
            "id": "interface-Row-ace4b7261674dd1feb3f200bee24eb2fc9bc403d0fe964c828de830eb5af11d2124b9a5a6131cd1c87a3eeb04e69100908f16229272ba9d77ab3ede4afae2455",
            "file": "src/app/api/models/row.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Row {\n  values?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Selector",
            "id": "interface-Selector-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Setting",
            "id": "interface-Setting-73974b5622cdeea463e391e7879f83730ded55efa25ba31a1ce8360a1ad21f85f6ed1626154cb961003e97f15d2d8074e2ec8bd1cc4d52ddf3c737985e0475d2",
            "file": "src/app/settings/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport {logChangesToObservable} from '@fabric/common';\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from '@fabric/models';\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from '@fabric/services';\nimport {SettingsDialogData} from './connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component';\n\n\nexport interface Setting {\n    key: string\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string\n    environmentKey : string\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getDefaultEnvironment(): EnvironmentDto {\n        return this.systemDescription.environments[0]\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getSystemComponentByKey(systemComponentKey: string): SystemComponentDto {\n        return this.systemDescription.systemComponents.find(comp => comp.key === systemComponentKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey: string): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponentKey)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingDescriptorDto",
            "id": "interface-SettingDescriptorDto-2fd9a49b471091915cb47db49c4dfd999a4019b908761a61397cae3f21725378f6c6f2ca1f0a1941ad1b2333097fc6fdcc011af710868b2e101fde47791266cc",
            "file": "src/app/api/models/setting-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SettingDescriptorDto {\n  description?: string;\n  key?: string;\n  placeHolder?: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "placeHolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingRow",
            "id": "interface-SettingRow-73974b5622cdeea463e391e7879f83730ded55efa25ba31a1ce8360a1ad21f85f6ed1626154cb961003e97f15d2d8074e2ec8bd1cc4d52ddf3c737985e0475d2",
            "file": "src/app/settings/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport {logChangesToObservable} from '@fabric/common';\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from '@fabric/models';\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from '@fabric/services';\nimport {SettingsDialogData} from './connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component';\n\n\nexport interface Setting {\n    key: string\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string\n    environmentKey : string\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getDefaultEnvironment(): EnvironmentDto {\n        return this.systemDescription.environments[0]\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getSystemComponentByKey(systemComponentKey: string): SystemComponentDto {\n        return this.systemDescription.systemComponents.find(comp => comp.key === systemComponentKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey: string): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponentKey)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Setting[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingsDialogData",
            "id": "interface-SettingsDialogData-fec792e6c1963bc75d104ed7f35b2c1152fdd4a39de26f53e9b8de7ef7c9339284b2c30b2b6f0e421ba967a16ce95bfbbf48f9cdd8eed8d30c7c8cde1b94b511",
            "file": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './connection-settings-dialog.component.html',\n    styleUrls: ['./connection-settings-dialog.component.scss']\n})\nexport class ConnectionSettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.systemType)\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            } else {\n                this.systemComponentKeyControl().setValue(this.spec.data.systemComponentKey)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    get systemType(): string {\n        return this.specWrapper.getSystemType(this.spec.data.systemComponentKey)\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Setting[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SettingsDialogSpec",
            "id": "interface-SettingsDialogSpec-fec792e6c1963bc75d104ed7f35b2c1152fdd4a39de26f53e9b8de7ef7c9339284b2c30b2b6f0e421ba967a16ce95bfbbf48f9cdd8eed8d30c7c8cde1b94b511",
            "file": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './connection-settings-dialog.component.html',\n    styleUrls: ['./connection-settings-dialog.component.scss']\n})\nexport class ConnectionSettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.systemType)\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            } else {\n                this.systemComponentKeyControl().setValue(this.spec.data.systemComponentKey)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    get systemType(): string {\n        return this.specWrapper.getSystemType(this.spec.data.systemComponentKey)\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsDialogData",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ADD\" | \"EDIT\"",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "systemComponents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemTypeDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotComponentDto",
            "id": "interface-SnapshotComponentDto-67db3f083261a3a501a67b173ac6661328f3ce44cfcb6b1059198f964a2a5f09d773a5b2dedc834d0be4a9f19be1da738c5cb08c3099a296c71308bbd9f4d224",
            "file": "src/app/api/models/snapshot-component-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnapshotComponentDto {\n  componentKey?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "componentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDescriptorDto",
            "id": "interface-SnapshotDescriptorDto-5b65373f58abc8ac7d40b7491b50e1699e6d044f96f7a0e304f3e0c204a468aaa05140251817023de9da188f7c0f378354999c3317794cd258d8af18c9d48775",
            "file": "src/app/api/models/snapshot-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SnapshotDescriptorItemDto } from './snapshot-descriptor-item-dto';\nexport interface SnapshotDescriptorDto {\n  componentDescriptors?: Array<SnapshotDescriptorItemDto>;\n  environmentKey?: string;\n  name?: string;\n}\n",
            "properties": [
                {
                    "name": "componentDescriptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SnapshotDescriptorItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDescriptorItemDto",
            "id": "interface-SnapshotDescriptorItemDto-84ce4b79cb60c8426457ab0f477ee0f51bc7a1e886bfbff16da2b1398a824e89ce678038c1adfc49aacc6ca1c47b2a14942bdbc1e2e31db7417515cb1d4f43b2",
            "file": "src/app/api/models/snapshot-descriptor-item-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnapshotDescriptorItemDto {\n  attributes?: { [key: string]: string };\n  children?: Array<SnapshotDescriptorItemDto>;\n  id?: string;\n  itemType?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SnapshotDescriptorItemDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "itemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDialogData",
            "id": "interface-SnapshotDialogData-b0c912c30c007f38f5e2160e91e4cd011f4868154f090a5ca91892f102c200ce20040caef5d2eb35a5f85145e642a1c979ba58f38c27263d9711ee3a071bb1b1",
            "file": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nexport class StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.test()\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDialogSpec",
            "id": "interface-SnapshotDialogSpec-b0c912c30c007f38f5e2160e91e4cd011f4868154f090a5ca91892f102c200ce20040caef5d2eb35a5f85145e642a1c979ba58f38c27263d9711ee3a071bb1b1",
            "file": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nexport class StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.test()\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogData",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "useNameGenerator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDialogTreeNode",
            "id": "interface-SnapshotDialogTreeNode-b0c912c30c007f38f5e2160e91e4cd011f4868154f090a5ca91892f102c200ce20040caef5d2eb35a5f85145e642a1c979ba58f38c27263d9711ee3a071bb1b1",
            "file": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nexport class StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.test()\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogTreeNode[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogTreeNode",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "structureDto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StructureDto",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotDto",
            "id": "interface-SnapshotDto-04ec92fa278178cef7aa40019d2efad175aca123921f796a7462a93ce1acf046ad94fc1c12deb7c9785aa9f5e373a3b376be435b772ce9bbd4d04f5b7cef0b98",
            "file": "src/app/api/models/snapshot-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SnapshotComponentDto } from './snapshot-component-dto';\nimport { SnapshotId } from './snapshot-id';\nexport interface SnapshotDto {\n  componentSnapshots?: Array<SnapshotComponentDto>;\n  environmentKey?: string;\n  name?: string;\n  snapshotId?: SnapshotId;\n}\n",
            "properties": [
                {
                    "name": "componentSnapshots",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SnapshotComponentDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotId",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotId",
            "id": "interface-SnapshotId-7315c716792a93f633d5f19b39077b506f6cc17f57361ad721cc165f7c6657bcd11ef4ee2adb2d17120ee2e27b1f97b5bbb534df2713cd0034aa21c2183bda08",
            "file": "src/app/api/models/snapshot-id.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnapshotId {\n  id?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotStoreState",
            "id": "interface-SnapshotStoreState-282c7a58327aa5d9e91b11e0b39e2e8bb94670201dd9598e81e0a841ce3dabfbac9015986283747badc4d706417f657031538464876ff2c252e938c8229b317d",
            "file": "src/app/snapshot/snapshot-page/snapshot.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {SnapshotDto, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {map,distinctUntilChanged} from \"rxjs/operators\";\n\ninterface SnapshotStoreState {\n  snapshot: SnapshotDto\n}\n\n@Injectable()\nexport class SnapshotService {\n\n  constructor(private snapshotControllerService : SnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<SnapshotStoreState>({ snapshot: null})\n\n  snapshot$ = this.store.pipe(\n      map(state => state.snapshot),\n      distinctUntilChanged(),\n  )\n\n  init() {\n    this.snapshot$.subscribe((dto)=> console.log(\">> snapshot$\", dto))\n  }\n\n  loadSnapshot(snapshotId: SnapshotId) {\n    this.snapshotControllerService.getByIdUsingGet(snapshotId).subscribe(dto => {\n      this.store.next({ snapshot: dto })\n    })\n  }\n\n}\n",
            "properties": [
                {
                    "name": "snapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDto",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotSummaryDto",
            "id": "interface-SnapshotSummaryDto-bfb4bbe091044e6cb98809bea89208fc9982be5cdaff00c8eb8a83e5b69640d18e5d2c06ac5138ea20c524c48e3cf5b8a975f3f9c71a8a60092dbbeca3ba8f46",
            "file": "src/app/api/models/snapshot-summary-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SnapshotId } from './snapshot-id';\nexport interface SnapshotSummaryDto {\n  environmentKey?: string;\n  name?: string;\n  snapshotId?: SnapshotId;\n}\n",
            "properties": [
                {
                    "name": "environmentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotId",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotUploadDialogData",
            "id": "interface-SnapshotUploadDialogData-b456b21e9fa4bf32fb8f183facb5dc8af32d200f2feb67070ec92f2c7bec6c8f82b6024d40e4eb3b2576e907f9e0b6f4fc9a5374f84508614604185bf92a137f",
            "file": "src/app/snapshot/snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto} from \"@fabric/models\";\n\nexport interface SnapshotUploadDialogData {\n  environment: string,\n}\n\nexport interface SnapshotUploadDialogSpec {\n  environments: EnvironmentDto[]\n  data: SnapshotUploadDialogData\n  cancel: () => void\n  confirm: (data: SnapshotUploadDialogData) => void\n}\n\n@Component({\n  selector: 'app-snapshot-upload-dialog',\n  templateUrl: './snapshot-upload-dialog.component.html',\n  styleUrls: ['./snapshot-upload-dialog.component.scss']\n})\nexport class SnapshotUploadDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: SnapshotUploadDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })\n\n  private get environmentControl(): FormControl {\n    return <FormControl> this.formGroup.get('environment')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnapshotUploadDialogSpec",
            "id": "interface-SnapshotUploadDialogSpec-b456b21e9fa4bf32fb8f183facb5dc8af32d200f2feb67070ec92f2c7bec6c8f82b6024d40e4eb3b2576e907f9e0b6f4fc9a5374f84508614604185bf92a137f",
            "file": "src/app/snapshot/snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto} from \"@fabric/models\";\n\nexport interface SnapshotUploadDialogData {\n  environment: string,\n}\n\nexport interface SnapshotUploadDialogSpec {\n  environments: EnvironmentDto[]\n  data: SnapshotUploadDialogData\n  cancel: () => void\n  confirm: (data: SnapshotUploadDialogData) => void\n}\n\n@Component({\n  selector: 'app-snapshot-upload-dialog',\n  templateUrl: './snapshot-upload-dialog.component.html',\n  styleUrls: ['./snapshot-upload-dialog.component.scss']\n})\nexport class SnapshotUploadDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: SnapshotUploadDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })\n\n  private get environmentControl(): FormControl {\n    return <FormControl> this.formGroup.get('environment')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotUploadDialogData",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDto[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnippetDialogData",
            "id": "interface-SnippetDialogData-4de516dfb0d47e61afef0f1908454cc534b73f301309596868b3655a3eedea5d549492bcf70fa47c0262fe96453aa7b605148392d50f51e0f3081c2b88c66934",
            "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ConsoleDescriptorDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\n\nexport interface SnippetDialogData {\n  id?: string\n  title?: string\n  attributes?: { [key: string]: string };\n  fields?: string[]\n}\n\nexport interface SnippetDialogSpec {\n  mode: 'NEW' | 'EDIT'\n  descriptor: ConsoleDescriptorDto\n  data: SnippetDialogData\n  cancel: () => void\n  confirm: (data: SnippetDialogData) => void\n}\n\n@Component({\n  selector: 'app-snippet-dialog',\n  templateUrl: './snippet-dialog.component.html',\n  styleUrls: ['./snippet-dialog.component.scss']\n})\nexport class SnippetDialogComponent implements OnChanges {\n\n  constructor() { }\n\n  @Input()\n  spec: SnippetDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec) {\n      this.idControl.setValue(null)\n      this.titleControl.setValue(null)\n      this.fieldsControl.controls = []\n      if (this.spec.mode === 'EDIT') {\n        this.idControl.setValue(this.spec.data.id)\n        this.titleControl.setValue(this.spec.data.title)\n      }\n      this.spec.descriptor.items.forEach(item => {\n          let value = this.spec.data.attributes[item.name]\n          this.fieldsControl.push(new FormControl(value))\n      })\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    id: new FormControl(null),\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })\n\n  get idControl():FormControl {\n    return <FormControl> this.formGroup.get('id')\n  }\n\n  get titleControl():FormControl {\n    return <FormControl> this.formGroup.get('title')\n  }\n\n  titleControlInvalid() {\n    return showValidationMessages(this.titleControl)\n  }\n\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnippetDialogSpec",
            "id": "interface-SnippetDialogSpec-4de516dfb0d47e61afef0f1908454cc534b73f301309596868b3655a3eedea5d549492bcf70fa47c0262fe96453aa7b605148392d50f51e0f3081c2b88c66934",
            "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ConsoleDescriptorDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\n\nexport interface SnippetDialogData {\n  id?: string\n  title?: string\n  attributes?: { [key: string]: string };\n  fields?: string[]\n}\n\nexport interface SnippetDialogSpec {\n  mode: 'NEW' | 'EDIT'\n  descriptor: ConsoleDescriptorDto\n  data: SnippetDialogData\n  cancel: () => void\n  confirm: (data: SnippetDialogData) => void\n}\n\n@Component({\n  selector: 'app-snippet-dialog',\n  templateUrl: './snippet-dialog.component.html',\n  styleUrls: ['./snippet-dialog.component.scss']\n})\nexport class SnippetDialogComponent implements OnChanges {\n\n  constructor() { }\n\n  @Input()\n  spec: SnippetDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec) {\n      this.idControl.setValue(null)\n      this.titleControl.setValue(null)\n      this.fieldsControl.controls = []\n      if (this.spec.mode === 'EDIT') {\n        this.idControl.setValue(this.spec.data.id)\n        this.titleControl.setValue(this.spec.data.title)\n      }\n      this.spec.descriptor.items.forEach(item => {\n          let value = this.spec.data.attributes[item.name]\n          this.fieldsControl.push(new FormControl(value))\n      })\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    id: new FormControl(null),\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })\n\n  get idControl():FormControl {\n    return <FormControl> this.formGroup.get('id')\n  }\n\n  get titleControl():FormControl {\n    return <FormControl> this.formGroup.get('title')\n  }\n\n  titleControlInvalid() {\n    return showValidationMessages(this.titleControl)\n  }\n\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnippetDialogData",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "descriptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConsoleDescriptorDto",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"NEW\" | \"EDIT\"",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SnippetDto",
            "id": "interface-SnippetDto-f05fa4d1eaebe653815ba15c475d7b07bff1edd02bfbf63be2eb5056e701cb414052559ca8fb3d417e2c5ffb00b26e8a5039891e926d81322f88c0f9f6ecdc72",
            "file": "src/app/api/models/snippet-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SnippetDto {\n  attributes?: { [key: string]: string };\n  id?: string;\n  title?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StructureDto",
            "id": "interface-StructureDto-a246e1ce250475bfe5a43cdc7ac75eeaf5952f168cd2123d9bc9cab73f059a6b80f632ba3cb9739e748a0eee08385e0a7dc3bf74ccbd5fbdbc5f3a3aff21dbbc",
            "file": "src/app/api/models/structure-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface StructureDto {\n  attributes?: { [key: string]: string };\n  children?: Array<StructureDto>;\n  id?: string;\n  structureType?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "attributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<StructureDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "structureType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemCheckResultDto",
            "id": "interface-SystemCheckResultDto-929c2cf314dcf3bc3a5a4e326808086e10e17aa79d6f85138815cbb9d2db28a41dda925d7def23d2c1473c74351ea0b24361b9e8454ec94a4f361a35d288ad7a",
            "file": "src/app/api/models/system-check-result-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SystemCheckResultDto {\n  messages?: Array<string>;\n}\n",
            "properties": [
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemComponentDialogData",
            "id": "interface-SystemComponentDialogData-5397992a3de4e7998df5c9ed2a574f7d5ea7bae0259fb1c66252bedea91e68eba2e663901e4141cfbddbc57120759a7711846794c5c3863d33c5c65a75b4eb23",
            "file": "src/app/settings/data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\nimport {SystemTypeDescriptorDto} from \"@fabric/models\";\n\nexport interface SystemComponentDialogData {\n    key: string,\n    label: string,\n    systemType: string,\n}\n\nexport interface SystemComponentDialogSpec {\n    systemTypes: SystemTypeDescriptorDto[]\n    keys: string[];\n    data: SystemComponentDialogData\n    cancel: () => void\n    confirm: (data: SystemComponentDialogData) => void\n}\n\n\n@Component({\n    selector: 'app-system-component-dialog',\n    templateUrl: './system-component-dialog.component.html',\n    styleUrls: ['./system-component-dialog.component.scss']\n})\nexport class SystemComponentDialogComponent implements OnInit, OnChanges {\n\n    constructor() {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SystemComponentDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n            this.formGroup.setValue(this.spec.data)\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })\n\n    public get keyControl(): FormControl {\n        return <FormControl> this.formGroup.get('key')\n    }\n\n    public keyControlInvalid() : boolean {\n        return showValidationMessages(this.keyControl)\n    }\n\n    public get labelControl(): FormControl {\n        return <FormControl> this.formGroup.get('label')\n    }\n\n    labelControlInvalid() {\n        return showValidationMessages(this.labelControl)\n    }\n\n    private get systemTypeControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemType')\n    }\n\n\n    systemTypeControlInvalid() {\n        return showValidationMessages(this.systemTypeControl)\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemComponentDialogSpec",
            "id": "interface-SystemComponentDialogSpec-5397992a3de4e7998df5c9ed2a574f7d5ea7bae0259fb1c66252bedea91e68eba2e663901e4141cfbddbc57120759a7711846794c5c3863d33c5c65a75b4eb23",
            "file": "src/app/settings/data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\nimport {SystemTypeDescriptorDto} from \"@fabric/models\";\n\nexport interface SystemComponentDialogData {\n    key: string,\n    label: string,\n    systemType: string,\n}\n\nexport interface SystemComponentDialogSpec {\n    systemTypes: SystemTypeDescriptorDto[]\n    keys: string[];\n    data: SystemComponentDialogData\n    cancel: () => void\n    confirm: (data: SystemComponentDialogData) => void\n}\n\n\n@Component({\n    selector: 'app-system-component-dialog',\n    templateUrl: './system-component-dialog.component.html',\n    styleUrls: ['./system-component-dialog.component.scss']\n})\nexport class SystemComponentDialogComponent implements OnInit, OnChanges {\n\n    constructor() {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SystemComponentDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n            this.formGroup.setValue(this.spec.data)\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })\n\n    public get keyControl(): FormControl {\n        return <FormControl> this.formGroup.get('key')\n    }\n\n    public keyControlInvalid() : boolean {\n        return showValidationMessages(this.keyControl)\n    }\n\n    public get labelControl(): FormControl {\n        return <FormControl> this.formGroup.get('label')\n    }\n\n    labelControlInvalid() {\n        return showValidationMessages(this.labelControl)\n    }\n\n    private get systemTypeControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemType')\n    }\n\n\n    systemTypeControlInvalid() {\n        return showValidationMessages(this.systemTypeControl)\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "cancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDialogData",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "keys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemTypeDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemComponentDto",
            "id": "interface-SystemComponentDto-b4658d797939768dfd2a63a9c2d73f4a87dd6d812cf968b261ee9a616d83c4039994756687e974878f53b0a9eb8718b4466148d6e923f383758b035b71207011",
            "file": "src/app/api/models/system-component-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SystemComponentDto {\n  key?: string;\n  label?: string;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemDescriptionDto",
            "id": "interface-SystemDescriptionDto-ef08509cc510340d3405574c5af7932d35d62d87fffb91d6fdfaef051059932a7c93297b4b519b2a8288cf0987b5d9acabe78281d76b7485e732601efb2cb395",
            "file": "src/app/api/models/system-description-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EnvironmentDto } from './environment-dto';\nimport { SystemComponentDto } from './system-component-dto';\nexport interface SystemDescriptionDto {\n  environments?: Array<EnvironmentDto>;\n  settings?: { [key: string]: {  } };\n  systemComponents?: Array<SystemComponentDto>;\n}\n",
            "properties": [
                {
                    "name": "environments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<EnvironmentDto>",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "systemComponents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SystemComponentDto>",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemDescriptionState",
            "id": "interface-SystemDescriptionState-73974b5622cdeea463e391e7879f83730ded55efa25ba31a1ce8360a1ad21f85f6ed1626154cb961003e97f15d2d8074e2ec8bd1cc4d52ddf3c737985e0475d2",
            "file": "src/app/settings/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport {logChangesToObservable} from '@fabric/common';\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from '@fabric/models';\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from '@fabric/services';\nimport {SettingsDialogData} from './connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component';\n\n\nexport interface Setting {\n    key: string\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string\n    environmentKey : string\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getDefaultEnvironment(): EnvironmentDto {\n        return this.systemDescription.environments[0]\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getSystemComponentByKey(systemComponentKey: string): SystemComponentDto {\n        return this.systemDescription.systemComponents.find(comp => comp.key === systemComponentKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey: string): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponentKey)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "properties": [
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemDescriptionDto",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SystemTypeDescriptorDto",
            "id": "interface-SystemTypeDescriptorDto-909d0e5701f524b0179e49a4114023cb22c9c0dee6bbebc519aba635c39b53d6dd143dc17b8e6719b41455b576081a8a486c7c32df003ab449a99a724559b00e",
            "file": "src/app/api/models/system-type-descriptor-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SettingDescriptorDto } from './setting-descriptor-dto';\nexport interface SystemTypeDescriptorDto {\n  settingDescriptors?: Array<SettingDescriptorDto>;\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "settingDescriptors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SettingDescriptorDto>",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TabularResultSet",
            "id": "interface-TabularResultSet-4ad2e6a1bab9543ac1e4a335c415f665262fb50173da9d7df0be34002926753bd9145ea4b1e16043b47fc187a6574bf13dc5eefa578329dfef8aeb12d64e6195",
            "file": "src/app/api/models/tabular-result-set.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Column } from './column';\nimport { PagingDto } from './paging-dto';\nimport { Row } from './row';\nexport interface TabularResultSet {\n  columns?: Array<Column>;\n  pagingInfo?: PagingDto;\n  pkColumns?: Array<Column>;\n  rows?: Array<Row>;\n  tableName?: string;\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Column>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pagingInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PagingDto",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "pkColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Column>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Row>",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TabularResultSetMetaDataDto",
            "id": "interface-TabularResultSetMetaDataDto-35a4db879f0527f1ea06a99ed0fac6fbfb92afe210f09399476f2df053d0e7f851e0a30813f7c840e74f5ab4e73d60f906c6f7980352e80f29a54e1728630558",
            "file": "src/app/api/models/tabular-result-set-meta-data-dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TabularResultSetMetaDataDto {\n  systemType?: string;\n}\n",
            "properties": [
                {
                    "name": "systemType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserPrincipalLookupService",
            "id": "interface-UserPrincipalLookupService-28b822800d2033ba2643faf3f568ae067ea4c51aeb057a8ef9e39c93f2df1f0e78cccb3300f1ec74f516c6daba6225536ff731ddebc147c759e48bd238022d7b",
            "file": "src/app/api/models/user-principal-lookup-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserPrincipalLookupService {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "ViewModel",
            "id": "interface-ViewModel-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "properties": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColumnPart[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "WorkspaceSettings",
            "id": "interface-WorkspaceSettings-68b8e7b596c4cba4de7d6587b46aa6bfecd346cdecf7ea5fa3fdf15d43f8b2c6229c3bf436503de94aa737552fc6f4c3a111e9598bf28ac420926e8c7ab64299",
            "file": "src/app/api/models/workspace-settings.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Path } from './path';\nexport interface WorkspaceSettings {\n  workspaceFolder?: Path;\n}\n",
            "properties": [
                {
                    "name": "workspaceFolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Path",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiConfiguration",
            "id": "injectable-ApiConfiguration-db041dc06e29ffff133e6d5e32db744ae15b56d237310730b07121a087b880ef86bfa2e2e7295842e4664c922ffe09403d7b1d5a30d7ab08039b93a07ba2355e",
            "file": "src/app/api/api-configuration.ts",
            "properties": [
                {
                    "name": "rootUrl",
                    "defaultValue": "'http://localhost:8080'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Global configuration</p>\n",
            "rawdescription": "\n\nGlobal configuration\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:8080';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n",
            "type": "injectable"
        },
        {
            "name": "BaseService",
            "id": "injectable-BaseService-aa17020d3b263477ad20c7513d92cd15eaad1b8f29c1936606cba913bbe75d1bf3c4e7c112e28da035af8391d0a69fd770e37b5cbf86ec26eb83a0e6789cdbaa",
            "file": "src/app/api/base-service.ts",
            "properties": [
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Base class for services</p>\n",
            "rawdescription": "\n\nBase class for services\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "rootUrl": {
                    "name": "rootUrl",
                    "setSignature": {
                        "name": "rootUrl",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "rawdescription": "\n\nSets the root URL for API operations in this service.\n",
                        "description": "<p>Sets the root URL for API operations in this service.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "rootUrl",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "rootUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 24,
                        "rawdescription": "\n\nReturns the root url for all operations in this service. If not set directly in this\nservice, will fallback to `ApiConfiguration.rootUrl`.\n",
                        "description": "<p>Returns the root url for all operations in this service. If not set directly in this\nservice, will fallback to <code>ApiConfiguration.rootUrl</code>.</p>\n"
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "CommandControllerService",
            "id": "injectable-CommandControllerService-fd5fcf196969d18a7bac1e18997be23d157cf6c9794a4f6813b9ae2fa2d7fcbde57adddbd80611d918ab327832d64fa8dfd0ab7ab65d1b35052a0a3eb6a15e09",
            "file": "src/app/api/services/command-controller.service.ts",
            "properties": [
                {
                    "name": "GetExecutionInfoUsingGetPath",
                    "defaultValue": "'/api/metamodel/info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getExecutionInfoUsingGet</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nPath part for operation getExecutionInfoUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getExecutionInfoUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ExecutionDto>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetExecutionInfo.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getExecutionInfoUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getExecutionInfo.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getExecutionInfoUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExecutionInfoUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ExecutionDto>>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetExecutionInfo.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getExecutionInfoUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getExecutionInfo.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getExecutionInfoUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Command Controller</p>\n",
            "rawdescription": "\n\nCommand Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ExecutionDto } from '../models/execution-dto';\n\n\n/**\n * Command Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CommandControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getExecutionInfoUsingGet\n   */\n  static readonly GetExecutionInfoUsingGetPath = '/api/metamodel/info';\n\n  /**\n   * getExecutionInfo.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getExecutionInfoUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExecutionInfoUsingGet$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<ExecutionDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CommandControllerService.GetExecutionInfoUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ExecutionDto>;\n      })\n    );\n  }\n\n  /**\n   * getExecutionInfo.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getExecutionInfoUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getExecutionInfoUsingGet(params?: {\n    id?: string;\n  }): Observable<ExecutionDto> {\n\n    return this.getExecutionInfoUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ExecutionDto>) => r.body as ExecutionDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ConnectionControllerService",
            "id": "injectable-ConnectionControllerService-3ed4c6abeb2cbf09a17f906699c59edd5be76f2e29619d2fc1c53e3ea27d57cfb675b2973eeb65b42232df74ad17f096c0e3b3fd3bee6e96ebc205a6665bfa06",
            "file": "src/app/api/services/connection-controller.service.ts",
            "properties": [
                {
                    "name": "TestConnectionUsingPostPath",
                    "defaultValue": "'/api/connection'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation testConnectionUsingPost</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPath part for operation testConnectionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "testConnectionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConnectionTestResponseDto>",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntestConnection.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `testConnectionUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>testConnection.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>testConnectionUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testConnectionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ConnectionTestResponseDto>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntestConnection.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `testConnectionUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>testConnection.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>testConnectionUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Connection Controller</p>\n",
            "rawdescription": "\n\nConnection Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ConnectionTestRequestDto } from '../models/connection-test-request-dto';\nimport { ConnectionTestResponseDto } from '../models/connection-test-response-dto';\n\n\n/**\n * Connection Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConnectionControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation testConnectionUsingPost\n   */\n  static readonly TestConnectionUsingPostPath = '/api/connection';\n\n  /**\n   * testConnection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `testConnectionUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  testConnectionUsingPost$Response(params?: {\n    body?: ConnectionTestRequestDto\n  }): Observable<StrictHttpResponse<ConnectionTestResponseDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConnectionControllerService.TestConnectionUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ConnectionTestResponseDto>;\n      })\n    );\n  }\n\n  /**\n   * testConnection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `testConnectionUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  testConnectionUsingPost(params?: {\n    body?: ConnectionTestRequestDto\n  }): Observable<ConnectionTestResponseDto> {\n\n    return this.testConnectionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ConnectionTestResponseDto>) => r.body as ConnectionTestResponseDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ConnectionStatusService",
            "id": "injectable-ConnectionStatusService-31378b3bf8a8ff1b92e9ffc39d7f4a02ebfddee8d1bb5c8f68d96b49c182fe97a728ecbcf8dcae98768606ce8d6f15569d405d490bc13a84dd3f476bbdba311c",
            "file": "src/app/common/connection-status/connection-status.service.ts",
            "properties": [
                {
                    "name": "status$",
                    "defaultValue": "new BehaviorSubject<ConnectionStatus>({ status: 'OK', msg: null} )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "setStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "ConnectionStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ConnectionStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showToast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConnectionStatus} from \"../styleguide/status/status.component\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {TOAST_LEVEL, ToastService} from \"../toast/toast.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionStatusService {\n\n  status$ = new BehaviorSubject<ConnectionStatus>({ status: 'OK', msg: null} )\n\n  constructor(private toastService: ToastService) { }\n\n  setStatus(status: ConnectionStatus) {\n    this.status$.next(status)\n    this.showToast()\n  }\n\n  showToast() {\n    let status = this.status$.value\n    if (status.status==='Problem') {\n      this.toastService.add(TOAST_LEVEL.danger, status.msg)\n    }\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConsoleControllerService",
            "id": "injectable-ConsoleControllerService-59223679118447658dcaa213464539634fdfdc052ad7db7dd14d08bde128da5b86a538ee2a384bd9a37c690b9d2c341b8572c81c898c4f8d634d3a100d2005b5",
            "file": "src/app/api/services/console-controller.service.ts",
            "properties": [
                {
                    "name": "CreateSnippetUsingPostPath",
                    "defaultValue": "'/api/console/snippet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createSnippetUsingPost</p>\n",
                    "line": 271,
                    "rawdescription": "\n\nPath part for operation createSnippetUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "DeleteSnippetUsingDeletePath",
                    "defaultValue": "'/api/console/snippet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation deleteSnippetUsingDelete</p>\n",
                    "line": 336,
                    "rawdescription": "\n\nPath part for operation deleteSnippetUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetDescriptorUsingGetPath",
                    "defaultValue": "'/api/console/descriptor'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getDescriptorUsingGet</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nPath part for operation getDescriptorUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetNavigationUsingPostPath",
                    "defaultValue": "'/api/console/navigation'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getNavigationUsingPost</p>\n",
                    "line": 98,
                    "rawdescription": "\n\nPath part for operation getNavigationUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSnippetsUsingGetPath",
                    "defaultValue": "'/api/console/snippets'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSnippetsUsingGet</p>\n",
                    "line": 409,
                    "rawdescription": "\n\nPath part for operation getSnippetsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RunRequestUsingPostPath",
                    "defaultValue": "'/api/console/run'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation runRequestUsingPost</p>\n",
                    "line": 152,
                    "rawdescription": "\n\nPath part for operation runRequestUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "UpdateSnippetUsingPutPath",
                    "defaultValue": "'/api/console/snippet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation updateSnippetUsingPut</p>\n",
                    "line": 206,
                    "rawdescription": "\n\nPath part for operation updateSnippetUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createSnippetUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateSnippet.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createSnippetUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>createSnippet.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createSnippetUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSnippetUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateSnippet.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createSnippetUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>createSnippet.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createSnippetUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSnippetUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 388,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteSnippet.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `deleteSnippetUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteSnippet.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>deleteSnippetUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSnippetUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteSnippet.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `deleteSnippetUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteSnippet.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>deleteSnippetUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescriptorUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ConsoleDescriptorDto>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDescriptor.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getDescriptorUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDescriptor.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getDescriptorUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescriptorUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ConsoleDescriptorDto>>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetDescriptor.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getDescriptorUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getDescriptor.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getDescriptorUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<NavItem>>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigation.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getNavigationUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>getNavigation.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getNavigationUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<NavItem>>>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigation.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getNavigationUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>getNavigation.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getNavigationUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSnippetsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<SnippetDto>>",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSnippets.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSnippetsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSnippets.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSnippetsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSnippetsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<SnippetDto>>>",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSnippets.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSnippetsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSnippets.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSnippetsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRequestUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<QueryCompositeDto>",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrunRequest.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `runRequestUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>runRequest.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>runRequestUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRequestUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<QueryCompositeDto>>",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nrunRequest.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `runRequestUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>runRequest.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>runRequestUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSnippetUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdateSnippet.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `updateSnippetUsingPut$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>updateSnippet.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>updateSnippetUsingPut$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSnippetUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdateSnippet.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `updateSnippetUsingPut()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>updateSnippet.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>updateSnippetUsingPut()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Console Controller</p>\n",
            "rawdescription": "\n\nConsole Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ConsoleDescriptorDto } from '../models/console-descriptor-dto';\nimport { NavItem } from '../models/nav-item';\nimport { NavigationRequest } from '../models/navigation-request';\nimport { QueryCompositeDto } from '../models/query-composite-dto';\nimport { SnippetDto } from '../models/snippet-dto';\n\n\n/**\n * Console Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConsoleControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getDescriptorUsingGet\n   */\n  static readonly GetDescriptorUsingGetPath = '/api/console/descriptor';\n\n  /**\n   * getDescriptor.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getDescriptorUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDescriptorUsingGet$Response(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n  }): Observable<StrictHttpResponse<ConsoleDescriptorDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.GetDescriptorUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemType', params.systemType, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ConsoleDescriptorDto>;\n      })\n    );\n  }\n\n  /**\n   * getDescriptor.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getDescriptorUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getDescriptorUsingGet(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n  }): Observable<ConsoleDescriptorDto> {\n\n    return this.getDescriptorUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<ConsoleDescriptorDto>) => r.body as ConsoleDescriptorDto)\n    );\n  }\n\n  /**\n   * Path part for operation getNavigationUsingPost\n   */\n  static readonly GetNavigationUsingPostPath = '/api/console/navigation';\n\n  /**\n   * getNavigation.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getNavigationUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  getNavigationUsingPost$Response(params?: {\n    body?: NavigationRequest\n  }): Observable<StrictHttpResponse<Array<NavItem>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.GetNavigationUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<NavItem>>;\n      })\n    );\n  }\n\n  /**\n   * getNavigation.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getNavigationUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  getNavigationUsingPost(params?: {\n    body?: NavigationRequest\n  }): Observable<Array<NavItem>> {\n\n    return this.getNavigationUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<NavItem>>) => r.body as Array<NavItem>)\n    );\n  }\n\n  /**\n   * Path part for operation runRequestUsingPost\n   */\n  static readonly RunRequestUsingPostPath = '/api/console/run';\n\n  /**\n   * runRequest.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `runRequestUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  runRequestUsingPost$Response(params?: {\n    body?: QueryCompositeDto\n  }): Observable<StrictHttpResponse<QueryCompositeDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.RunRequestUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<QueryCompositeDto>;\n      })\n    );\n  }\n\n  /**\n   * runRequest.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `runRequestUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  runRequestUsingPost(params?: {\n    body?: QueryCompositeDto\n  }): Observable<QueryCompositeDto> {\n\n    return this.runRequestUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<QueryCompositeDto>) => r.body as QueryCompositeDto)\n    );\n  }\n\n  /**\n   * Path part for operation updateSnippetUsingPut\n   */\n  static readonly UpdateSnippetUsingPutPath = '/api/console/snippet';\n\n  /**\n   * updateSnippet.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `updateSnippetUsingPut()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateSnippetUsingPut$Response(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n    body?: SnippetDto\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.UpdateSnippetUsingPutPath, 'put');\n    if (params) {\n      rb.query('systemType', params.systemType, {\"style\":\"form\"});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * updateSnippet.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `updateSnippetUsingPut$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  updateSnippetUsingPut(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n    body?: SnippetDto\n  }): Observable<void> {\n\n    return this.updateSnippetUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation createSnippetUsingPost\n   */\n  static readonly CreateSnippetUsingPostPath = '/api/console/snippet';\n\n  /**\n   * createSnippet.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createSnippetUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createSnippetUsingPost$Response(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n    body?: SnippetDto\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.CreateSnippetUsingPostPath, 'post');\n    if (params) {\n      rb.query('systemType', params.systemType, {\"style\":\"form\"});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * createSnippet.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createSnippetUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createSnippetUsingPost(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n    body?: SnippetDto\n  }): Observable<void> {\n\n    return this.createSnippetUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation deleteSnippetUsingDelete\n   */\n  static readonly DeleteSnippetUsingDeletePath = '/api/console/snippet';\n\n  /**\n   * deleteSnippet.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteSnippetUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteSnippetUsingDelete$Response(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n\n    /**\n     * id\n     */\n    id?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.DeleteSnippetUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('systemType', params.systemType, {\"style\":\"form\"});\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * deleteSnippet.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteSnippetUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteSnippetUsingDelete(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n\n    /**\n     * id\n     */\n    id?: string;\n  }): Observable<void> {\n\n    return this.deleteSnippetUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getSnippetsUsingGet\n   */\n  static readonly GetSnippetsUsingGetPath = '/api/console/snippets';\n\n  /**\n   * getSnippets.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSnippetsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSnippetsUsingGet$Response(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n  }): Observable<StrictHttpResponse<Array<SnippetDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ConsoleControllerService.GetSnippetsUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemType', params.systemType, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SnippetDto>>;\n      })\n    );\n  }\n\n  /**\n   * getSnippets.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSnippetsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSnippetsUsingGet(params?: {\n\n    /**\n     * systemType\n     */\n    systemType?: string;\n  }): Observable<Array<SnippetDto>> {\n\n    return this.getSnippetsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SnippetDto>>) => r.body as Array<SnippetDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ConsoleService",
            "id": "injectable-ConsoleService-f013a931eee25b4e1ca8769ee6d3958e59718c6f20956ae479af7449a367dab6ffa0a3eeabb05798ec961163e0fc32fcf00df639f7b4279f0a15a26543f982af",
            "file": "src/app/console-page/console.service.ts",
            "properties": [
                {
                    "name": "idCounter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "output$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.output),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "root$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.rootQueryComposite),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "selection$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.selection),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<ConsoleState>(this.initialConsoleState())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "addQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addSnippet",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SnippetDto[]>",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearOutput",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createQueryComposite",
                    "args": [],
                    "optional": false,
                    "returnType": "QueryCompositeDto",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "deleteSnippet",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editSnippet",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initialConsoleState",
                    "args": [],
                    "optional": false,
                    "returnType": "ConsoleState",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadDescriptor",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ConsoleDescriptorDto>",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNavItems",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<NavItem[]>",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSnippets",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SnippetDto[]>",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRequest",
                    "args": [
                        {
                            "name": "queryComposite",
                            "type": "QueryCompositeDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "queryComposite",
                            "type": "QueryCompositeDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConsoleControllerService} from \"@fabric/services\";\nimport {ConsoleDescriptorDto, NavItem, QueryCompositeDto, SnippetDto, TabularResultSet} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\nexport interface Output {\n    jsonOutput: string\n    stackTraceOutput: string\n    tabularResponse: TabularResultSet\n}\n\ninterface ConsoleState {\n    rootQueryComposite: QueryCompositeDto\n    selection: QueryCompositeDto\n    output: Output\n\n}\n\n\n\n@Injectable()\nexport class ConsoleService {\n\n    constructor(private consoleControllerService: ConsoleControllerService) {\n        this.init()\n    }\n\n    subscriptions = []\n\n    init() {\n        this.subscriptions.push(logChangesToObservable('store::output$ >>', this.output$))\n    }\n\n    private store = new BehaviorSubject<ConsoleState>(this.initialConsoleState())\n\n    root$ = this.store.pipe(\n        map(state => state.rootQueryComposite),\n        distinctUntilChanged(),\n    )\n\n    selection$ = this.store.pipe(\n        map(state => state.selection),\n        distinctUntilChanged(),\n    )\n\n    output$ = this.store.pipe(\n        map(state => state.output),\n        distinctUntilChanged(),\n    )\n\n    private initialConsoleState(): ConsoleState  {\n         let rootQueryComposite = this.createQueryComposite()\n         return {\n             rootQueryComposite,\n             selection: rootQueryComposite,\n             output: {\n                 jsonOutput: null,\n                 stackTraceOutput: null,\n                 tabularResponse: null\n             }\n         }\n    }\n\n    private idCounter: 0\n\n    private createQueryComposite(): QueryCompositeDto {\n        return {\n            id: \"\" + this.idCounter++,\n            children: []\n        }\n    }\n\n    addQuery() {\n    }\n\n    clearOutput() {\n        this.store.next({\n            ... this.store.value,\n            output: {\n                jsonOutput: null,\n                stackTraceOutput: null,\n                tabularResponse: null\n            }\n        })\n    }\n\n\n    loadDescriptor(systemType: string) : Promise<ConsoleDescriptorDto>{\n        return this.consoleControllerService.getDescriptorUsingGet({systemType})\n            .toPromise()\n    }\n\n    runRequest(queryComposite: QueryCompositeDto) {\n        this.clearOutput();\n        return this.consoleControllerService.runRequestUsingPost({\n            body: queryComposite\n        }).subscribe((dto)=> {\n\n            this.store.value.selection.result = dto.result\n\n            let result = dto.result\n            let output\n            switch (result.resultType) {\n                case 'JSON': {\n                    output = {\n                        jsonOutput : JSON.parse(result.content)\n                    }\n                    break\n                }\n                case 'STACKTRACE': {\n                    output = {\n                        stackTraceOutput : result.content\n                    }\n                    break\n                }\n                case 'TABULAR' : {\n                    output = {\n                        tabularResponse : result.tabular\n                    }\n                }\n            }\n            this.store.next({\n                ... this.store.value,\n                output\n            })\n\n            if (result.resultType != 'STACKTRACE') {\n                // this.addHistoryItem(attributes)\n            }\n\n\n        })\n    }\n\n    loadSnippets(systemType:string): Promise<SnippetDto[]> {\n        return this.consoleControllerService.getSnippetsUsingGet({systemType}).toPromise()\n    }\n\n    addSnippet(title: string, systemType: string, attributes: {}): Promise<SnippetDto[]> {\n        return this.consoleControllerService.createSnippetUsingPost({\n            systemType,\n            body: {\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n\n    }\n\n    editSnippet(id: string, title: string, systemType: string, attributes: {}) {\n        return this.consoleControllerService.updateSnippetUsingPut({\n            systemType,\n            body: {\n                id,\n                title,\n                attributes\n            }\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n    }\n\n    deleteSnippet(id: string, systemType: string) {\n        return this.consoleControllerService.deleteSnippetUsingDelete({\n            systemType,\n            id\n        }).toPromise().then(()=> this.loadSnippets(systemType))\n    }\n\n    loadNavItems(systemComponentKey: string): Promise<NavItem[]>  {\n        return this.consoleControllerService.getNavigationUsingPost({body: {\n            systemComponentKey,\n        }}).toPromise()\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "consoleControllerService",
                        "type": "ConsoleControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "consoleControllerService",
                        "type": "ConsoleControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HealthCheckService",
            "id": "injectable-HealthCheckService-f670448e7816991e6cae589effbe12c9e0ce655d4f480253d4a0bec81beb112b7aef737626974a2f9075463498df7dcda6e204379e73a16d5ad1665c9ae01885",
            "file": "src/app/common/health-check.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "doHealthCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {SystemControllerService} from \"@fabric/services\";\nimport {TOAST_LEVEL, ToastService} from \"./toast/toast.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HealthCheckService {\n\n  constructor(private systemControllerService: SystemControllerService, private toastService: ToastService) {\n    this.doHealthCheck();\n  }\n\n  doHealthCheck() {\n    this.systemControllerService.checkSystemConfigUsingGet().subscribe((result) => {\n      if (result && result.messages && result.messages.length > 0) {\n        result.messages.forEach(message => this.toastService.add(TOAST_LEVEL.danger, message))\n      }\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemControllerService",
                        "type": "SystemControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "systemControllerService",
                        "type": "SystemControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetaDataService",
            "id": "injectable-MetaDataService-5bff41d20621ad54f8c0ecd950b7f137599b679487461d108dd51f1ef85b4d7c07ac673a0080f2475035c3b53cd92d1857944bbc0337c4770dd597f3df69ab83",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-data.service.ts",
            "properties": [
                {
                    "name": "metaModel$",
                    "defaultValue": "this.store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MetaModelState>({metaModel: null, fetching: false})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchMetaModel",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "environmentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "environmentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadMetaModel",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MetaModelControllerService} from \"@fabric/services\";\nimport {EntityDto, SystemComponentDto} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\ninterface MetaModelState {\n    metaModel: EntityDto,\n    fetching: boolean\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MetaDataService {\n\n    private store = new BehaviorSubject<MetaModelState>({metaModel: null, fetching: false})\n\n    metaModel$ = this.store\n\n\n    constructor(private metaModelControllerService: MetaModelControllerService) {\n        this.init()\n    }\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('store::metaModel$ >>', this.metaModel$))\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    public loadMetaModel(envKey: string, systemComponentKey: string) {\n        return this.metaModelControllerService.getMetaModelAsEntityUsingGet({envKey, systemComponentKey}).subscribe(entityDto => {\n            this.store.next({metaModel: entityDto, fetching: false})\n        })\n    }\n\n    public fetchMetaModel(systemComponent: SystemComponentDto, environmentKey: string) {\n        this.store.next({metaModel: null, fetching: true})\n        return this.metaModelControllerService.createMetaModelUsingPost({\n            environmentKey,\n            systemComponentKey: systemComponent.key\n        }).subscribe(result => {\n            this.loadMetaModel(environmentKey, systemComponent.key)\n        })\n    }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "metaModelControllerService",
                        "type": "MetaModelControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "metaModelControllerService",
                        "type": "MetaModelControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetaModelControllerService",
            "id": "injectable-MetaModelControllerService-db14e166e6fb97aeda9072efce32be974216c7b1203c07f6f40f7e3674a73dbfca8cd0f6ab32423c1f30bc1e9d4744007b3306e0ab97a799d23162e5b0cd43db",
            "file": "src/app/api/services/meta-model-controller.service.ts",
            "properties": [
                {
                    "name": "CreateMetaModelUsingPostPath",
                    "defaultValue": "'/api/metamodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createMetaModelUsingPost</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPath part for operation createMetaModelUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetMetaModelAsEntityUsingGetPath",
                    "defaultValue": "'/api/metamodel/entity/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getMetaModelAsEntityUsingGet</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nPath part for operation getMetaModelAsEntityUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createMetaModelUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MetaModelId>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMetaModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createMetaModelUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createMetaModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createMetaModelUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMetaModelUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MetaModelId>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreateMetaModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createMetaModelUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>createMetaModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createMetaModelUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetaModelAsEntityUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<EntityDto>",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMetaModelAsEntity.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getMetaModelAsEntityUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMetaModelAsEntity.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getMetaModelAsEntityUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetaModelAsEntityUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<EntityDto>>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMetaModelAsEntity.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getMetaModelAsEntityUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMetaModelAsEntity.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getMetaModelAsEntityUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Meta Model Controller</p>\n",
            "rawdescription": "\n\nMeta Model Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { EntityDto } from '../models/entity-dto';\nimport { MetaModelId } from '../models/meta-model-id';\n\n\n/**\n * Meta Model Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetaModelControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation createMetaModelUsingPost\n   */\n  static readonly CreateMetaModelUsingPostPath = '/api/metamodel';\n\n  /**\n   * createMetaModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createMetaModelUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createMetaModelUsingPost$Response(params?: {\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<MetaModelId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MetaModelControllerService.CreateMetaModelUsingPostPath, 'post');\n    if (params) {\n      rb.query('environmentKey', params.environmentKey, {\"style\":\"form\"});\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MetaModelId>;\n      })\n    );\n  }\n\n  /**\n   * createMetaModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createMetaModelUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  createMetaModelUsingPost(params?: {\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<MetaModelId> {\n\n    return this.createMetaModelUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<MetaModelId>) => r.body as MetaModelId)\n    );\n  }\n\n  /**\n   * Path part for operation getMetaModelAsEntityUsingGet\n   */\n  static readonly GetMetaModelAsEntityUsingGetPath = '/api/metamodel/entity/';\n\n  /**\n   * getMetaModelAsEntity.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getMetaModelAsEntityUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMetaModelAsEntityUsingGet$Response(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<EntityDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MetaModelControllerService.GetMetaModelAsEntityUsingGetPath, 'get');\n    if (params) {\n      rb.query('envKey', params.envKey, {\"style\":\"form\"});\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<EntityDto>;\n      })\n    );\n  }\n\n  /**\n   * getMetaModelAsEntity.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getMetaModelAsEntityUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMetaModelAsEntityUsingGet(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<EntityDto> {\n\n    return this.getMetaModelAsEntityUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<EntityDto>) => r.body as EntityDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-c7e2a67208794340bf0d0ce9557a7d3df755014a832dab05990cf4704905fc9cd25b5b1084ed5dd1621bde18459144f43edc59ff415a548130e37518b55cabaf",
            "file": "src/app/common/modal/modal-service.ts",
            "properties": [
                {
                    "name": "modals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modal",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n// based on https://github.com/cornflourblue/angular-10-custom-modal\n// licence MIT\n\n@Injectable({providedIn: 'root'})\nexport class ModalService {\n  private modals: any[] = [];\n\n  add(modal: any) {\n    // add modal to array of active modals\n    this.modals.push(modal);\n  }\n\n  remove(id: string) {\n    // remove modal from array of active modals\n    this.modals = this.modals.filter(x => x.id !== id);\n  }\n\n  open(id: string) {\n    // open modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    modal.open();\n  }\n\n  close(id: string) {\n    // close modal specified by id\n    const modal = this.modals.find(x => x.id === id);\n    modal.close();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "MongoMetaModelService",
            "id": "injectable-MongoMetaModelService-0ad0dedcaf8f91a225cdf406e9f20bd07e353fb1a5578a5b3f830a1dd9bc00b902dd1f5b9e7354d7bca555dffc4a3590bde83150a8508ff527c89b8b70c648d5",
            "file": "src/app/settings/meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
            "properties": [
                {
                    "name": "metaModels$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.modelMap),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MongoMetaModelStoreState>({ modelMap: new Map() })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoMetaModel, MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoMetaModelStoreState {\n  modelMap: Map<String, MongoMetaModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoMetaModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoMetaModelStoreState>({ modelMap: new Map() })\n\n  metaModels$ = this.store.pipe(\n      map(state => state.modelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::metaModels$ >>', this.metaModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getMetaModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoMetaModel> = this.store.getValue().modelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ modelMap : new Map<String, MongoMetaModel>(map) })\n    })\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MongoNavigationModelService",
            "id": "injectable-MongoNavigationModelService-4f46ff1e41869ec3bc8d099bb9c91a77db6fd219a9c1e73283bbb4784ef3cbf8e8963746dd44ae2ef0a37fb5742c61d60558364eaff50172ebf7eb1fa6d18b2d",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
            "properties": [
                {
                    "name": "navigationModels$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.navigationModelMap),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MongoNavigationModelStoreState>({ navigationModelMap: new Map() })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoNavigationModel, MongoSnapshot} from \"@fabric/models\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {logChangesToObservable} from \"@fabric/common\";\n\n\ninterface MongoNavigationModelStoreState {\n  navigationModelMap: Map<String, MongoNavigationModel>\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoNavigationModelService implements  OnDestroy{\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<MongoNavigationModelStoreState>({ navigationModelMap: new Map() })\n\n  navigationModels$ = this.store.pipe(\n      map(state => state.navigationModelMap),\n      distinctUntilChanged(),\n  )\n\n  private subscriptions: Subscription[] = []\n\n  private init() {\n    this.subscriptions.push(logChangesToObservable('store::navigationModels$ >>', this.navigationModels$))\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  public load(systemComponentKey: string) {\n    this.mongoSnapshotControllerService.getNavigationModelUsingGet({systemComponentKey}).subscribe(dto => {\n      let map : Map<String, MongoNavigationModel> = this.store.getValue().navigationModelMap\n      map.set(systemComponentKey, dto)\n      this.store.next({ navigationModelMap : new Map<String, MongoNavigationModel>(map) })\n    })\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MongoService",
            "id": "injectable-MongoService-18e76ce4072761643ecae86ef50d89e06abf2f29e3d04c9e5f2ea7441501f354e194593c4ab42e30cb438e39a4a502517ba102e709ad1946b8ef037dda59801e",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo.service.ts",
            "properties": [
                {
                    "name": "mongoSnapshot$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.mongoSnapshot),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<MongoSnapshotStoreState>({ mongoSnapshot: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "componentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "componentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {MongoSnapshotControllerService} from \"@fabric/services\";\nimport {MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\n\n\ninterface MongoSnapshotStoreState {\n  mongoSnapshot: MongoSnapshot\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MongoService {\n\n  constructor(private mongoSnapshotControllerService: MongoSnapshotControllerService) { }\n\n  private store = new BehaviorSubject<MongoSnapshotStoreState>({ mongoSnapshot: null})\n\n  mongoSnapshot$ = this.store.pipe(\n      map(state => state.mongoSnapshot),\n      distinctUntilChanged(),\n  )\n\n  public load(snapshotId: SnapshotId, componentKey: string) {\n    this.mongoSnapshotControllerService.getMongoSnapshotUsingGet({ id: snapshotId.id, componentKey}).subscribe(mongoSnapshot =>\n      this.store.next({ mongoSnapshot })\n    )\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "mongoSnapshotControllerService",
                        "type": "MongoSnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MongoSnapshotControllerService",
            "id": "injectable-MongoSnapshotControllerService-c0cb82c10e484565f23af0f7649ca123b70e67dab201915d45bcd93a8660f01665ce163b66138930422cb6bb803e2cd05aecee312489d620a28f7dcff6738604",
            "file": "src/app/api/services/mongo-snapshot-controller.service.ts",
            "properties": [
                {
                    "name": "GetMetaModelUsingGetPath",
                    "defaultValue": "'/api/mongo/metamodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getMetaModelUsingGet</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPath part for operation getMetaModelUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetMongoSnapshotUsingGetPath",
                    "defaultValue": "'/api/mongo/snapshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getMongoSnapshotUsingGet</p>\n",
                    "line": 169,
                    "rawdescription": "\n\nPath part for operation getMongoSnapshotUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetNavigationModelUsingGetPath",
                    "defaultValue": "'/api/mongo/navigationmodel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getNavigationModelUsingGet</p>\n",
                    "line": 107,
                    "rawdescription": "\n\nPath part for operation getNavigationModelUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getMetaModelUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MongoMetaModel>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMetaModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getMetaModelUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMetaModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getMetaModelUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetaModelUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MongoMetaModel>>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMetaModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getMetaModelUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMetaModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getMetaModelUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMongoSnapshotUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MongoSnapshot>",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMongoSnapshot.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getMongoSnapshotUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMongoSnapshot.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getMongoSnapshotUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMongoSnapshotUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MongoSnapshot>>",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetMongoSnapshot.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getMongoSnapshotUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getMongoSnapshot.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getMongoSnapshotUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationModelUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MongoNavigationModel>",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigationModel.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getNavigationModelUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getNavigationModel.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getNavigationModelUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNavigationModelUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<MongoNavigationModel>>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetNavigationModel.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getNavigationModelUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getNavigationModel.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getNavigationModelUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Mongo Snapshot Controller</p>\n",
            "rawdescription": "\n\nMongo Snapshot Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { MongoMetaModel } from '../models/mongo-meta-model';\nimport { MongoNavigationModel } from '../models/mongo-navigation-model';\nimport { MongoSnapshot } from '../models/mongo-snapshot';\n\n\n/**\n * Mongo Snapshot Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MongoSnapshotControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getMetaModelUsingGet\n   */\n  static readonly GetMetaModelUsingGetPath = '/api/mongo/metamodel';\n\n  /**\n   * getMetaModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getMetaModelUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMetaModelUsingGet$Response(params?: {\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<MongoMetaModel>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MongoSnapshotControllerService.GetMetaModelUsingGetPath, 'get');\n    if (params) {\n      rb.query('environmentKey', params.environmentKey, {\"style\":\"form\"});\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MongoMetaModel>;\n      })\n    );\n  }\n\n  /**\n   * getMetaModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getMetaModelUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMetaModelUsingGet(params?: {\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<MongoMetaModel> {\n\n    return this.getMetaModelUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<MongoMetaModel>) => r.body as MongoMetaModel)\n    );\n  }\n\n  /**\n   * Path part for operation getNavigationModelUsingGet\n   */\n  static readonly GetNavigationModelUsingGetPath = '/api/mongo/navigationmodel';\n\n  /**\n   * getNavigationModel.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getNavigationModelUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getNavigationModelUsingGet$Response(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<MongoNavigationModel>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MongoSnapshotControllerService.GetNavigationModelUsingGetPath, 'get');\n    if (params) {\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MongoNavigationModel>;\n      })\n    );\n  }\n\n  /**\n   * getNavigationModel.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getNavigationModelUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getNavigationModelUsingGet(params?: {\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<MongoNavigationModel> {\n\n    return this.getNavigationModelUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<MongoNavigationModel>) => r.body as MongoNavigationModel)\n    );\n  }\n\n  /**\n   * Path part for operation getMongoSnapshotUsingGet\n   */\n  static readonly GetMongoSnapshotUsingGetPath = '/api/mongo/snapshot';\n\n  /**\n   * getMongoSnapshot.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getMongoSnapshotUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMongoSnapshotUsingGet$Response(params?: {\n    id?: string;\n\n    /**\n     * componentKey\n     */\n    componentKey?: string;\n  }): Observable<StrictHttpResponse<MongoSnapshot>> {\n\n    const rb = new RequestBuilder(this.rootUrl, MongoSnapshotControllerService.GetMongoSnapshotUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n      rb.query('componentKey', params.componentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<MongoSnapshot>;\n      })\n    );\n  }\n\n  /**\n   * getMongoSnapshot.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getMongoSnapshotUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getMongoSnapshotUsingGet(params?: {\n    id?: string;\n\n    /**\n     * componentKey\n     */\n    componentKey?: string;\n  }): Observable<MongoSnapshot> {\n\n    return this.getMongoSnapshotUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<MongoSnapshot>) => r.body as MongoSnapshot)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-5dad18e5887fd8e5c29232e84b41bf8d337f500713b1dc900db724908c1d40f83ab1a2923af0621d5283ed25613bd6818d1fb4f5824d151df52b334d3c4d5526",
            "file": "src/app/navigation-page/navigation.service.ts",
            "properties": [
                {
                    "name": "tree",
                    "defaultValue": "new BehaviorSubject<NavTreeItemDto>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tree$",
                    "defaultValue": "this.tree.pipe(\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "loadNavItems",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "navItem",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "navItem",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {NavItem} from \"@fabric/models\";\nimport {ConsoleControllerService} from \"@fabric/services\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {distinctUntilChanged} from \"rxjs/operators\";\nimport {NavTreeItemDto} from \"./navigation-tree/navigation-tree.component\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n\n  constructor(private consoleControllerService : ConsoleControllerService) { }\n\n  private tree = new BehaviorSubject<NavTreeItemDto>(null)\n\n  tree$ = this.tree.pipe(\n      distinctUntilChanged(),\n  )\n\n  loadNavItems(systemComponentKey: string, navItem: NavItem) {\n    return this.consoleControllerService.getNavigationUsingPost({body: {\n        systemComponentKey,\n      }}).subscribe(navItems => {\n        if (!navItem) {\n          this.tree.next({\n            root: true,\n            navItems,\n            children: [\n              {\n                label: 'test',\n                root: false,\n                columns: ['AAAAAAAAAAAAAAAAA', 'BBBBBBBBBBBBBBBB', 'CCCCCCCCCCCCCCCCCCCC'],\n                rows: [],\n                navItems: navItems\n              }\n            ]\n          })\n        }\n    })\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "consoleControllerService",
                        "type": "ConsoleControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "consoleControllerService",
                        "type": "ConsoleControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RedirectToAngularService",
            "id": "injectable-RedirectToAngularService-a8bb9da481d6bdabe9afb4bcd39d44cc66b2f28688d386b93cbc12c09bafc3b0700bc962e334190de643d86e33fd041fb8bb4f33a917361be72fb44bbb14e171",
            "file": "src/app/api/services/redirect-to-angular.service.ts",
            "properties": [
                {
                    "name": "RedirectUsingDeletePath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingDelete</p>\n",
                    "line": 184,
                    "rawdescription": "\n\nPath part for operation redirectUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingGetPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingGet</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nPath part for operation redirectUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingHeadPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingHead</p>\n",
                    "line": 286,
                    "rawdescription": "\n\nPath part for operation redirectUsingHead\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingOptionsPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingOptions</p>\n",
                    "line": 235,
                    "rawdescription": "\n\nPath part for operation redirectUsingOptions\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingPatchPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingPatch</p>\n",
                    "line": 337,
                    "rawdescription": "\n\nPath part for operation redirectUsingPatch\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingPostPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingPost</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nPath part for operation redirectUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingPutPath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingPut</p>\n",
                    "line": 82,
                    "rawdescription": "\n\nPath part for operation redirectUsingPut\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "RedirectUsingTracePath",
                    "defaultValue": "'/fe/**'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation redirectUsingTrace</p>\n",
                    "line": 388,
                    "rawdescription": "\n\nPath part for operation redirectUsingTrace\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "redirectUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingHead",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingHead$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingHead$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingHead$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingHead()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingHead()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingOptions",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingOptions$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingOptions$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingOptions$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingOptions()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingOptions()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPatch",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingPatch$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingPatch$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPatch$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingPatch()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingPatch()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPut",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingPut$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingPut$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingPut$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingPut()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingPut()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingTrace",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 428,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `redirectUsingTrace$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>redirectUsingTrace$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redirectUsingTrace$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<string>>",
                    "typeParameters": [],
                    "line": 400,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nredirect.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `redirectUsingTrace()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>redirect.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>redirectUsingTrace()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Redirect To Angular</p>\n",
            "rawdescription": "\n\nRedirect To Angular\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n\n/**\n * Redirect To Angular\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectToAngularService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation redirectUsingGet\n   */\n  static readonly RedirectUsingGetPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingGet(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingPut\n   */\n  static readonly RedirectUsingPutPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingPut()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPut$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingPutPath, 'put');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingPut$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPut(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingPut$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingPost\n   */\n  static readonly RedirectUsingPostPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPost$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingPostPath, 'post');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPost(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingDelete\n   */\n  static readonly RedirectUsingDeletePath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingDelete$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingDeletePath, 'delete');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingDelete(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingOptions\n   */\n  static readonly RedirectUsingOptionsPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingOptions()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingOptions$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingOptionsPath, 'options');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingOptions$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingOptions(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingOptions$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingHead\n   */\n  static readonly RedirectUsingHeadPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingHead()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingHead$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingHeadPath, 'head');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingHead$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingHead(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingHead$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingPatch\n   */\n  static readonly RedirectUsingPatchPath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingPatch()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPatch$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingPatchPath, 'patch');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingPatch$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingPatch(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingPatch$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n  /**\n   * Path part for operation redirectUsingTrace\n   */\n  static readonly RedirectUsingTracePath = '/fe/**';\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `redirectUsingTrace()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingTrace$Response(params?: {\n  }): Observable<StrictHttpResponse<string>> {\n\n    const rb = new RequestBuilder(this.rootUrl, RedirectToAngularService.RedirectUsingTracePath, 'trace');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'blob',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<string>;\n      })\n    );\n  }\n\n  /**\n   * redirect.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `redirectUsingTrace$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  redirectUsingTrace(params?: {\n  }): Observable<string> {\n\n    return this.redirectUsingTrace$Response(params).pipe(\n      map((r: StrictHttpResponse<string>) => r.body as string)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "RoutingService",
            "id": "injectable-RoutingService-1ffe81860a33f867227c801654a1a9a551dbe2ee7ef0112f889420c3f50c80167fced7db49c9a6a3f26c6de27c84887f5d3772e9c8883fdabf7056702faa1763",
            "file": "src/app/common/routing.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "connectionSettingsRoute",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "consolePageRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dataSourcesPageRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dataSourcesPageRouteWithSelection",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "environmentsPageRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "homeRoute",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "metaModelPageRoute",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToConnectionSettingsPage",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToDataSourcesPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigateToEnvironmentsPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navigateToMetaModelPage",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snapshotsPageroute",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoutingService {\n\n  constructor(private router: Router) { }\n\n  public homeRoute() {\n    return ['/'];\n  }\n\n  public consolePageRoute() {\n    return ['/', 'fe', 'console'];\n  }\n\n  public dataSourcesPageRoute() {\n    return ['/', 'fe', 'datasources'];\n  }\n\n  public dataSourcesPageRouteWithSelection(systemComponentKey: string) {\n    return ['/', 'fe', 'datasources', systemComponentKey];\n  }\n\n  public metaModelPageRoute(systemComponentKey: string) {\n    return ['/', 'fe', 'datasources', systemComponentKey, 'metamodel'];\n  }\n\n  public connectionSettingsRoute(systemComponentKey: string) {\n    return ['fe', 'datasources', systemComponentKey, 'settings'];\n  }\n\n  public environmentsPageRoute() {\n    return ['/', 'fe', 'environments'];\n  }\n\n  public snapshotsPageroute() {\n    return ['/', 'fe', 'snapshots'];\n  }\n\n  public navigateToMetaModelPage(systemComponentKey: string) {\n    this.router.navigate(this.metaModelPageRoute(systemComponentKey))\n  }\n\n  public navigateToEnvironmentsPage() {\n    this.router.navigate(this.environmentsPageRoute())\n  }\n\n  public navigateToDataSourcesPage() {\n    this.router.navigate(this.dataSourcesPageRoute())\n  }\n\n  public navigateToConnectionSettingsPage(systemComponentKey: string) {\n    this.router.navigate(this.connectionSettingsRoute(systemComponentKey))\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SideBarService",
            "id": "injectable-SideBarService-3175de731f62cd9281336de830cd5fc413e03f30780a62556ff21d423215892f10b230ac8ff8cd413cfd1b930009a727fb50d3f65e126949255d68eea513b804",
            "file": "src/app/common/styleguide/side-bar/side-bar.service.ts",
            "properties": [
                {
                    "name": "collapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "collapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SideBarService {\n\n  constructor() { }\n\n  collapsed: boolean = true\n\n  toggleState() {\n    this.collapsed = !this.collapsed\n  }\n\n  collapse() {\n    this.collapsed = true\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "SnapshotControllerService",
            "id": "injectable-SnapshotControllerService-6479be53c733365b83d8274701c9d5d77ea26ec2a853e83fcab864bbfcf9caf3c656ee42a7c1fa194cb1ba0b56ae0143c3a14b4900d012ecfdde7983c5dc7ee9",
            "file": "src/app/api/services/snapshot-controller.service.ts",
            "properties": [
                {
                    "name": "CreateUsingPostPath",
                    "defaultValue": "'/api/snaphot/snapshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation createUsingPost</p>\n",
                    "line": 144,
                    "rawdescription": "\n\nPath part for operation createUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "DeleteByIdUsingDeletePath",
                    "defaultValue": "'/api/snaphot/delete'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation deleteByIdUsingDelete</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nPath part for operation deleteByIdUsingDelete\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetByIdUsingGetPath",
                    "defaultValue": "'/api/snaphot/snapshot'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getByIdUsingGet</p>\n",
                    "line": 90,
                    "rawdescription": "\n\nPath part for operation getByIdUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "ListUsingGetPath",
                    "defaultValue": "'/api/snaphot/snapshots'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation listUsingGet</p>\n",
                    "line": 198,
                    "rawdescription": "\n\nPath part for operation listUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "UploadUsingPostPath",
                    "defaultValue": "'/api/snaphot/upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation uploadUsingPost</p>\n",
                    "line": 249,
                    "rawdescription": "\n\nPath part for operation uploadUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SnapshotId>",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `createUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>create.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>createUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SnapshotId>>",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncreate.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `createUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>create.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>createUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteByIdUsingDelete",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteById.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `deleteByIdUsingDelete$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteById.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>deleteByIdUsingDelete$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteByIdUsingDelete$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndeleteById.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `deleteByIdUsingDelete()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>deleteById.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>deleteByIdUsingDelete()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByIdUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SnapshotDto>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetById.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getByIdUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getById.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getByIdUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByIdUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SnapshotDto>>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetById.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getByIdUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getById.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getByIdUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<SnapshotSummaryDto>>",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlist.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `listUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>list.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>listUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "listUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<SnapshotSummaryDto>>>",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nlist.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `listUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>list.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>listUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ExecutionId>",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupload.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `uploadUsingPost$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>upload.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>uploadUsingPost$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<ExecutionId>>",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupload.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `uploadUsingPost()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>upload.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>uploadUsingPost()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Snapshot Controller</p>\n",
            "rawdescription": "\n\nSnapshot Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { ExecutionId } from '../models/execution-id';\nimport { SnapshotDto } from '../models/snapshot-dto';\nimport { SnapshotDescriptorDto } from '../models/snapshot-descriptor-dto';\nimport { SnapshotId } from '../models/snapshot-id';\nimport { SnapshotSummaryDto } from '../models/snapshot-summary-dto';\n\n\n/**\n * Snapshot Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnapshotControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation deleteByIdUsingDelete\n   */\n  static readonly DeleteByIdUsingDeletePath = '/api/snaphot/delete';\n\n  /**\n   * deleteById.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `deleteByIdUsingDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteByIdUsingDelete$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.DeleteByIdUsingDeletePath, 'delete');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * deleteById.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `deleteByIdUsingDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  deleteByIdUsingDelete(params?: {\n    id?: string;\n  }): Observable<void> {\n\n    return this.deleteByIdUsingDelete$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getByIdUsingGet\n   */\n  static readonly GetByIdUsingGetPath = '/api/snaphot/snapshot';\n\n  /**\n   * getById.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getByIdUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByIdUsingGet$Response(params?: {\n    id?: string;\n  }): Observable<StrictHttpResponse<SnapshotDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.GetByIdUsingGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SnapshotDto>;\n      })\n    );\n  }\n\n  /**\n   * getById.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getByIdUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getByIdUsingGet(params?: {\n    id?: string;\n  }): Observable<SnapshotDto> {\n\n    return this.getByIdUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SnapshotDto>) => r.body as SnapshotDto)\n    );\n  }\n\n  /**\n   * Path part for operation createUsingPost\n   */\n  static readonly CreateUsingPostPath = '/api/snaphot/snapshot';\n\n  /**\n   * create.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `createUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createUsingPost$Response(params?: {\n    body?: SnapshotDescriptorDto\n  }): Observable<StrictHttpResponse<SnapshotId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.CreateUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SnapshotId>;\n      })\n    );\n  }\n\n  /**\n   * create.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `createUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  createUsingPost(params?: {\n    body?: SnapshotDescriptorDto\n  }): Observable<SnapshotId> {\n\n    return this.createUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<SnapshotId>) => r.body as SnapshotId)\n    );\n  }\n\n  /**\n   * Path part for operation listUsingGet\n   */\n  static readonly ListUsingGetPath = '/api/snaphot/snapshots';\n\n  /**\n   * list.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `listUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<Array<SnapshotSummaryDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.ListUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SnapshotSummaryDto>>;\n      })\n    );\n  }\n\n  /**\n   * list.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `listUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  listUsingGet(params?: {\n  }): Observable<Array<SnapshotSummaryDto>> {\n\n    return this.listUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SnapshotSummaryDto>>) => r.body as Array<SnapshotSummaryDto>)\n    );\n  }\n\n  /**\n   * Path part for operation uploadUsingPost\n   */\n  static readonly UploadUsingPostPath = '/api/snaphot/upload';\n\n  /**\n   * upload.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `uploadUsingPost()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  uploadUsingPost$Response(params?: {\n    id?: string;\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n  }): Observable<StrictHttpResponse<ExecutionId>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SnapshotControllerService.UploadUsingPostPath, 'post');\n    if (params) {\n      rb.query('id', params.id, {\"style\":\"form\"});\n      rb.query('environmentKey', params.environmentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ExecutionId>;\n      })\n    );\n  }\n\n  /**\n   * upload.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `uploadUsingPost$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  uploadUsingPost(params?: {\n    id?: string;\n\n    /**\n     * environmentKey\n     */\n    environmentKey?: string;\n  }): Observable<ExecutionId> {\n\n    return this.uploadUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<ExecutionId>) => r.body as ExecutionId)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SnapshotService",
            "id": "injectable-SnapshotService-282c7a58327aa5d9e91b11e0b39e2e8bb94670201dd9598e81e0a841ce3dabfbac9015986283747badc4d706417f657031538464876ff2c252e938c8229b317d",
            "file": "src/app/snapshot/snapshot-page/snapshot.service.ts",
            "properties": [
                {
                    "name": "snapshot$",
                    "defaultValue": "this.store.pipe(\n      map(state => state.snapshot),\n      distinctUntilChanged(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<SnapshotStoreState>({ snapshot: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSnapshot",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {SnapshotDto, SnapshotId} from \"@fabric/models\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {map,distinctUntilChanged} from \"rxjs/operators\";\n\ninterface SnapshotStoreState {\n  snapshot: SnapshotDto\n}\n\n@Injectable()\nexport class SnapshotService {\n\n  constructor(private snapshotControllerService : SnapshotControllerService) { this.init() }\n\n  private store = new BehaviorSubject<SnapshotStoreState>({ snapshot: null})\n\n  snapshot$ = this.store.pipe(\n      map(state => state.snapshot),\n      distinctUntilChanged(),\n  )\n\n  init() {\n    this.snapshot$.subscribe((dto)=> console.log(\">> snapshot$\", dto))\n  }\n\n  loadSnapshot(snapshotId: SnapshotId) {\n    this.snapshotControllerService.getByIdUsingGet(snapshotId).subscribe(dto => {\n      this.store.next({ snapshot: dto })\n    })\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnapshotsService",
            "id": "injectable-SnapshotsService-085c8860e836b9cea11622b0c6c537b83a11549d8a04a3ffe92b19c8ced3e0013f8e4c253739037a88db1a0c67ed20a07a5b837b44904ad3b1ff8bcd35bdee93",
            "file": "src/app/snapshot/snapshots-page/snapshots.service.ts",
            "properties": [
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<DashboardStoreState>({ summaries: []})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "summaries$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.summaries),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "createSnapshot",
                    "args": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSummaries",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ExecutionId>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {SnapshotControllerService} from \"@fabric/services\";\nimport {BehaviorSubject, Subscription} from \"rxjs\";\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {ExecutionId, SnapshotId, SnapshotSummaryDto} from \"@fabric/models\";\n\ninterface DashboardStoreState {\n    summaries: SnapshotSummaryDto[]\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SnapshotsService implements OnDestroy {\n\n    constructor(private snapshotControllerService: SnapshotControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<DashboardStoreState>({ summaries: []})\n\n    summaries$ = this.store.pipe(\n        map(state => state.summaries),\n        distinctUntilChanged(),\n    )\n\n    private subscriptions: Subscription[] = []\n\n    init() {\n        this.loadSummaries();\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    private loadSummaries() {\n        this.snapshotControllerService.listUsingGet({}).subscribe(summaries => {\n            this.store.next({summaries: summaries})\n        })\n    }\n\n    createSnapshot(environment: string, name: string) {\n        this.snapshotControllerService.createUsingPost({\n            body: {\n                environmentKey: environment,\n                name\n            }\n        }).subscribe(\n        (dto) => this.loadSummaries()\n        )\n    }\n\n    delete(snapshotId: SnapshotId) {\n        this.snapshotControllerService.deleteByIdUsingDelete({id: snapshotId.id}).subscribe(()=> {\n            this.loadSummaries()\n        })\n\n    }\n\n    upload(snapshotId: SnapshotId, envKey: string): Promise<ExecutionId> {\n        return this.snapshotControllerService.uploadUsingPost({\n            environmentKey: envKey,\n            id: snapshotId.id\n        }).toPromise()\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "snapshotControllerService",
                        "type": "SnapshotControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SystemControllerService",
            "id": "injectable-SystemControllerService-a378f6b525deef761df3fca5262ddfb31de9f4630933e4b98c4fcead17d103f74644face2a90835a6582a5b814ea06aa8e28102b80ba9c84a85d8487db30be8a",
            "file": "src/app/api/services/system-controller.service.ts",
            "properties": [
                {
                    "name": "CheckSystemConfigUsingGetPath",
                    "defaultValue": "'/api/system/checkConfig'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation checkSystemConfigUsingGet</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nPath part for operation checkSystemConfigUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "checkSystemConfigUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SystemCheckResultDto>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheckSystemConfig.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `checkSystemConfigUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>checkSystemConfig.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>checkSystemConfigUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSystemConfigUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SystemCheckResultDto>>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheckSystemConfig.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `checkSystemConfigUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>checkSystemConfig.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>checkSystemConfigUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>System Controller</p>\n",
            "rawdescription": "\n\nSystem Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { SystemCheckResultDto } from '../models/system-check-result-dto';\n\n\n/**\n * System Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SystemControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation checkSystemConfigUsingGet\n   */\n  static readonly CheckSystemConfigUsingGetPath = '/api/system/checkConfig';\n\n  /**\n   * checkSystemConfig.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `checkSystemConfigUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  checkSystemConfigUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<SystemCheckResultDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemControllerService.CheckSystemConfigUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SystemCheckResultDto>;\n      })\n    );\n  }\n\n  /**\n   * checkSystemConfig.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `checkSystemConfigUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  checkSystemConfigUsingGet(params?: {\n  }): Observable<SystemCheckResultDto> {\n\n    return this.checkSystemConfigUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SystemCheckResultDto>) => r.body as SystemCheckResultDto)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SystemDescriptionControllerService",
            "id": "injectable-SystemDescriptionControllerService-0b5b73ac51cb789ae341d57df06c49f9e92323a7a5794662bf209dcffbad4b398f507e68100d433eb6cbbd0243e172a9cc3ae0a36ede373066131dfb36260129",
            "file": "src/app/api/services/system-description-controller.service.ts",
            "properties": [
                {
                    "name": "GetEnvironmentStructureUsingGetPath",
                    "defaultValue": "'/api/systemdescription/structure/env'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getEnvironmentStructureUsingGet</p>\n",
                    "line": 212,
                    "rawdescription": "\n\nPath part for operation getEnvironmentStructureUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSystemComponentEnvironmentStructureUsingGetPath",
                    "defaultValue": "'/api/systemdescription/structure/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSystemComponentEnvironmentStructureUsingGet</p>\n",
                    "line": 139,
                    "rawdescription": "\n\nPath part for operation getSystemComponentEnvironmentStructureUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSystemDescriptionUsingGetPath",
                    "defaultValue": "'/api/systemdescription'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSystemDescriptionUsingGet</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPath part for operation getSystemDescriptionUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "GetSystemTypeDescriptorsUsingGetPath",
                    "defaultValue": "'/api/systemdescription/types'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSystemTypeDescriptorsUsingGet</p>\n",
                    "line": 274,
                    "rawdescription": "\n\nPath part for operation getSystemTypeDescriptorsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "SetSystemDescriptionUsingPostPath",
                    "defaultValue": "'/api/systemdescription'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation setSystemDescriptionUsingPost</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nPath part for operation setSystemDescriptionUsingPost\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getEnvironmentStructureUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StructureDto>",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetEnvironmentStructure.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getEnvironmentStructureUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getEnvironmentStructure.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getEnvironmentStructureUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnvironmentStructureUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StructureDto>>",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetEnvironmentStructure.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getEnvironmentStructureUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getEnvironmentStructure.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getEnvironmentStructureUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemComponentEnvironmentStructureUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StructureDto>",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemComponentEnvironmentStructure.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSystemComponentEnvironmentStructureUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemComponentEnvironmentStructure.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSystemComponentEnvironmentStructureUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemComponentEnvironmentStructureUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<StructureDto>>",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemComponentEnvironmentStructure.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSystemComponentEnvironmentStructureUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemComponentEnvironmentStructure.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSystemComponentEnvironmentStructureUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemDescriptionUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<SystemDescriptionDto>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemDescription.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSystemDescriptionUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemDescription.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSystemDescriptionUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemDescriptionUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<SystemDescriptionDto>>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemDescription.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSystemDescriptionUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemDescription.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSystemDescriptionUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemTypeDescriptorsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<SystemTypeDescriptorDto>>",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemTypeDescriptors.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSystemTypeDescriptorsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemTypeDescriptors.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSystemTypeDescriptorsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemTypeDescriptorsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<Array<SystemTypeDescriptorDto>>>",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSystemTypeDescriptors.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSystemTypeDescriptorsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSystemTypeDescriptors.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSystemTypeDescriptorsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSystemDescriptionUsingPost",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetSystemDescription.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `setSystemDescriptionUsingPost$Response()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>setSystemDescription.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>setSystemDescriptionUsingPost$Response()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSystemDescriptionUsingPost$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<void>>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsetSystemDescription.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `setSystemDescriptionUsingPost()` instead.\n\nThis method sends `application/json` and handles request body of type `application/json`.\n",
                    "description": "<p>setSystemDescription.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>setSystemDescriptionUsingPost()</code> instead.</p>\n<p>This method sends <code>application/json</code> and handles request body of type <code>application/json</code>.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>System Description Controller</p>\n",
            "rawdescription": "\n\nSystem Description Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { StructureDto } from '../models/structure-dto';\nimport { SystemDescriptionDto } from '../models/system-description-dto';\nimport { SystemTypeDescriptorDto } from '../models/system-type-descriptor-dto';\n\n\n/**\n * System Description Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SystemDescriptionControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getSystemDescriptionUsingGet\n   */\n  static readonly GetSystemDescriptionUsingGetPath = '/api/systemdescription';\n\n  /**\n   * getSystemDescription.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemDescriptionUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemDescriptionUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<SystemDescriptionDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetSystemDescriptionUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<SystemDescriptionDto>;\n      })\n    );\n  }\n\n  /**\n   * getSystemDescription.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemDescriptionUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemDescriptionUsingGet(params?: {\n  }): Observable<SystemDescriptionDto> {\n\n    return this.getSystemDescriptionUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<SystemDescriptionDto>) => r.body as SystemDescriptionDto)\n    );\n  }\n\n  /**\n   * Path part for operation setSystemDescriptionUsingPost\n   */\n  static readonly SetSystemDescriptionUsingPostPath = '/api/systemdescription';\n\n  /**\n   * setSystemDescription.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `setSystemDescriptionUsingPost()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  setSystemDescriptionUsingPost$Response(params?: {\n    body?: SystemDescriptionDto\n  }): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.SetSystemDescriptionUsingPostPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * setSystemDescription.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `setSystemDescriptionUsingPost$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  setSystemDescriptionUsingPost(params?: {\n    body?: SystemDescriptionDto\n  }): Observable<void> {\n\n    return this.setSystemDescriptionUsingPost$Response(params).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation getSystemComponentEnvironmentStructureUsingGet\n   */\n  static readonly GetSystemComponentEnvironmentStructureUsingGetPath = '/api/systemdescription/structure/';\n\n  /**\n   * getSystemComponentEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemComponentEnvironmentStructureUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemComponentEnvironmentStructureUsingGet$Response(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StrictHttpResponse<StructureDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetSystemComponentEnvironmentStructureUsingGetPath, 'get');\n    if (params) {\n      rb.query('envKey', params.envKey, {\"style\":\"form\"});\n      rb.query('systemComponentKey', params.systemComponentKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StructureDto>;\n      })\n    );\n  }\n\n  /**\n   * getSystemComponentEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemComponentEnvironmentStructureUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemComponentEnvironmentStructureUsingGet(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n\n    /**\n     * systemComponentKey\n     */\n    systemComponentKey?: string;\n  }): Observable<StructureDto> {\n\n    return this.getSystemComponentEnvironmentStructureUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<StructureDto>) => r.body as StructureDto)\n    );\n  }\n\n  /**\n   * Path part for operation getEnvironmentStructureUsingGet\n   */\n  static readonly GetEnvironmentStructureUsingGetPath = '/api/systemdescription/structure/env';\n\n  /**\n   * getEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getEnvironmentStructureUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getEnvironmentStructureUsingGet$Response(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n  }): Observable<StrictHttpResponse<StructureDto>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetEnvironmentStructureUsingGetPath, 'get');\n    if (params) {\n      rb.query('envKey', params.envKey, {\"style\":\"form\"});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<StructureDto>;\n      })\n    );\n  }\n\n  /**\n   * getEnvironmentStructure.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getEnvironmentStructureUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getEnvironmentStructureUsingGet(params?: {\n\n    /**\n     * envKey\n     */\n    envKey?: string;\n  }): Observable<StructureDto> {\n\n    return this.getEnvironmentStructureUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<StructureDto>) => r.body as StructureDto)\n    );\n  }\n\n  /**\n   * Path part for operation getSystemTypeDescriptorsUsingGet\n   */\n  static readonly GetSystemTypeDescriptorsUsingGetPath = '/api/systemdescription/types';\n\n  /**\n   * getSystemTypeDescriptors.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSystemTypeDescriptorsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemTypeDescriptorsUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<Array<SystemTypeDescriptorDto>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, SystemDescriptionControllerService.GetSystemTypeDescriptorsUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<SystemTypeDescriptorDto>>;\n      })\n    );\n  }\n\n  /**\n   * getSystemTypeDescriptors.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSystemTypeDescriptorsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSystemTypeDescriptorsUsingGet(params?: {\n  }): Observable<Array<SystemTypeDescriptorDto>> {\n\n    return this.getSystemTypeDescriptorsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<Array<SystemTypeDescriptorDto>>) => r.body as Array<SystemTypeDescriptorDto>)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        },
        {
            "name": "SystemDescriptionService",
            "id": "injectable-SystemDescriptionService-73974b5622cdeea463e391e7879f83730ded55efa25ba31a1ce8360a1ad21f85f6ed1626154cb961003e97f15d2d8074e2ec8bd1cc4d52ddf3c737985e0475d2",
            "file": "src/app/settings/system-description.service.ts",
            "properties": [
                {
                    "name": "store",
                    "defaultValue": "new BehaviorSubject<SystemDescriptionState>({systemDescription: null})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "systemTypeDescriptors$",
                    "defaultValue": "new BehaviorSubject<SystemTypeDescriptorDto[]>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methods": [
                {
                    "name": "addEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSetting",
                    "args": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSystemComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSetting",
                    "args": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSystemComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingDescriptors",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "loadEnvironmentSystemComponentStructure",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureDto>",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadEnvironmentSystemStructure",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureDto>",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSystemDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadSystemTypeDescriptors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveSystemDescription",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testConnection",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "settings",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ConnectionTestResponseDto>",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "settings",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEnvironment",
                    "args": [
                        {
                            "name": "old",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "old",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updated",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSetting",
                    "args": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SettingsDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSystemComponent",
                    "args": [
                        {
                            "name": "old",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "old",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updated",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport {logChangesToObservable} from '@fabric/common';\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from '@fabric/models';\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from '@fabric/services';\nimport {SettingsDialogData} from './connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component';\n\n\nexport interface Setting {\n    key: string\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string\n    environmentKey : string\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getDefaultEnvironment(): EnvironmentDto {\n        return this.systemDescription.environments[0]\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getSystemComponentByKey(systemComponentKey: string): SystemComponentDto {\n        return this.systemDescription.systemComponents.find(comp => comp.key === systemComponentKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey: string): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponentKey)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionControllerService",
                        "type": "SystemDescriptionControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metaModelControllerService",
                        "type": "MetaModelControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "connectionControllerService",
                        "type": "ConnectionControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionControllerService",
                        "type": "SystemDescriptionControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaModelControllerService",
                        "type": "MetaModelControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "connectionControllerService",
                        "type": "ConnectionControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "systemDescription": {
                    "name": "systemDescription",
                    "getSignature": {
                        "name": "systemDescription",
                        "type": "",
                        "returnType": "SystemDescriptionDto",
                        "line": 129
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-7d5a9752582a36e575cde45905a9821473659c8e73ff39e7fe9945da882a00b3c08fe47059c423debc74cb8f1de9c8969642d6f7239a4b845296391598239331",
            "file": "src/app/common/toast/toast.service.ts",
            "properties": [
                {
                    "name": "toastMessages$",
                    "defaultValue": "new BehaviorSubject<ToastMessage[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ToastMessage[]>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "level",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dismissToast",
                    "args": [
                        {
                            "name": "toast",
                            "type": "ToastMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toast",
                            "type": "ToastMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {BehaviorSubject} from 'rxjs';\nimport {Injectable} from '@angular/core';\n\nexport const TOAST_LEVEL = {\n    success: 'success-toast',\n    warning: 'warning-toast',\n    danger: 'danger-toast'\n};\n\nexport type ToastMessage = {\n    text: string\n    level: string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ToastService {\n\n    constructor() {\n    }\n\n    public toastMessages$: BehaviorSubject<ToastMessage[]> = new BehaviorSubject<ToastMessage[]>([]);\n\n    add(level: string, text: string): void {\n        let toastMessages = this.toastMessages$.value\n        let toast = {level, text}\n        toastMessages.push(toast)\n        this.toastMessages$.next(toastMessages)\n        setTimeout(() => {\n            this.dismissToast(toast);\n        }, 7000)\n    }\n\n    dismissToast(toast: ToastMessage): void {\n      let toastMessages = this.toastMessages$.value\n      toastMessages = toastMessages.filter(item => item != toast)\n      this.toastMessages$.next(toastMessages)\n    }\n\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "type": "injectable"
        },
        {
            "name": "WorkspaceRestControllerService",
            "id": "injectable-WorkspaceRestControllerService-9f2c89125b903fbfbae0869afd28585c8239d8dab3dc8785cf61ae1b5324296a3ad6d88ed22a66a476dc206fe23f621ce572d89e446eee3a886fbf848ad536c5",
            "file": "src/app/api/services/workspace-rest-controller.service.ts",
            "properties": [
                {
                    "name": "GetSettingsUsingGetPath",
                    "defaultValue": "'/api/settings/settings'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Path part for operation getSettingsUsingGet</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nPath part for operation getSettingsUsingGet\n",
                    "modifierKind": [
                        124,
                        144
                    ]
                },
                {
                    "name": "_rootUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getSettingsUsingGet",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<WorkspaceSettings>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSettings.\n\n\n\nThis method provides access to only to the response body.\nTo access the full response (for headers, for example), `getSettingsUsingGet$Response()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSettings.</p>\n<p>This method provides access to only to the response body.\nTo access the full response (for headers, for example), <code>getSettingsUsingGet$Response()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSettingsUsingGet$Response",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<StrictHttpResponse<WorkspaceSettings>>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngetSettings.\n\n\n\nThis method provides access to the full `HttpResponse`, allowing access to response headers.\nTo access only the response body, use `getSettingsUsingGet()` instead.\n\nThis method doesn't expect any request body.\n",
                    "description": "<p>getSettings.</p>\n<p>This method provides access to the full <code>HttpResponse</code>, allowing access to response headers.\nTo access only the response body, use <code>getSettingsUsingGet()</code> instead.</p>\n<p>This method doesn&#39;t expect any request body.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Workspace Rest Controller</p>\n",
            "rawdescription": "\n\nWorkspace Rest Controller\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { WorkspaceSettings } from '../models/workspace-settings';\n\n\n/**\n * Workspace Rest Controller\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkspaceRestControllerService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation getSettingsUsingGet\n   */\n  static readonly GetSettingsUsingGetPath = '/api/settings/settings';\n\n  /**\n   * getSettings.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `getSettingsUsingGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSettingsUsingGet$Response(params?: {\n  }): Observable<StrictHttpResponse<WorkspaceSettings>> {\n\n    const rb = new RequestBuilder(this.rootUrl, WorkspaceRestControllerService.GetSettingsUsingGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<WorkspaceSettings>;\n      })\n    );\n  }\n\n  /**\n   * getSettings.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `getSettingsUsingGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  getSettingsUsingGet(params?: {\n  }): Observable<WorkspaceSettings> {\n\n    return this.getSettingsUsingGet$Response(params).pipe(\n      map((r: StrictHttpResponse<WorkspaceSettings>) => r.body as WorkspaceSettings)\n    );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ApiConfiguration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseService",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "HttpErrorInterceptor",
            "id": "injectable-HttpErrorInterceptor-be759a325a416e2e59949e89476ddff2e7e782220f28dea8df855398a1ecc063d24eec0721f20e8af414e961908326a6d291a340a0e02faa2d8e89a6d9112357",
            "file": "src/app/common/connection-status/http-error.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\nimport {catchError, tap} from \"rxjs/operators\";\nimport {ConnectionStatusService} from \"./connection-status.service\";\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n\n    constructor(private service: ConnectionStatusService) {\n    }\n\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        this.service.setStatus({ status: 'Calling', msg: null})\n        return next.handle(request)\n            .pipe(\n                tap( () => this.service.setStatus({ status: 'OK', msg: null})),\n                catchError((error: HttpErrorResponse) => {\n                    let errorMsg = '';\n                    if (error.error instanceof ErrorEvent) {\n                        console.log('this is client side error');\n                        errorMsg = `Error: ${error.error.message}`;\n                        this.service.setStatus({ status:'Problem', msg: errorMsg})\n                    } else {\n                        console.log('this is server side error');\n                        errorMsg = `Error Code: ${error.status},  Message: ${error.message}`;\n                        this.service.setStatus({ status: 'Problem', msg: errorMsg})\n                    }\n                    console.log(errorMsg);\n                    return throwError(errorMsg);\n                })\n            )\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ConnectionStatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ConnectionStatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-d83b95cb897fd7f1ecc7216a31a9167598810a902c9c43ec11b6a93965548994186b900fe348e64bdf35a97b36d2fdb26731097dc1738e7f73bc67d2d432a47c",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConnectionTester",
            "id": "class-ConnectionTester-fec792e6c1963bc75d104ed7f35b2c1152fdd4a39de26f53e9b8de7ef7c9339284b2c30b2b6f0e421ba967a16ce95bfbbf48f9cdd8eed8d30c7c8cde1b94b511",
            "file": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './connection-settings-dialog.component.html',\n    styleUrls: ['./connection-settings-dialog.component.scss']\n})\nexport class ConnectionSettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.systemType)\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            } else {\n                this.systemComponentKeyControl().setValue(this.spec.data.systemComponentKey)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    get systemType(): string {\n        return this.specWrapper.getSystemType(this.spec.data.systemComponentKey)\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "testResult",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionTestResponseDto",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "testRunning",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "settingObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "settingObject",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemType",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HasConfirmationDialogMixin",
            "id": "class-HasConfirmationDialogMixin-ac09e8256d96d3773e0cc5c364f8e7e386a36b14e74fbf4007261553a674bd673e4915058ab9698b6fa98788f63bfeca540546c703b97b992bcb9ebbac9332e2",
            "file": "src/app/common/confirmation-dialog/has-confirmation-dialog.mixin.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ModalService} from \"../modal/modal-service\";\nimport {ConfirmationDialogSpec} from \"./confirmation-dialog.component\";\n\nexport abstract class HasConfirmationDialogMixin {  // todo make this a proper mixin\n\n    protected constructor(protected modalService: ModalService) { }\n\n    // confirmation dialog\n\n    confirmationDialogSpec: any;\n\n    abstract confirmationDialogId(): string\n\n    openConfirmationDialog(confirmationDialogSpec: ConfirmationDialogSpec) {\n        this.confirmationDialogSpec = confirmationDialogSpec\n        this.modalService.open(this.confirmationDialogId())\n    }\n\n    closeConfirmationDialog() {\n        this.modalService.close(this.confirmationDialogId())\n    }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "modifierKind": [
                    122
                ],
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HeaderParameter",
            "id": "class-HeaderParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 176,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the HTTP request header</p>\n",
            "rawdescription": "\n\nA parameter in the HTTP request header\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "headers",
                            "type": "HttpHeaders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PagedCollection",
            "id": "class-PagedCollection-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "collection",
                        "type": "CollectionSnapshot",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "collection",
                        "type": "CollectionSnapshot",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "lastPageNr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "pageNr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [
                {
                    "name": "getIdx",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "needsPager",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCurrentPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toLastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toNextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toPreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Parameter",
            "id": "class-Parameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultStyle",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultExplode",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Base class for a parameter</p>\n",
            "rawdescription": "\n\nBase class for a parameter\n",
            "methods": [
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParameterCodec",
            "id": "class-ParameterCodec-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "properties": [],
            "description": "<p>Custom parameter codec to correctly handle the plus sign in parameter\nvalues. See <a href=\"https://github.com/angular/angular/issues/18261\">https://github.com/angular/angular/issues/18261</a></p>\n",
            "rawdescription": "\n\nCustom parameter codec to correctly handle the plus sign in parameter\nvalues. See https://github.com/angular/angular/issues/18261\n",
            "methods": [
                {
                    "name": "decodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpParameterCodec"
            ]
        },
        {
            "name": "PathParameter",
            "id": "class-PathParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the operation path</p>\n",
            "rawdescription": "\n\nA parameter in the operation path\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QueryParameter",
            "id": "class-QueryParameter-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ParameterOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParameterOptions",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "description": "<p>A parameter in the query</p>\n",
            "rawdescription": "\n\nA parameter in the query\n",
            "methods": [
                {
                    "name": "append",
                    "args": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "serializeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "separator",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "','",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Parameter"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Parameter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RequestBuilder",
            "id": "class-RequestBuilder-62f20f5c8b85d72ad476b49db8ce315f5ec5ffdd6a279c5d254c249d178c6447edec0397039d5f03ee6bcc16ad887c7494b84bc6ca32d42de14024a800bb1fd1",
            "file": "src/app/api/request-builder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 204,
                "jsdoctags": [
                    {
                        "name": "rootUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operationPath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_bodyContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any | null",
                    "optional": false,
                    "description": "",
                    "line": 203
                },
                {
                    "name": "_bodyContentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "_header",
                    "defaultValue": "new Map<string, HeaderParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 202,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_path",
                    "defaultValue": "new Map<string, PathParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 200,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_query",
                    "defaultValue": "new Map<string, QueryParameter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "operationPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rootUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "description": "<p>Helper to build http requests from parameters</p>\n",
            "rawdescription": "\n\nHelper to build http requests from parameters\n",
            "methods": [
                {
                    "name": "body",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the body content, along with the content type\n",
                    "description": "<p>Sets the body content, along with the content type</p>\n",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contentType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'application/json'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpRequest<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuilds the request with the current set parameters\n",
                    "description": "<p>Builds the request with the current set parameters</p>\n",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formDataValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "header",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a header parameter\n",
                    "description": "<p>Sets a header parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "path",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a path parameter\n",
                    "description": "<p>Sets a path parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "query",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a query parameter\n",
                    "description": "<p>Sets a query parameter</p>\n",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ParameterOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SettingsDialogSpecWrapper",
            "id": "class-SettingsDialogSpecWrapper-fec792e6c1963bc75d104ed7f35b2c1152fdd4a39de26f53e9b8de7ef7c9339284b2c30b2b6f0e421ba967a16ce95bfbbf48f9cdd8eed8d30c7c8cde1b94b511",
            "file": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './connection-settings-dialog.component.html',\n    styleUrls: ['./connection-settings-dialog.component.scss']\n})\nexport class ConnectionSettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.systemType)\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            } else {\n                this.systemComponentKeyControl().setValue(this.spec.data.systemComponentKey)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    get systemType(): string {\n        return this.specWrapper.getSystemType(this.spec.data.systemComponentKey)\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "spec",
                        "type": "SettingsDialogSpec",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "spec",
                        "type": "SettingsDialogSpec",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getSystemType",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StructureDto2TreeNodeConverter",
            "id": "class-StructureDto2TreeNodeConverter-b0c912c30c007f38f5e2160e91e4cd011f4868154f090a5ca91892f102c200ce20040caef5d2eb35a5f85145e642a1c979ba58f38c27263d9711ee3a071bb1b1",
            "file": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nexport class StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.test()\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "run",
                    "args": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SnapshotDialogTreeNode[]",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runRecursive",
                    "args": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SnapshotDialogTreeNode",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "structureDto",
                            "type": "StructureDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SystemDescriptionWrapper",
            "id": "class-SystemDescriptionWrapper-73974b5622cdeea463e391e7879f83730ded55efa25ba31a1ce8360a1ad21f85f6ed1626154cb961003e97f15d2d8074e2ec8bd1cc4d52ddf3c737985e0475d2",
            "file": "src/app/settings/system-description.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\nimport {logChangesToObservable} from '@fabric/common';\nimport {ConnectionTestResponseDto, EnvironmentDto, StructureDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from '@fabric/models';\nimport {ConnectionControllerService, MetaModelControllerService, SystemDescriptionControllerService} from '@fabric/services';\nimport {SettingsDialogData} from './connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component';\n\n\nexport interface Setting {\n    key: string\n    value: string\n}\n\nexport interface SettingRow {\n    systemComponentKey: string\n    environmentKey : string\n    settings: Setting[]\n}\n\ninterface SystemDescriptionState {\n    systemDescription: SystemDescriptionDto\n}\n\nexport class SystemDescriptionWrapper {\n    constructor(private systemDescription: SystemDescriptionDto) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.systemDescription.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n\n    public settingRows(): SettingRow[] {\n        let settingRows: SettingRow[] = []\n        Object.keys(this.systemDescription.settings).map(environmentKey => {\n            let envSettings = this.systemDescription.settings[environmentKey]\n            Object.keys(envSettings).map(systemComponentKey => {\n                let settingsArray: Setting[] = []\n                let settingsDto = envSettings[systemComponentKey]\n                Object.keys(settingsDto).map(key => {\n                    settingsArray.push({\n                        key,\n                        value: settingsDto[key]\n                    })\n                })\n                settingRows.push({\n                    environmentKey,\n                    systemComponentKey,\n                    settings: settingsArray\n                })\n            })\n        })\n        return settingRows\n    }\n\n    getDefaultEnvironment(): EnvironmentDto {\n        return this.systemDescription.environments[0]\n    }\n\n    getEnvironmentByKey(envKey: string): EnvironmentDto {\n        return this.systemDescription.environments.find(env => env.key === envKey)\n    }\n\n    getSystemComponentByKey(systemComponentKey: string): SystemComponentDto {\n        return this.systemDescription.systemComponents.find(comp => comp.key === systemComponentKey)\n    }\n\n    getEnvironments(systemComponent: SystemComponentDto): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponent.key)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey: string): EnvironmentDto[] {\n        return this.settingRows()\n            .filter(row => row.systemComponentKey === systemComponentKey)\n            .map(row => this.getEnvironmentByKey(row.environmentKey))\n    }\n\n    settingRowsForSystemComponent(systemComponent: SystemComponentDto) {\n        return  this.settingRows().filter(r => r.systemComponentKey === systemComponent.key)\n    }\n}\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SystemDescriptionService implements OnDestroy {\n\n    constructor(\n        private systemDescriptionControllerService: SystemDescriptionControllerService,\n        private metaModelControllerService: MetaModelControllerService,\n        private connectionControllerService: ConnectionControllerService) {\n        this.init()\n    }\n\n    private store = new BehaviorSubject<SystemDescriptionState>({systemDescription: null})\n\n    systemDescription$ = this.store.pipe(\n        map(state => state.systemDescription),\n        distinctUntilChanged(),\n    )\n\n    systemTypeDescriptors$ = new BehaviorSubject<SystemTypeDescriptorDto[]>(null)\n\n    private subscriptions: Subscription[] = []\n\n    private init() {\n        this.subscriptions.push(logChangesToObservable('systemDescriptionStore::systemDescription$ >>', this.systemDescription$))\n        this.loadSystemTypeDescriptors()\n        this.loadSystemDescription()\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(s => s.unsubscribe())\n    }\n\n    loadSystemTypeDescriptors() {\n        this.systemDescriptionControllerService.getSystemTypeDescriptorsUsingGet({}).subscribe(dto => this.systemTypeDescriptors$.next(dto))\n    }\n\n    loadSystemDescription() {\n        this.systemDescriptionControllerService.getSystemDescriptionUsingGet({}).subscribe(dto => {\n            this.store.next({systemDescription: dto})\n        })\n    }\n\n    private get systemDescription() : SystemDescriptionDto {\n        return this.store.value.systemDescription\n    }\n\n    private saveSystemDescription(systemDescription: SystemDescriptionDto) {\n        this.systemDescriptionControllerService.setSystemDescriptionUsingPost({\n            body : this.systemDescription\n        }).subscribe(() => this.loadSystemDescription())\n    }\n\n    addSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents.push(systemComponent)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteSystemComponent(systemComponent: SystemComponentDto) {\n        this.systemDescription.systemComponents = this.systemDescription.systemComponents.filter((val => val.key != systemComponent.key))\n        this.systemDescription.environments.forEach(environment => {\n            let envSettings = this.systemDescription.settings[environment.key]\n            if (envSettings) {\n                delete envSettings[systemComponent.key]\n            }\n        })\n\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    updateSystemComponent(old: SystemComponentDto, updated: SystemComponentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.systemComponents.findIndex((val => val.key === old.key))\n        systemDescription.systemComponents[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n    addEnvironment(environment: EnvironmentDto) {\n        this.systemDescription.environments.push(environment)\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    deleteEnvironment(environment: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        systemDescription.environments = systemDescription.environments.filter((val => val.key != environment.key))\n        delete systemDescription.settings[environment.key]\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateEnvironment(old: EnvironmentDto, updated: EnvironmentDto) {\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        let idx = systemDescription.environments.findIndex((val => val.key === old.key))\n        systemDescription.environments[idx] = updated\n        this.saveSystemDescription(systemDescription)\n    }\n\n\n    addSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    updateSetting(data: SettingsDialogData) {\n        let settingObject = {}\n        data.settings.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        let systemDescription: SystemDescriptionDto = this.systemDescription\n        if (!systemDescription.settings[data.environmentKey]) {\n            systemDescription.settings[data.environmentKey] = {}\n        }\n        systemDescription.settings[data.environmentKey][data.systemComponentKey] = settingObject\n        this.saveSystemDescription(systemDescription)\n    }\n\n    deleteSetting(data: SettingsDialogData) {\n        delete (this.systemDescription.settings[data.environmentKey])[data.systemComponentKey]\n        this.saveSystemDescription(this.systemDescription)\n    }\n\n    getSystemTypes(): string[] {\n        return ['MONGO','ELASTICSEARCH']\n    }\n\n    getSettingDescriptors(systemType: string) {\n        if (systemType === 'MONGO') {\n            return [\n                {\n                    key: 'connectionUrl',\n                    description: 'enter a connection url to the mongo db'\n                },\n                {\n                    key: 'dbName',\n                    description: 'enter the mongo database'\n                }\n            ]\n        } else\n            return [];\n    }\n\n    testConnection(systemType: string, settings: any): Promise<ConnectionTestResponseDto> {\n        return this.connectionControllerService.testConnectionUsingPost({ body: {\n            settings,\n            systemType\n        }}).toPromise()\n    }\n\n    loadEnvironmentSystemStructure(envKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getEnvironmentStructureUsingGet({ envKey }).toPromise()\n    }\n\n    loadEnvironmentSystemComponentStructure(envKey: string, systemComponentKey: string): Promise<StructureDto> {\n        return this.systemDescriptionControllerService.getSystemComponentEnvironmentStructureUsingGet({ envKey, systemComponentKey }).toPromise()\n    }\n\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescription",
                        "type": "SystemDescriptionDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "systemDescription",
                        "type": "SystemDescriptionDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getDefaultEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "EnvironmentDto",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEnvironmentByKey",
                    "args": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentDto",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnvironments",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnvironmentsWithSettingsForSystemComponentKey",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemComponentByKey",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SystemComponentDto",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSystemType",
                    "args": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingRows",
                    "args": [],
                    "optional": false,
                    "returnType": "SettingRow[]",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settingRowsForSystemComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ViewModelReducer",
            "id": "class-ViewModelReducer-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "EntityDto",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "EntityDto",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "viewModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewModel",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methods": [
                {
                    "name": "columnIdx",
                    "args": [
                        {
                            "name": "colomn",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "colomn",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deselect",
                    "args": [
                        {
                            "name": "column",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entry",
                            "type": "ListEntryPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entry",
                            "type": "ListEntryPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "column",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entry",
                            "type": "ListEntryPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entry",
                            "type": "ListEntryPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toColumn",
                    "args": [
                        {
                            "name": "item",
                            "type": "EntityDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColumnPart",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "EntityDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "ActionButtonsComponent",
            "id": "component-ActionButtonsComponent-4dd2843b489d93d65137c1138b58ee4386313224fd0cb16a338c59112cd3737af3fdfb4f5027d3759b377c2fad4d56dede48394ec982ba2d4f9c716bb8d3201c",
            "file": "src/app/common/styleguide/action-buttons/action-buttons.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-action-buttons",
            "styleUrls": [
                "./action-buttons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./action-buttons.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ActionsSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "callActionHandler",
                    "args": [
                        {
                            "name": "action",
                            "type": "ActionSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ActionSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface ActionSpec {\n  handler: () => void\n  label: string\n  id? : string\n}\n\nexport interface ActionsSpec {\n  actions: ActionSpec[]\n}\n\n@Component({\n  selector: 'app-action-buttons',\n  templateUrl: './action-buttons.component.html',\n  styleUrls: ['./action-buttons.component.scss']\n})\nexport class ActionButtonsComponent implements OnInit {\n\n  constructor() { }\n\n  actions: ActionSpec[]\n\n  @Input()\n  spec: ActionsSpec\n\n  ngOnInit(): void {\n    // cfr https://stackoverflow.com/questions/71011494/angular-8-click-event-not-firing-inside-ngfor-when-iterating-over-object-array\n    this.actions = this.spec.actions\n  }\n\n  callActionHandler(action: ActionSpec) {\n    action.handler()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./action-buttons.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"spec\" class=\"d-flex flex-row mb-3\">\n    <ng-container *ngFor=\"let action of this.actions\">\n        <a class=\"btn  btn-sm btn-outline-primary  m-2\"\n           (click)=\"callActionHandler(action)\">{{action.label}}\n        </a>\n    </ng-container>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cb305de246bc8e937e1b8d3fb215e5dc4daf1db31e1f3d02b9e066b7e669453cf012b9de3627868e69c7a2927a77da80260a327327e7c85244a230fac66ab75b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'fabric-frontend-ng'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'fabric-frontend-ng';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "BackButtonComponent",
            "id": "component-BackButtonComponent-d0b64b5c602e1545f30e5142393474f20627e5484d2da6bc73bb31f380a66d93f3fed181196b0b7e048f1e0abdd546dff4fcba75f32979b1742a20a7d5d1c5e3",
            "file": "src/app/common/styleguide/back-button/back-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-back-button",
            "styleUrls": [
                "./back-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any[] | string | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-back-button',\n  templateUrl: './back-button.component.html',\n  styleUrls: ['./back-button.component.scss']\n})\nexport class BackButtonComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  routerLink: any[] | string | null | undefined\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./back-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a style=\"text-decoration: none; \" [routerLink]=\"routerLink\">&thinsp; &#9664; &nbsp;</a>\n"
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-3c8cac2e633e9921b446f718fc5509b325b9b153344a7235a88b1168895c6aa1a5c96803a32ef508048b35512180c52be5793ae431918af253cfdc29dfbe7c6b",
            "file": "src/app/common/styleguide/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumbs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "BreadcrumbItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\nexport interface BreadcrumbItem {\n  label?: string\n  route?: string | string[]\n}\n\n@Component({\n  selector: 'app-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  breadcrumbs: BreadcrumbItem[]\n\n  ngOnInit(): void {\n  }\n\n  get active(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-1\n    return this.breadcrumbs[idx]\n  }\n\n  get parentOfActive(): BreadcrumbItem {\n    let idx = this.breadcrumbs.length-2\n    return this.breadcrumbs[idx]\n  }\n\n  get allParents(): BreadcrumbItem[] {\n    let idxActive = this.breadcrumbs.length-1\n    return this.breadcrumbs.slice(0, idxActive)\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "active": {
                    "name": "active",
                    "getSignature": {
                        "name": "active",
                        "type": "",
                        "returnType": "BreadcrumbItem",
                        "line": 23
                    }
                },
                "parentOfActive": {
                    "name": "parentOfActive",
                    "getSignature": {
                        "name": "parentOfActive",
                        "type": "",
                        "returnType": "BreadcrumbItem",
                        "line": 28
                    }
                },
                "allParents": {
                    "name": "allParents",
                    "getSignature": {
                        "name": "allParents",
                        "type": "[]",
                        "returnType": "BreadcrumbItem[]",
                        "line": 33
                    }
                }
            },
            "templateData": "<nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <!-- <app-back-button [routerLink]=\"parentOfActive.route\"></app-back-button> -->\n        <li *ngFor=\"let breadcrumb of allParents\" class=\"breadcrumb-item\"><a [routerLink]=\"breadcrumb.route\">{{breadcrumb.label}}</a></li>\n        <li class=\"breadcrumb-item active\" aria-current=\"page\">{{active.label}}</li>\n    </ol>\n</nav>\n"
        },
        {
            "name": "CommandProgressComponent",
            "id": "component-CommandProgressComponent-5185119006d2303a9cb1235c61b8a81d22f108f05ed8716bc8e64affe3b256b20508d24dee649da92075d06686987c839021125e268eeccf6d6aa576ec9a7843",
            "file": "src/app/common/styleguide/command-progress/command-progress.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-command-progress",
            "styleUrls": [
                "./command-progress.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./command-progress.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ExecutionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "commandClasses",
                    "args": [
                        {
                            "name": "command",
                            "type": "ExecutionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "command",
                            "type": "ExecutionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "commandProgressBarStyle",
                    "args": [
                        {
                            "name": "command",
                            "type": "ExecutionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subCommands",
                            "type": "ExecutionDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "command",
                            "type": "ExecutionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subCommands",
                            "type": "ExecutionDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isComposite",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | []",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemChildren",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExecutionDto[]",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemClasses",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemProgressBarStyle",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemWrapperStyle",
                    "args": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Item",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subCommandPercent",
                    "args": [
                        {
                            "name": "subCommand",
                            "type": "ExecutionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subCommands",
                            "type": "ExecutionDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCommand",
                            "type": "ExecutionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subCommands",
                            "type": "ExecutionDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ExecutionDto} from \"@fabric/models\";\n\ninterface Item {\n    command: ExecutionDto\n    depth: number\n}\n\n@Component({\n    selector: 'app-command-progress',\n    templateUrl: './command-progress.component.html',\n    styleUrls: ['./command-progress.component.scss']\n})\nexport class CommandProgressComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    @Input()\n    command: ExecutionDto\n\n    items: Item[]\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.command) {\n            let items: Item[] = []\n            recursiveAddItems(this.command, items, 0)\n            this.items = items\n        }\n\n        function recursiveAddItems(command: ExecutionDto, items: Item[], depth) {\n            items.push({\n                command,\n                depth\n            })\n            command.children?.forEach(subCommand => recursiveAddItems(subCommand, items, depth + 1))\n        }\n    }\n\n    ngOnInit(): void {\n    }\n\n    isComposite(item: Item): boolean | ExecutionDto[] {\n        if (!(item.command.children && item.command.children.length > 0)) return false\n        return item.command.children\n    }\n\n    itemWrapperStyle(item: Item) {\n        let indent = item.depth * 50;\n        return `margin-left: ${indent}px;`\n    }\n\n    itemChildren(item: Item): ExecutionDto[] {\n        return item.command.children\n    }\n\n\n    itemProgressBarStyle(item: Item): string {\n        return `width: ${item.command.percentDone}%;`\n    }\n\n    itemClasses(item: Item): string[] {\n        return this.commandClasses(item.command)\n    }\n\n    commandClasses(command: ExecutionDto) {\n        let classNames = ['progress-bar']\n        switch (command.status) {\n            case \"RUNNING\":\n                classNames.push('bg-info', 'progress-bar-animated', 'progress-bar-striped')\n                break\n            case \"PAUSED\":\n                classNames.push('bg-info')\n                break\n            case \"UNRESPONSIVE\":\n                classNames.push('bg-warning', 'progress-bar-striped', 'progress-bar-animated')\n                break\n            case \"DONE\" :\n                classNames.push('bg-success')\n                break\n            default:\n                classNames.push('bg-danger')\n        }\n        return classNames\n    }\n\n    subCommandPercent(subCommand: ExecutionDto, subCommands: ExecutionDto[]) {\n        return subCommand.percentDone\n    }\n\n    commandProgressBarStyle(command: ExecutionDto, subCommands: ExecutionDto[]) {\n        return `width: ${command.percentDone/subCommands.length}%;`\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./command-progress.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"items\">\n    <div *ngFor=\"let item of items\" [style]=\"itemWrapperStyle(item)\">\n        {{item.command.label}}\n        <ng-container *ngIf=\"isComposite(item) as subCommands\">\n            <div class=\"progress\">\n                <div *ngFor=\"let subCommand of subCommands\" role=\"progressbar\"\n                     [ngClass]=\"commandClasses(subCommand)\"\n                     [attr.aria-valuenow]=\"subCommandPercent(subCommand, subCommands)\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                     [style]=\"commandProgressBarStyle(subCommand, subCommands)\">\n                </div>\n            </div>\n\n        </ng-container>\n        <ng-container *ngIf=\"!isComposite(item)\">\n            <div class=\"progress\">\n                <div role=\"progressbar\"\n                     [ngClass]=\"itemClasses(item)\"\n                     [attr.aria-valuenow]=\"item.command.percentDone\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                     [style]=\"itemProgressBarStyle(item)\">\n                    {{item.command.percentDone}}%\n                </div>\n            </div>\n        </ng-container>\n    </div>\n</ng-container>\n\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-1009ff9abfa95b495160a829a45d39299156678089bca892c691485174519748ddceaea8b57c760e1c4825ec3f9d1276fb448deb53fdfbbd00cdc105ce31c98b",
            "file": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog",
            "styleUrls": [
                "./confirmation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ConfirmationDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faExclamationTriangle",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nexport interface ConfirmationDialogSpec {\n  title: string\n  message: string\n  warning? : string\n  cancel: () => void\n  confirm: () => void\n}\n\n@Component({\n  selector: 'app-confirmation-dialog',\n  templateUrl: './confirmation-dialog.component.html',\n  styleUrls: ['./confirmation-dialog.component.scss']\n})\nexport class ConfirmationDialogComponent {\n\n  @Input()\n  spec: ConfirmationDialogSpec\n\n  faExclamationTriangle=faExclamationTriangle\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm()\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".triangle-icon {\n  float: left;\n  padding-right: 10px;\n}\n",
                    "styleUrl": "./confirmation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"spec\" class=\"modal-dialog\">\n  <div class=\"modal-content\">\n    <app-modal-header [title]=\"spec.title\" (onCancel)=\"cancel()\"></app-modal-header>\n    <div class=\"modal-body\">\n      <p>{{spec.message}}</p>\n      <p><div *ngIf=\"spec.warning\">\n        <fa-icon [icon]=\"faExclamationTriangle\" size=\"3x\" class=\"text-danger triangle-icon\"></fa-icon>\n        {{spec.warning}}\n      </div>\n    </div>\n    <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmText]=\"'Yes'\" [cancelText]=\"'No'\"></app-modal-footer>\n  </div>\n</div>\n"
        },
        {
            "name": "ConnectionSettingsDialogComponent",
            "id": "component-ConnectionSettingsDialogComponent-fec792e6c1963bc75d104ed7f35b2c1152fdd4a39de26f53e9b8de7ef7c9339284b2c30b2b6f0e421ba967a16ce95bfbbf48f9cdd8eed8d30c7c8cde1b94b511",
            "file": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-dialog",
            "styleUrls": [
                "./connection-settings-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connection-settings-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "SettingsDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "connectionTester",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionTester",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "faBolt",
                    "defaultValue": "faBolt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "faCheckCircle",
                    "defaultValue": "faCheckCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "settingDescriptors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingDescriptorDto[]",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "specWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsDialogSpecWrapper",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancelTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "configureSettingsControlForSystemType",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeyControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSettingDescriptors",
                    "args": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SettingDescriptorDto[]",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnvironmentChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSystemComponentKeyChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "runTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "settingsControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormArray",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "settingValueControl",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingValueControlInvalid",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "systemComponentKeyControl",
                    "args": [],
                    "optional": false,
                    "returnType": "AbstractControl",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponentKeyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {ConnectionTestResponseDto, EnvironmentDto, SettingDescriptorDto, SystemComponentDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {Setting, SystemDescriptionService} from \"../../../system-description.service\";\nimport {faBolt, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\n\nexport interface SettingsDialogData {\n    systemComponentKey: string,\n    environmentKey: string,\n    settings: Setting[]\n}\n\nclass ConnectionTester {\n    constructor(private service: SystemDescriptionService) {}\n\n    testRunning: boolean = false\n    testResult: ConnectionTestResponseDto = null\n\n    run(settingObject: {}, systemType) {\n        this.testRunning = true\n        this.testResult = null\n        this.service.testConnection(systemType, settingObject).then((result)=>  {\n            this.testRunning = false\n            this.testResult = result\n        })\n    }\n}\n\nexport interface SettingsDialogSpec {\n    mode: 'ADD' | 'EDIT'\n    systemTypes: SystemTypeDescriptorDto[]\n    systemComponents: SystemComponentDto[]\n    environments: EnvironmentDto[]\n    data: SettingsDialogData\n    cancel: () => void\n    confirm: (data: SettingsDialogData) => void\n}\n\nclass SettingsDialogSpecWrapper {\n    constructor(private spec: SettingsDialogSpec) {\n    }\n\n    getSystemType(systemComponentKey: string): string {\n        return this.spec.systemComponents.find(systemComponent => systemComponent.key === systemComponentKey)?.systemType\n    }\n}\n\n\n@Component({\n    selector: 'app-settings-dialog',\n    templateUrl: './connection-settings-dialog.component.html',\n    styleUrls: ['./connection-settings-dialog.component.scss']\n})\nexport class ConnectionSettingsDialogComponent implements OnInit {\n\n    constructor(private service: SystemDescriptionService) {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SettingsDialogSpec\n\n    specWrapper: SettingsDialogSpecWrapper\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.specWrapper = new SettingsDialogSpecWrapper(this.spec)\n            this.configureSettingsControlForSystemType(this.systemType)\n            if (this.spec.mode==='EDIT'){\n                this.formGroup.setValue(this.spec.data)\n            } else {\n                this.systemComponentKeyControl().setValue(this.spec.data.systemComponentKey)\n            }\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n            this.connectionTester = null\n        }\n    }\n\n    get systemType(): string {\n        return this.specWrapper.getSystemType(this.spec.data.systemComponentKey)\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environmentKey: new FormControl(null, [Validators.required]),\n        systemComponentKey: new FormControl(null, [Validators.required]),\n        settings: new FormArray([])\n    })\n\n\n    environmentKeyControl(): AbstractControl {\n        return this.formGroup.get('environmentKey')\n    }\n\n    onEnvironmentChange() {\n\n    }\n\n    environmentKeyControlInvalid() {\n        return showValidationMessages(this.environmentKeyControl())\n    }\n\n    systemComponentKeyControl(): AbstractControl {\n        return this.formGroup.get('systemComponentKey')\n    }\n\n    onSystemComponentKeyChange() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        this.configureSettingsControlForSystemType(systemType);\n    }\n\n    systemComponentKeyControlInvalid() {\n      return showValidationMessages(this.systemComponentKeyControl())\n    }\n\n    settingsControl(): FormArray {\n        return <FormArray>this.formGroup.get('settings')\n    }\n\n    settingValueControl(i: number): AbstractControl {\n        return this.settingsControl().controls[i].get('value')\n    }\n\n    settingValueControlInvalid(i: number): boolean {\n        return showValidationMessages(this.settingValueControl(i))\n    }\n\n    settingDescriptors: SettingDescriptorDto[] = []\n\n    configureSettingsControlForSystemType(systemType: string) {\n        this.settingDescriptors = this.getSettingDescriptors(systemType)\n        this.settingsControl().controls = []\n        this.settingDescriptors.forEach(descriptor =>\n            this.settingsControl().push(new FormGroup({\n                key: new FormControl(descriptor.key, [Validators.required]),\n                value: new FormControl(null, [Validators.required])\n            }))\n        )\n    }\n\n    private getSettingDescriptors(systemType: string): SettingDescriptorDto[] {\n        let systemTypeDescriptorDto = this.spec.systemTypes.find(st => st.systemType === systemType);\n        return systemTypeDescriptorDto ? systemTypeDescriptorDto.settingDescriptors : []\n    }\n\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n    // connection test\n\n    faBolt = faBolt\n    faCheckCircle = faCheckCircle\n    connectionTester: ConnectionTester\n\n    runTest() {\n        let systemComponentKey = this.systemComponentKeyControl().value;\n        let systemType = this.specWrapper.getSystemType(systemComponentKey)\n        let settingObject = {}\n        this.settingsControl().value.forEach(setting => {\n            settingObject[setting.key] = setting.value\n        })\n\n        this.connectionTester = new ConnectionTester(this.service)\n        this.connectionTester.run(settingObject, systemType)\n\n    }\n\n    cancelTest() {\n        this.connectionTester = null\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./connection-settings-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "systemType": {
                    "name": "systemType",
                    "getSignature": {
                        "name": "systemType",
                        "type": "string",
                        "returnType": "string",
                        "line": 83
                    }
                }
            },
            "templateData": "<div *ngIf=\"formGroup && spec\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"'Connection settings'\" (onCancel)=\"cancel()\"></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"form-floating mb-3\" >\n                    <select id=\"environmentKey\" formControlName=\"environmentKey\" class=\"form-select\" [class.is-invalid]=\"environmentKeyControlInvalid()\" (change)=\"onEnvironmentChange()\" >\n                        <option *ngFor=\"let environment of spec.environments\"\n                                [ngValue]=\"environment.key\">{{environment.key}}</option>\n                    </select>\n                    <label for=\"environmentKey\" class=\"form-label\">Environment</label>\n                    <app-validation-messages [control]=\"environmentKeyControl()\"></app-validation-messages>\n                </div>\n\n                <div class=\"form-floating  mb-3\">\n                    <select disabled id=\"systemComponentKey\" formControlName=\"systemComponentKey\" class=\"form-select\" [class.is-invalid]=\"systemComponentKeyControlInvalid()\" (change)=\"onSystemComponentKeyChange()\" >\n                        <option *ngFor=\"let systemComponent of spec.systemComponents\"\n                                [ngValue]=\"systemComponent.key\">{{systemComponent.key}}</option>\n                    </select>\n                    <label for=\"systemComponentKey\" class=\"form-label\">Datasource</label>\n                    <app-validation-messages [control]=\"systemComponentKeyControl()\"></app-validation-messages>\n                </div>\n\n                <ng-container formArrayName=\"settings\">\n                    <ng-container *ngFor=\"let settingDescriptor of settingDescriptors; let i=index\">\n                        <div class=\"form-floating mb-3\">\n                            <input [id]=\"settingDescriptor.key\" [formControl]=\"settingValueControl(i)\" [placeholder]=\"settingDescriptor.placeHolder\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"settingValueControlInvalid(i)\">\n                            <label [for]=\"settingDescriptor.key\" >{{settingDescriptor.description}}</label>\n                            <!-- <div id=\"label\" class=\"form-text\">{{settingDescriptor.placeHolder}}</div>-->\n                        </div>\n                    </ng-container>\n                </ng-container>\n\n                <br>\n                <span>\n                    <button type=\"button\" class=\"btn btn-outline-primary\" [disabled]=\"connectionTester?.testRunning\" (click)=\"runTest()\">\n                        <fa-icon  [icon]=\"faBolt\"></fa-icon> Test Connection\n                    </button>\n                    &nbsp;\n                    <ng-container *ngIf=\"connectionTester?.testRunning\">\n                        <app-loading (onClick)=\"cancelTest()\"></app-loading>\n                    </ng-container>\n                    <ng-container *ngIf=\"connectionTester?.testResult\">\n                        <fa-icon *ngIf=\"connectionTester.testResult.result\" size=\"2x\" [icon]=\"faCheckCircle\" style=\"vertical-align:bottom; color: mediumseagreen\"></fa-icon>\n                        <span>\n                            <fa-icon *ngIf=\"!connectionTester.testResult.result\" size=\"2x\" [icon]=\"faCheckCircle\" style=\"vertical-align:bottom; color: orangered\"></fa-icon>\n                            {{connectionTester.testResult.message}}\n                        </span>\n                    </ng-container>\n                </span>\n\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmDisabled]=\"!formGroup.valid\"></app-modal-footer>\n    </div>\n</div>"
        },
        {
            "name": "ConnectionSettingsPageComponent",
            "id": "component-ConnectionSettingsPageComponent-68339f64ae29e1d90be9aa53eb2c275dd833b42a5351a136a26b5023ff93c5b7ce373fa2bcdf874bc8e5f39a56272ca2f013a628bf4e6c02d20b4ccdda59514c",
            "file": "src/app/settings/connection-settings-page/connection-settings-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-page",
            "styleUrls": [
                "./connection-settings-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connection-settings-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "systemTypeDescriptors$",
                    "defaultValue": "this.systemDescriptionService.systemTypeDescriptors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponent",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {BreadcrumbItem} from \"@fabric/common\";\nimport {SystemDescriptionDto} from \"@fabric/models\";\nimport {SystemDescriptionService, SystemDescriptionWrapper} from \"../system-description.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {RoutingService} from \"../../common/routing.service\";\n\n@Component({\n  selector: 'app-settings-page',\n  templateUrl: './connection-settings-page.component.html',\n  styleUrls: ['./connection-settings-page.component.scss']\n})\nexport class ConnectionSettingsPageComponent implements OnInit {\n\n  constructor(private activatedRoute: ActivatedRoute, private systemDescriptionService: SystemDescriptionService, private routingService : RoutingService) {}\n\n  get breadcrumbs() : BreadcrumbItem[] {\n    return [\n      {\n        label: 'Home',\n        route: this.routingService.homeRoute()\n      },\n      {\n        label: 'Datasources',\n        route: this.routingService.dataSourcesPageRoute()\n      },\n      {\n        label: this.systemComponentKey,\n        route: this.routingService.dataSourcesPageRouteWithSelection(this.systemComponentKey)\n      },\n      {\n        label: 'Connection Settings'\n      }\n    ]\n  }\n\n  systemComponentKey: string\n\n  systemDescription$ = this.systemDescriptionService.systemDescription$\n\n  systemTypeDescriptors$ = this.systemDescriptionService.systemTypeDescriptors$\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe((params) => {\n      this.systemComponentKey = params.get('systemComponentKey')\n      this.systemDescriptionService.loadSystemDescription()\n      this.systemDescriptionService.loadSystemTypeDescriptors()\n    })\n  }\n\n  systemComponent(systemDescription: SystemDescriptionDto, systemComponentKey: string) {\n    return new SystemDescriptionWrapper(systemDescription).getSystemComponentByKey(systemComponentKey)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./connection-settings-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "[]",
                        "returnType": "BreadcrumbItem[]",
                        "line": 17
                    }
                }
            },
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'settings'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <div class=\"row\">\n        <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n    </div>\n</ng-template>\n\n\n<ng-template #breadcrumb>\n\n</ng-template>\n\n\n<ng-template #middle>\n    <ng-container *ngIf=\"systemTypeDescriptors$ | async as systemTypeDescriptors\">\n        <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n            <app-settings-panel [systemDescription]=\"systemDescription\" [systemTypes]=\"systemTypeDescriptors\"\n                                [systemComponent]=\"systemComponent(systemDescription, systemComponentKey)\"></app-settings-panel>\n        </ng-container>\n    </ng-container>\n</ng-template>"
        },
        {
            "name": "ConnectionSettingsPanelComponent",
            "id": "component-ConnectionSettingsPanelComponent-0fadcf24b6784b836d0dd6e1d12dbf3c4eb4803d8f933e984889731fd50bb4b6cac37ba311efec786001a0d94c7836d5e2f9ecc48e44d99602fab732a85be01d",
            "file": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings-panel",
            "styleUrls": [
                "./connection-settings-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connection-settings-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "SystemComponentDto",
                    "decorators": []
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "SystemTypeDescriptorDto[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "settingsDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addSetting",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "availableEnvironments",
                    "args": [],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeSettingsDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "editSetting",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSettingsDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SettingsDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SettingsDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeSetting",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setting",
                            "type": "SettingRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settingRowsForSystemComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "SettingRow[]",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settingsDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {HasConfirmationDialogMixin, ModalService} from \"@fabric/common\";\nimport {SettingRow, SystemDescriptionService, SystemDescriptionWrapper} from \"../../system-description.service\";\nimport {SettingsDialogSpec} from \"./connection-settings-dialog/connection-settings-dialog.component\";\n\n@Component({\n  selector: 'app-settings-panel',\n  templateUrl: './connection-settings-panel.component.html',\n  styleUrls: ['./connection-settings-panel.component.scss']\n})\nexport class ConnectionSettingsPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n  constructor(modalService: ModalService, private service: SystemDescriptionService) {\n    super(modalService);\n  }\n\n  @Input()\n  systemTypes: SystemTypeDescriptorDto[]\n\n  @Input()\n  systemDescription: SystemDescriptionDto\n\n  @Input()\n  systemComponent: SystemComponentDto\n\n  ngOnInit(): void {\n  }\n\n  // connection settings\n\n  settingsDialogSpec: SettingsDialogSpec\n\n  settingsDialogId(): string {\n    return 'settings-dialog'\n  }\n\n  private openSettingsDialog(spec: SettingsDialogSpec) {\n    this.settingsDialogSpec = spec\n    this.modalService.open(this.settingsDialogId())\n  }\n\n  private closeSettingsDialog() {\n    this.settingsDialogSpec = null\n    this.modalService.close(this.settingsDialogId())\n  }\n\n  public addSetting(systemDescription: SystemDescriptionDto) {\n    this.openSettingsDialog({\n      mode: 'ADD',\n      systemTypes: this.systemTypes,\n      environments: this.availableEnvironments(),\n      systemComponents: systemDescription.systemComponents,\n      data: {\n        environmentKey: null,\n        systemComponentKey: this.systemComponent.key,\n        settings: []\n      },\n      confirm: (data) => {\n        this.service.addSetting(data)\n        this.closeSettingsDialog()\n      },\n      cancel: () => this.closeSettingsDialog()\n    })\n  }\n\n  public editSetting(systemDescription: SystemDescriptionDto, setting: SettingRow) {\n    this.openSettingsDialog({\n      mode: 'EDIT',\n      systemTypes: this.systemTypes,\n      environments: systemDescription.environments,\n      systemComponents: systemDescription.systemComponents,\n      data: {\n        environmentKey: setting.environmentKey,\n        systemComponentKey: setting.systemComponentKey,\n        settings: setting.settings\n      },\n      confirm: data => {\n        this.service.updateSetting(data)\n        this.closeSettingsDialog()\n      },\n      cancel: () => this.closeSettingsDialog()\n    })\n  }\n\n  public removeSetting(systemDescription: SystemDescriptionDto, setting: SettingRow) {\n    this.openConfirmationDialog({\n      title: 'Confirm delete',\n      message: `Delete ${setting.systemComponentKey} ${setting.environmentKey}?`,\n      confirm: () => {\n        this.service.deleteSetting(setting)\n        this.closeConfirmationDialog()\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    let takenEnvKeys: string[] = this.settingRowsForSystemComponent().map(row => row.environmentKey)\n    return this.systemDescription.environments.filter(env =>\n        !takenEnvKeys.find((takenEnv) => takenEnv === env.key)\n    )\n  }\n\n  public settingRowsForSystemComponent(): SettingRow[] {\n    return new SystemDescriptionWrapper(this.systemDescription).settingRowsForSystemComponent(this.systemComponent)\n  }\n\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-settings'\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./connection-settings-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<app-panel>\n    <h4>Connection settings</h4>\n\n    <div *ngIf=\"systemDescription.environments.length == 0\" class=\"intro-container\" >\n        <app-intro [title]=\"'No environments defined yet.'\" >\n            <p>First create an environment to connect the datasource to.</p>\n        </app-intro>\n    </div>\n\n    <div *ngIf=\"systemDescription.environments.length > 0 && settingRowsForSystemComponent().length == 0\" class=\"intro-container\" >\n        <app-intro [title]=\"'No connection defined yet.'\" >\n            <p>Add <a href=\"javascript:void(0);\" (click)=\"addSetting(systemDescription)\" > first connection </a> to an environment.</p>\n        </app-intro>\n    </div>\n\n\n    <table *ngIf=\"settingRowsForSystemComponent().length > 0\"  class=\"table table-sm table-striped table-bordered\">\n        <thead>\n        <tr>\n            <th scope=\"col\">Environment</th>\n            <th scope=\"col\">Datasource</th>\n            <th scope=\"col\">Settings</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let settingRow of settingRowsForSystemComponent()\">\n            <td>{{settingRow.environmentKey}}</td>\n            <td>{{settingRow.systemComponentKey}}</td>\n            <td>\n                <div *ngFor=\"let setting of settingRow.settings\">\n                    {{setting.key}} = {{setting.value}}\n                </div>\n            </td>\n            <td>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"editSetting(systemDescription, settingRow)\">Edit\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"removeSetting(systemDescription, settingRow)\">Remove\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n         (click)=\"addSetting(systemDescription)\">\n        Add\n    </div>\n</app-panel>\n\n<jw-modal [id]=\"settingsDialogId()\">\n    <app-settings-dialog [spec]=\"settingsDialogSpec\"></app-settings-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "ConnectionStatusComponent",
            "id": "component-ConnectionStatusComponent-acc7ad3ecfbf0f0b4266b4416e63c66f193129259dc3cfa4c4f1daabb106b56f9d6fe51dd4832e6380a547c07bf7956c291665085a3b93865b4b8d635d9f5901",
            "file": "src/app/common/connection-status/connection-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-connection-status",
            "styleUrls": [
                "./connection-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./connection-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status$",
                    "defaultValue": "this.service.status$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showInToast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ConnectionStatusService} from \"./connection-status.service\";\n\n@Component({\n  selector: 'app-connection-status',\n  templateUrl: './connection-status.component.html',\n  styleUrls: ['./connection-status.component.scss']\n})\nexport class ConnectionStatusComponent implements OnInit {\n\n  constructor(private service: ConnectionStatusService) { }\n\n  ngOnInit(): void {\n  }\n\n  status$ = this.service.status$\n\n  showInToast() {\n      this.service.showToast()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./connection-status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ConnectionStatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ConnectionStatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"status$ | async as status\">\n    <app-status [status]=\"status\" (onClicked)=\"showInToast()\"></app-status>\n</ng-container>\n"
        },
        {
            "name": "ConsolePageComponent",
            "id": "component-ConsolePageComponent-5b8c48a160967b8a08f99c7d45570c85346174412f0ca807749ef998df4e99eb05645e5e850b377bec084edb5a888cd4f8c3525c0bda6d21e81c8f28e8910c3c",
            "file": "src/app/console-page/console-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-console-page",
            "styleUrls": [
                "./console-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./console-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\n        {\n            label: 'Home',\n            route: '/'\n        },\n        {\n            label: 'Console'\n        }\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbItem[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "routingService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RoutingService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSourceSelection",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "DataSourceSelection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "DataSourceSelection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {BreadcrumbItem} from \"@fabric/common\";\nimport {DataSourceSelection} from \"@fabric/component\";\nimport {HealthCheckService} from \"../common/health-check.service\";\nimport {SystemDescriptionService} from \"../settings/system-description.service\";\nimport {RoutingService} from \"../common/routing.service\";\n\n@Component({\n    selector: 'app-console-page',\n    templateUrl: './console-page.component.html',\n    styleUrls: ['./console-page.component.scss']\n})\nexport class ConsolePageComponent implements OnInit {\n\n    breadcrumbs: BreadcrumbItem[] = [\n        {\n            label: 'Home',\n            route: '/'\n        },\n        {\n            label: 'Console'\n        }\n    ]\n\n    constructor(\n        public routingService: RoutingService,\n        private healthCheckService: HealthCheckService,\n        private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    selectedDataSource: DataSourceSelection\n\n    selectDataSource(dataSource: DataSourceSelection) {\n        this.selectedDataSource = dataSource\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".intro-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  min-height: 50vh;\n}",
                    "styleUrl": "./console-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "healthCheckService",
                        "type": "HealthCheckService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "healthCheckService",
                        "type": "HealthCheckService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'console'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <div class=\"d-flex flex-row\">\n        <app-title text=\"Console\"></app-title>\n        <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n            <app-data-source-selection-panel [systemDescription]=\"systemDescription\" (selected)=\"selectDataSource($event)\"></app-data-source-selection-panel>\n        </ng-container>\n    </div>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n</ng-template>\n\n<ng-template #middle>\n    <div class=\"intro-container\" *ngIf=\"!selectedDataSource\">\n        <app-intro [title]=\"'Datasource connection required.'\" >\n            <p>Use the settings pages to set up\n                <a (click)=\"routingService.navigateToEnvironmentsPage()\" href=\"javascript:void(0);\">environments</a>\n                and\n                <a (click)=\"routingService.navigateToDataSourcesPage()\" href=\"javascript:void(0);\">datasources</a>\n                .\n            </p>\n            <p>Select a Datasource and Environment from the menu to connect.</p>\n        </app-intro>\n    </div>\n    <app-console-panel *ngIf=\"selectedDataSource\" [dataSource]=\"selectedDataSource\"></app-console-panel>\n</ng-template>"
        },
        {
            "name": "ConsolePanelComponent",
            "id": "component-ConsolePanelComponent-365e2ec319a351fdd0dbeb3f62c3c58d0f01c5017df9dadd7948529552bfeeff56e3ae07eef8a061b13c5793ec49af9d2ba95ced04646fb875bc795cc05275c6",
            "file": "src/app/console-page/console-panel/console-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ConsoleService"
                }
            ],
            "selector": "app-console-panel",
            "styleUrls": [
                "./console-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./console-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "DataSourceSelection",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 270,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "currentNavItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "descriptor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConsoleDescriptorDto",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "faPlay",
                    "defaultValue": "faPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "faTimes",
                    "defaultValue": "faTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        fields: new FormArray([])\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "historyItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HistoryItem[]",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "navItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "output$",
                    "defaultValue": "this.service.output$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 275
                },
                {
                    "name": "root$",
                    "defaultValue": "this.service.root$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "selection$",
                    "defaultValue": "this.service.selection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "snippetDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnippetDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 252
                },
                {
                    "name": "snippets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnippetDto[]",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "tabState",
                    "defaultValue": "'SNIPPETS'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabState",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methodsClass": [
                {
                    "name": "addHistoryItem",
                    "args": [
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "attributes",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSnippet",
                    "args": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "attributeMap",
                    "args": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeSnippetDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "convertHistoryItemToSnippet",
                    "args": [
                        {
                            "name": "historyItem",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "historyItem",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteHistoryItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSnippet",
                    "args": [
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fieldControl",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "historyCount",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "descriptorDto",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "descriptorDto",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initNavItems",
                    "args": [
                        {
                            "name": "navItems",
                            "type": "NavItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "navItems",
                            "type": "NavItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSnippets",
                    "args": [
                        {
                            "name": "snippets",
                            "type": "SnippetDto[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "snippets",
                            "type": "SnippetDto[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navItemSelected",
                    "args": [
                        {
                            "name": "navItem",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "navItem",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSnippetDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SnippetDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SnippetDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectHistoryItem",
                    "args": [
                        {
                            "name": "historyItem",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "historyItem",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tabState",
                            "type": "TabState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tabState",
                            "type": "TabState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snippetDelete",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snippetDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "snippetEdit",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snippetSelected",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSnippet",
                    "args": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "descriptor",
                            "type": "ConsoleDescriptorDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "SnippetDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup} from \"@angular/forms\";\nimport {faPlay, faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {HasConfirmationDialogMixin, ModalService} from \"@fabric/common\";\nimport {DataSourceSelection} from \"@fabric/component\";\nimport {ConsoleDescriptorDto, NavItem, PagingDto, QueryCompositeDto, QueryDto, SnippetDto} from \"@fabric/models\";\nimport {ConsoleService} from \"../console.service\";\nimport {HistoryItem} from \"./history-panel/history-panel.component\";\nimport {SnippetDialogData, SnippetDialogSpec} from \"./snippet-dialog/snippet-dialog.component\";\n\ntype TabState = 'HISTORY' | 'SNIPPETS'\n\n@Component({\n    selector: 'app-console-panel',\n    templateUrl: './console-panel.component.html',\n    styleUrls: ['./console-panel.component.scss'],\n    providers: [ConsoleService]\n})\nexport class ConsolePanelComponent extends HasConfirmationDialogMixin implements OnChanges {\n\n    faPlay = faPlay\n    faTimes = faTimes\n\n    constructor(protected modalService: ModalService, private service: ConsoleService) {\n        super(modalService)\n    }\n\n    @Input()\n    dataSource: DataSourceSelection\n\n    ngOnChanges(changes: SimpleChanges) {\n        let systemType = this.dataSource.systemComponent.systemType;\n        //this.service.loadNavItems(systemComponentKey).then(navItems => this.initNavItems(navItems))\n        this.service.loadDescriptor(systemType).then(descriptor => this.initForm(descriptor))\n        this.service.loadSnippets(systemType).then(snippets => this.initSnippets(snippets))\n    }\n\n    descriptor: ConsoleDescriptorDto\n\n    // input query\n\n    formGroup: FormGroup = new FormGroup({\n        fields: new FormArray([])\n    })\n\n    get fieldsControl(): FormArray {\n        return <FormArray>this.formGroup.get('fields')\n    }\n\n    fieldControl(i: number): FormControl {\n        return <FormControl>this.fieldsControl.controls[i]\n    }\n\n    private initForm(descriptorDto: ConsoleDescriptorDto) {\n        this.descriptor = descriptorDto\n        this.fieldsControl.controls = []\n        this.descriptor.items.forEach(item =>\n            this.fieldsControl.push(new FormControl(null))\n        )\n    }\n\n    selection$ = this.service.selection$\n    root$ = this.service.root$\n\n    doQuery() {\n        let attributes = {}\n        this.fieldsControl.value.forEach((fieldValue, i) => {\n            attributes[this.descriptor.items[i].name] = fieldValue\n        })\n        let paging: PagingDto = {\n            pageNr: 0,\n            pageSize: 5\n        }\n        let query: QueryDto = {\n            environmentKey: this.dataSource.environment.key,\n            systemComponentKey: this.dataSource.systemComponent.key,\n            attributes,\n            navItem: this.currentNavItem,\n            paging\n        }\n        let queryComposite: QueryCompositeDto = {\n            query,\n        }\n\n        this.service.runRequest(queryComposite)\n    }\n\n    clear() {\n        this.descriptor.items.forEach((descriptorItem, index) => {\n                this.fieldControl(index).setValue(null)\n            }\n        )\n        this.service.clearOutput()\n    }\n\n    // tabs history/snippet\n\n    tabState: TabState = 'SNIPPETS'\n\n    selectTab(tabState: TabState) {\n        this.tabState = tabState\n    }\n\n    // navitems\n\n    navItems: NavItem[]\n    currentNavItem: NavItem\n\n    private initNavItems(navItems: NavItem[]) {\n        return this.navItems = navItems;\n    }\n\n    navItemSelected(navItem: NavItem) {\n        this.currentNavItem = navItem\n        this.descriptor.items.forEach((descriptorItem, index) => {\n                let value = navItem.attributes[descriptorItem.name]\n                this.fieldControl(index).setValue(value)\n            }\n        )\n        this.doQuery()\n    }\n\n\n    // history\n\n    historyItems: HistoryItem[] = []\n\n    private addHistoryItem(attributes: {}) {\n        this.historyItems.push({\n            attributes\n        })\n    }\n\n    deleteHistoryItem(item: HistoryItem) {\n        const index = this.historyItems.indexOf(item, 0);\n        if (index > -1) {\n            this.historyItems.splice(index, 1);\n        }\n    }\n\n    historyCount(): string {\n        return this.historyItems.length == 0 ? '' : `(${this.historyItems.length})`\n    }\n\n    convertHistoryItemToSnippet(historyItem: HistoryItem) {\n        this.openSnippetDialog({\n            mode: 'NEW',\n            descriptor: this.descriptor,\n            data: {\n                attributes: historyItem.attributes\n            },\n            cancel: () => this.closeSnippetDialog(),\n            confirm: (data) => {\n                this.addSnippet(this.descriptor, data);\n                this.closeSnippetDialog()\n            }\n        })\n    }\n\n    selectHistoryItem(historyItem: HistoryItem) {\n        this.descriptor.items.forEach((descriptorItem, index) => {\n                let value = historyItem.attributes[descriptorItem.name]\n                this.fieldControl(index).setValue(value)\n            }\n        )\n    }\n\n\n    // snippets\n\n    snippets: SnippetDto[]\n\n    private initSnippets(snippets: SnippetDto[]) {\n        return this.snippets = snippets;\n    }\n\n    snippetSelected(snippet: SnippetDto) {\n        this.descriptor.items.forEach((item, index) => {\n            let value = snippet.attributes[item.name]\n            this.fieldControl(index).setValue(value)\n        })\n    }\n\n    snippetEdit(snippet: SnippetDto) {\n        this.openSnippetDialog({\n            mode: 'EDIT',\n            descriptor: this.descriptor,\n            data: {\n                id: snippet.id,\n                title: snippet.title,\n                attributes: snippet.attributes\n            },\n            cancel: () => this.closeSnippetDialog(),\n            confirm: (data) => {\n                this.updateSnippet(this.descriptor, data);\n                this.closeSnippetDialog()\n            }\n        })\n\n    }\n\n    snippetDelete(snippet: SnippetDto) {\n        this.openConfirmationDialog({\n            title: 'Confirm Delete Snippet',\n            message:  `Delete snippet '${snippet.title}'?`,\n            cancel: () => this.closeConfirmationDialog(),\n            confirm: () => { this.deleteSnippet(snippet); this.closeConfirmationDialog() }\n        })\n    }\n\n\n    private addSnippet(descriptor: ConsoleDescriptorDto, data: SnippetDialogData) {\n        let attributes = this.attributeMap(descriptor, data);\n        this.service.addSnippet(data.title, this.dataSource.systemComponent.systemType, attributes)\n            .then((snippets) => {\n                this.snippets = snippets\n            })\n    }\n\n    private attributeMap(descriptor: ConsoleDescriptorDto, data: SnippetDialogData) {\n        let attributes = {}\n        descriptor.items.forEach((item, index) => {\n            attributes[item.name] = data.fields[index]\n        })\n        return attributes;\n    }\n\n    private updateSnippet(descriptor: ConsoleDescriptorDto, data: SnippetDialogData) {\n        let attributes = this.attributeMap(descriptor, data);\n        this.service.editSnippet(data.id, data.title, this.dataSource.systemComponent.systemType, attributes)\n            .then((snippets) => {\n                this.snippets = snippets\n            })\n\n    }\n\n    private deleteSnippet(data: SnippetDialogData) {\n        this.service.deleteSnippet(data.id, this.dataSource.systemComponent.systemType)\n            .then((snippets) => {\n                this.snippets = snippets\n            })\n\n    }\n\n\n    // snippet dialog\n\n    snippetDialogId(): string {\n        return 'snippet-dialog-id'\n    }\n\n    snippetDialogSpec: SnippetDialogSpec;\n\n    private openSnippetDialog(spec: SnippetDialogSpec) {\n        this.snippetDialogSpec = spec\n        this.modalService.open(this.snippetDialogId())\n    }\n\n    private closeSnippetDialog() {\n        this.snippetDialogSpec = null\n        this.modalService.close(this.snippetDialogId())\n    }\n\n    // snippet deletion confirmation\n\n    confirmationDialogId() {\n        return \"confirm-snippet-delete\"\n    }\n\n    confirmationDialogSpec: any;\n\n\n\n    // output\n    output$ = this.service.output$\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./console-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "ConsoleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ConsoleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "fieldsControl": {
                    "name": "fieldsControl",
                    "getSignature": {
                        "name": "fieldsControl",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 46
                    }
                }
            },
            "templateData": "<div *ngIf=\"descriptor\" class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <app-panel>\n                <div style=\"min-height: 80vh\">\n                    <form [formGroup]=\"formGroup\">\n                        <ng-container formArrayName=\"fields\">\n                            <ng-container *ngFor=\"let item of descriptor.items; let i=index\">\n                                <ng-container *ngIf=\"item.inputType==='TEXT'\">\n                                    <input type=\"text\" class=\"form-control\" [formControl]=\"fieldControl(i)\" [placeholder]=\"item.placeholder\" >\n                                </ng-container>\n                                <ng-container *ngIf=\"item.inputType==='TEXTAREA'\">\n                                    <textarea rows=\"12\" class=\"form-control\" [formControl]=\"fieldControl(i)\" [placeholder]=\"item.placeholder\" ></textarea>\n                                </ng-container>\n                                <ng-container *ngIf=\"item.inputType==='SELECT'\">\n                                    <select class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                                        <option *ngFor=\"let selectValue of item.selectValues\"\n                                                [ngValue]=\"selectValue\">{{selectValue}}</option>\n                                    </select>\n                                </ng-container>\n                            </ng-container>\n                        </ng-container>\n                            <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"doQuery()\">\n                                <fa-icon [icon]=\"faPlay\"></fa-icon>\n                            </button>\n                        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"clear()\">\n                            <fa-icon [icon]=\"faTimes\"></fa-icon>\n                        </button>\n                    </form>\n\n                    <ul class=\"nav nav-tabs\">\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" [class.active]=\"tabState==='SNIPPETS'\" (click)=\"selectTab('SNIPPETS')\" href=\"javascript:void(0);\">\n                                Snippets\n                            </a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" [class.active]=\"tabState==='HISTORY'\" (click)=\"selectTab('HISTORY')\" href=\"javascript:void(0);\">\n                                History {{historyCount()}}\n                            </a>\n                        </li>\n                    </ul>\n                    <ng-container *ngIf=\"tabState==='SNIPPETS'\">\n                        <app-snippet-panel [snippets]=\"snippets\" (onSelect)=\"snippetSelected($event)\" (onEdit)=\"snippetEdit($event)\" (onDelete)=\"snippetDelete($event)\"></app-snippet-panel>\n                    </ng-container>\n                    <ng-container *ngIf=\"tabState==='HISTORY'\">\n                        <app-history-panel [historyItems]=\"historyItems\"\n                           (onConvert)=\"convertHistoryItemToSnippet($event)\"\n                           (onSelect)=\"selectHistoryItem($event)\"\n                           (onDelete)=\"deleteHistoryItem($event)\"\n                        >\n                        </app-history-panel>\n                    </ng-container>\n                </div>\n            </app-panel>\n        </div>\n        <div class=\"col-md-9\">\n            <app-panel *ngIf=\"output$ | async as output\">\n                <app-output-panel [output] = output >\n\n                </app-output-panel>\n            </app-panel>\n        </div>\n    </div>\n\n</div>\n\n<jw-modal [id]=\"snippetDialogId()\">\n    <app-snippet-dialog [spec]=\"snippetDialogSpec\"></app-snippet-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "DataSourceSelectionPanelComponent",
            "id": "component-DataSourceSelectionPanelComponent-b9e2bfffd7d72e807a083c4fa26aa0cb5141386966d1c1267c41c8f2310b6c0c5086d9b0caa46db00d08933dc9986bfed2de96a23770980f0971d2d54f062a0d",
            "file": "src/app/component/data-source-selection-panel/data-source-selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-source-selection-panel",
            "styleUrls": [
                "./data-source-selection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-source-selection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<DataSourceSelection>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "connected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "faBolt",
                    "defaultValue": "faBolt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "faTimes",
                    "defaultValue": "faTimes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        environment: new FormControl(null, [Validators.required]),\n        systemComponent: new FormControl(null, [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAvailableEnvironments",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedSystemComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {SystemDescriptionService, SystemDescriptionWrapper} from \"../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {faBolt, faTimes} from '@fortawesome/free-solid-svg-icons';\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\n\nexport interface DataSourceSelection {\n    environment: EnvironmentDto,\n    systemComponent: SystemComponentDto\n}\n\n@Component({\n    selector: 'app-data-source-selection-panel',\n    templateUrl: './data-source-selection-panel.component.html',\n    styleUrls: ['./data-source-selection-panel.component.scss']\n})\nexport class DataSourceSelectionPanelComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$;\n\n    connected: boolean = false;\n\n    faBolt = faBolt\n    faTimes = faTimes\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    systemDescription: SystemDescriptionDto\n\n    @Output()\n    selected = new EventEmitter<DataSourceSelection>()\n\n    formGroup: FormGroup = new FormGroup({\n        environment: new FormControl(null, [Validators.required]),\n        systemComponent: new FormControl(null, [Validators.required]),\n    })\n\n    get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    getAvailableEnvironments(systemDescription: SystemDescriptionDto): EnvironmentDto[] {\n        let systemComponentKey = this.systemComponentControl.value?.key\n        if (!systemComponentKey) return []\n        return new SystemDescriptionWrapper(systemDescription).getEnvironmentsWithSettingsForSystemComponentKey(systemComponentKey)\n    }\n\n    get systemComponentControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemComponent')\n    }\n\n    selectedSystemComponent() {\n        return this.systemComponentControl.value;\n    }\n\n\n    connect() {\n        let value = this.formGroup.value;\n        console.log('value:', value)\n        this.selected.emit(value)\n        this.connected = true\n    }\n\n    disconnect() {\n        this.selected.emit(null)\n        this.connected = false\n        this.formGroup.setValue({ environmentKey: null, systemComponentKey : null })\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".connection-container .disconnect-button {\n  visibility: hidden;\n}\n\n.connection-container:hover .disconnect-button {\n  visibility: visible;\n}\n",
                    "styleUrl": "./data-source-selection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentControl": {
                    "name": "environmentControl",
                    "getSignature": {
                        "name": "environmentControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 43
                    }
                },
                "systemComponentControl": {
                    "name": "systemComponentControl",
                    "getSignature": {
                        "name": "systemComponentControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 53
                    }
                }
            },
            "templateData": " <ng-container *ngIf=\"!connected\">\n    <form [formGroup]=\"formGroup\">\n        <div class=\"d-flex\">\n            <div class=\"ps-3\">\n                <select id=\"systemComponent\" formControlName=\"systemComponent\" class=\"form-select\">\n                    <option [ngValue]=\"null\" selected disabled>Datasource</option>\n                    <option *ngFor=\"let systemComponent of systemDescription.systemComponents\" [ngValue]=\"systemComponent\">{{systemComponent.key}}</option>\n                </select>\n            </div>\n            <div class=\"ps-1\">\n                <select id=\"environment\" formControlName=\"environment\" class=\"form-select\">\n                    <option [ngValue]=\"null\" selected disabled>Environment</option>\n                    <option *ngFor=\"let environment of getAvailableEnvironments(systemDescription)\" [ngValue]=\"environment\">{{environment.key}}</option>\n                </select>\n            </div>\n            <div class=\"ps-1\">\n                <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"connect()\" [disabled]=\"!formGroup.valid\">\n                    <fa-icon [icon]=\"faBolt\"></fa-icon>\n                </button>\n            </div>\n        </div>\n    </form>\n</ng-container>\n<ng-container *ngIf=\"connected\">\n    <div class=\"d-flex connection-container\">\n        <div class=\"ps-3\">\n            <div class=\"form-text\">{{systemComponentControl.value.key}}</div>\n        </div>\n        <div class=\"ps-1\">\n            <div class=\"form-text\">{{environmentControl.value.key}}</div>\n        </div>\n        <div class=\"ps-1\">\n            <button type=\"button\" class=\"btn btn-outline-primary btn-sm disconnect-button\" (click)=\"disconnect()\">\n                <fa-icon [icon]=\"faTimes\"></fa-icon>\n            </button>\n        </div>\n    </div>\n</ng-container>\n\n"
        },
        {
            "name": "DataSourcesPageComponent",
            "id": "component-DataSourcesPageComponent-6fe1f3a74aa7057dc262fed6f2966f4ef4125a703fee9d1412c6f5cfa1b11c43ee14962bc8b4a7e9c6bbe5bc916382c2491f0202e8d5f3efe83a93f6607e681d",
            "file": "src/app/settings/data-sources-page/data-sources-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-sources-page",
            "styleUrls": [
                "./data-sources-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-sources-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedSystemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDto",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "systemTypeDescriptors$",
                    "defaultValue": "this.systemDescriptionService.systemTypeDescriptors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponentSelectionChanged",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SystemDescriptionService} from \"../system-description.service\";\nimport {BreadcrumbItem} from \"@fabric/common\";\nimport {RoutingService} from \"../../common/routing.service\";\nimport {SystemComponentDto} from \"@fabric/models\";\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n    selector: 'app-data-sources-page',\n    templateUrl: './data-sources-page.component.html',\n    styleUrls: ['./data-sources-page.component.scss']\n})\nexport class DataSourcesPageComponent implements OnInit {\n\n    constructor(private activatedRoute: ActivatedRoute, private systemDescriptionService: SystemDescriptionService, private routingService: RoutingService) {\n    }\n\n    systemComponentKey: string\n\n    ngOnInit(): void {\n        this.systemDescriptionService.loadSystemDescription()\n        this.systemDescriptionService.loadSystemTypeDescriptors()\n        this.activatedRoute.paramMap.subscribe((params) => {\n            this.systemComponentKey = params.get('systemComponentKey')\n        })\n    }\n\n    get breadcrumbs(): BreadcrumbItem[] {\n        return [\n            {\n                label: 'Home',\n                route: this.routingService.homeRoute()\n            },\n            {\n                label: 'Datasources',\n                route: this.routingService.dataSourcesPageRoute()\n            },\n        ]\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    systemTypeDescriptors$ = this.systemDescriptionService.systemTypeDescriptors$\n\n    selectedSystemComponent: SystemComponentDto\n\n    systemComponentSelectionChanged(systemComponent: SystemComponentDto) {\n        this.selectedSystemComponent = systemComponent\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./data-sources-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "[]",
                        "returnType": "BreadcrumbItem[]",
                        "line": 28
                    }
                }
            },
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'datasources'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <div class=\"row\">\n        <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n    </div>\n</ng-template>\n\n\n<ng-template #breadcrumb>\n\n</ng-template>\n\n\n<ng-template #middle>\n    <ng-container *ngIf=\"systemTypeDescriptors$ | async as systemTypeDescriptors\">\n        <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n            <app-system-component-panel\n                    [systemDescription]=\"systemDescription\"\n                    [systemTypes]=\"systemTypeDescriptors\"\n                    (selectionChanged)=\"systemComponentSelectionChanged($event)\"\n                    [selection]=\"selectedSystemComponent\">\n            </app-system-component-panel>\n        </ng-container>\n    </ng-container>\n</ng-template>"
        },
        {
            "name": "DummyPageComponent",
            "id": "component-DummyPageComponent-109e09075b3b05bf522009f567b377c8b3cfcbaa8cc3f8772a3da89d68174d23f272e0a90967a91915db5a8b120fc8d842a4bea4e4e7d7c8ebe6911252a7b8a6",
            "file": "src/app/snapshot/snapshots-page/dummy-page/dummy-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dummy-page",
            "styleUrls": [
                "./dummy-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dummy-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "executionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExecutionId",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "i",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\nimport {ExecutionId} from \"@fabric/models\";\nimport {CommandControllerService} from \"@fabric/services\";\n\n@Component({\n    selector: 'app-dummy-page',\n    templateUrl: './dummy-page.component.html',\n    styleUrls: ['./dummy-page.component.scss']\n})\nexport class DummyPageComponent implements OnInit {\n\n    constructor(\n        private route: ActivatedRoute,\n        private commandControllerService: CommandControllerService\n    ) {}\n\n    executionId: ExecutionId\n\n    command\n\n    ngOnInit(): void {\n        this.route.paramMap.subscribe((params) => {\n            this.executionId = {id: params.get('executionId')}\n            this.refresh()\n        })\n    }\n\n    i = 0\n    refresh() {\n        this.commandControllerService.getExecutionInfoUsingGet({ id : this.executionId.id}).subscribe((dto) => {\n            this.command = dto\n            console.log('setting dto', dto)\n            this.i++\n            if (this.i < 200) {\n                setTimeout(() => this.refresh(), 500)\n            }\n        })\n\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dummy-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"command\">\n    <app-command-progress [command]=\"command\"></app-command-progress>\n</ng-container>"
        },
        {
            "name": "EnvironmentDialogComponent",
            "id": "component-EnvironmentDialogComponent-5851485ab52937c62c5efc90b4006ba7adec9e0e03c73b03d366c88f22368ca66a416f7401aa57bbe45b910bc13697917dc748ef7ed2deee8314c245f75ae63c",
            "file": "src/app/settings/environments-page/environment-panel/environment-dialog/environment-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-environment-dialog",
            "styleUrls": [
                "./environment-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environment-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EnvironmentDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\n\nexport interface EnvironmentDialogData {\n  key: string,\n  label: string,\n}\n\nexport interface EnvironmentDialogSpec {\n  keys: string[];\n  data: EnvironmentDialogData\n  cancel: () => void\n  confirm: (data: EnvironmentDialogData) => void\n}\n\n@Component({\n  selector: 'app-environment-dialog',\n  templateUrl: './environment-dialog.component.html',\n  styleUrls: ['./environment-dialog.component.scss']\n})\nexport class EnvironmentDialogComponent implements OnInit, OnChanges {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: EnvironmentDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n      this.formGroup.setValue(this.spec.data)\n      this.formGroup.markAsPristine()\n      this.formGroup.markAsUntouched()\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    key: new FormControl(null, [Validators.required]),\n    label: new FormControl(null, [Validators.required]),\n  })\n\n  public get keyControl(): FormControl {\n    return <FormControl> this.formGroup.get('key')\n  }\n\n  public keyControlInvalid() : boolean {\n    return showValidationMessages(this.keyControl)\n  }\n\n  public get labelControl(): FormControl {\n    return <FormControl> this.formGroup.get('label')\n  }\n\n  labelControlInvalid() {\n    return showValidationMessages(this.labelControl)\n  }\n\n  private get systemTypeControl(): FormControl {\n    return <FormControl> this.formGroup.get('systemType')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./environment-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "keyControl": {
                    "name": "keyControl",
                    "getSignature": {
                        "name": "keyControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 47
                    }
                },
                "labelControl": {
                    "name": "labelControl",
                    "getSignature": {
                        "name": "labelControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 55
                    }
                },
                "systemTypeControl": {
                    "name": "systemTypeControl",
                    "getSignature": {
                        "name": "systemTypeControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 63
                    }
                }
            },
            "templateData": "<div *ngIf=\"formGroup\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"'Add Environment'\" (onCancel)=\"cancel()\"></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\" class=\"form-group\">\n                    <label for=\"key\" class=\"form-label\">Key</label>\n                    <input formControlName=\"key\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"keyControlInvalid()\">\n                    <div id=\"key\" class=\"form-text\">Enter a key for the component.</div>\n                    <app-validation-messages [control]=\"keyControl\"></app-validation-messages>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"label\" class=\"form-label\" >Label</label>\n                    <input formControlName=\"label\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"labelControlInvalid()\">\n                    <div id=\"label\" class=\"form-text\">Enter a description.</div>\n                </div>\n\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmDisabled]=\"!formGroup.valid\" ></app-modal-footer>\n    </div>\n</div>"
        },
        {
            "name": "EnvironmentPanelComponent",
            "id": "component-EnvironmentPanelComponent-73983473ee1e678c9bc6f2140dda000aff27babd5ba950e3ea25d6a78ed16f213837c68aa16f25f1063e30920102a38b4d7fa35239d38d24131fb0036785f526",
            "file": "src/app/settings/environments-page/environment-panel/environment-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-environment-panel",
            "styleUrls": [
                "./environment-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environment-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "environmentDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addEnvironment",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeEnvironmentDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "editEnvironment",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "environmentDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeys",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exceptEnvironment",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exceptEnvironment",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEnvironmentDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "EnvironmentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "EnvironmentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEnvironment",
                    "args": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "environment",
                            "type": "EnvironmentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {EnvironmentDialogData, EnvironmentDialogSpec} from \"./environment-dialog/environment-dialog.component\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {ModalService} from \"../../../common/modal/modal-service\";\nimport {SystemDescriptionService} from \"../../system-description.service\";\n\n@Component({\n  selector: 'app-environment-panel',\n  templateUrl: './environment-panel.component.html',\n  styleUrls: ['./environment-panel.component.scss']\n})\nexport class EnvironmentPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n\n  constructor(modalService: ModalService, private service: SystemDescriptionService) {\n    super(modalService);\n  }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  systemDescription: SystemDescriptionDto\n\n  // environments\n\n  environmentDialogSpec: EnvironmentDialogSpec\n\n  environmentDialogId(): string {\n    return 'environmentDialog'\n  }\n\n  private openEnvironmentDialog(spec: EnvironmentDialogSpec) {\n    this.environmentDialogSpec = spec\n    this.modalService.open(this.environmentDialogId())\n  }\n\n  private closeEnvironmentDialog() {\n    this.environmentDialogSpec = null\n    this.modalService.close(this.environmentDialogId())\n  }\n\n  addEnvironment(systemDescription: SystemDescriptionDto) {\n    this.openEnvironmentDialog({\n      keys: this.environmentKeys(systemDescription),\n      data: {\n        key: null,\n        label: null,\n      },\n      confirm: data => {\n        this.closeEnvironmentDialog()\n        this.service.addEnvironment(<SystemComponentDto>data)\n      },\n      cancel: () => this.closeEnvironmentDialog()\n    })\n  }\n\n  editEnvironment(systemDescription: SystemDescriptionDto, environment: EnvironmentDto) {\n    this.openEnvironmentDialog({\n      keys: this.environmentKeys(systemDescription, environment),\n      data: <EnvironmentDialogData> { ... environment},\n      confirm: data => {\n        this.closeEnvironmentDialog()\n        this.service.updateEnvironment(environment, <EnvironmentDto>data)\n      },\n      cancel: () => this.closeEnvironmentDialog()\n    })\n  }\n\n  removeEnvironment(environment: EnvironmentDto) {\n    this.openConfirmationDialog({\n      title: 'Confirm delete',\n      message: `Delete '${environment.label}' environment ?`,\n      warning: `This will also remove datasource connection settings for this environment.`,\n      confirm: () => {\n        this.closeConfirmationDialog()\n        this.service.deleteEnvironment(environment)\n      },\n      cancel: () => this.closeConfirmationDialog()\n    })\n  }\n\n  private environmentKeys(systemDescription: SystemDescriptionDto, exceptEnvironment?: SystemComponentDto): string[] {\n    return systemDescription.environments\n        .filter(environment => environment.key != exceptEnvironment?.key)\n        .map(environment => environment.key);\n  }\n\n  confirmationDialogId(): string {\n    return 'confirmation-dialog-env'\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./environment-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4>Environments</h4>\n\n<div *ngIf=\"systemDescription.environments.length == 0\" class=\"intro-container\" >\n    <app-intro [title]=\"'No environments defined yet.'\" >\n        <p>Add <a href=\"javascript:void(0);\" (click)=\"addEnvironment(systemDescription)\" > first environment.</a></p>\n        <p>An environment names an instance of the system used for a specific purpose, e.g. DEV, QA, Production</p>\n    </app-intro>\n</div>\n\n<app-panel *ngIf=\"systemDescription.environments.length > 0\">\n    <table class=\"table table-sm table-striped table-bordered\">\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Key</th>\n            <th scope=\"col\">Label</th>\n            <th scope=\"col\"></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let environment of systemDescription.environments\">\n            <th scope=\"row\"></th>\n            <td>{{environment.key}}</td>\n            <td>{{environment.label}}</td>\n            <td>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"editEnvironment(systemDescription, environment)\">Edit\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"removeEnvironment(environment)\">Remove\n                </div>\n            </td>\n\n        </tr>\n        </tbody>\n    </table>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n         (click)=\"addEnvironment(systemDescription)\">\n        Add\n    </div>\n</app-panel>\n\n<jw-modal [id]=\"environmentDialogId()\">\n    <app-environment-dialog [spec]=\"environmentDialogSpec\"></app-environment-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "EnvironmentsPageComponent",
            "id": "component-EnvironmentsPageComponent-ab0e47b958a00e00b7395ec0017d8c870c20d9a86594d6d419f0fca844a5968afff479e1c053dd1c4a5ecd2bff174181ec9719fe0dda7289b5ec7d7a2ea989a9",
            "file": "src/app/settings/environments-page/environments-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-environments-page",
            "styleUrls": [
                "./environments-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./environments-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "systemTypeDescriptors$",
                    "defaultValue": "this.systemDescriptionService.systemTypeDescriptors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SystemDescriptionService} from \"../system-description.service\";\nimport {RoutingService} from \"../../common/routing.service\";\nimport {BreadcrumbItem} from \"@fabric/common\";\n\n@Component({\n  selector: 'app-environments-page',\n  templateUrl: './environments-page.component.html',\n  styleUrls: ['./environments-page.component.scss']\n})\nexport class EnvironmentsPageComponent implements OnInit {\n\n  constructor(private systemDescriptionService: SystemDescriptionService, private routingService : RoutingService) {}\n\n  ngOnInit(): void {\n    this.systemDescriptionService.loadSystemDescription()\n    this.systemDescriptionService.loadSystemTypeDescriptors()\n  }\n\n  get breadcrumbs() : BreadcrumbItem[] {\n    return [\n      {\n        label: 'Home',\n        route: this.routingService.homeRoute()\n      },\n      {\n        label: 'Environments',\n        route: this.routingService.environmentsPageRoute()\n      },\n    ]\n  }\n\n  systemDescription$ = this.systemDescriptionService.systemDescription$\n\n  systemTypeDescriptors$ = this.systemDescriptionService.systemTypeDescriptors$\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./environments-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "[]",
                        "returnType": "BreadcrumbItem[]",
                        "line": 20
                    }
                }
            },
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'environments'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <div class=\"row\">\n        <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n    </div>\n</ng-template>\n\n\n<ng-template #breadcrumb>\n\n</ng-template>\n\n\n<ng-template #middle>\n    <ng-container *ngIf=\"systemTypeDescriptors$ | async as systemTypeDescriptors\">\n        <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n            <app-environment-panel [systemDescription]=\"systemDescription\"></app-environment-panel>\n        </ng-container>\n    </ng-container>\n</ng-template>"
        },
        {
            "name": "FormInputFloatingComponent",
            "id": "component-FormInputFloatingComponent-fde3c367785da5297766c19f09b7ecbe577d0594b9d227ece40a62abcf8e76612d78166efc72ac0612cdba421543431ff6d28c381513d65f7555ce3b1592a7a1",
            "file": "src/app/common/styleguide/form-input-floating/form-input-floating.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-input-floating",
            "styleUrls": [
                "./form-input-floating.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-input-floating.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "_for",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "_label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'app-form-input-floating',\n  templateUrl: './form-input-floating.component.html',\n  styleUrls: ['./form-input-floating.component.scss']\n})\nexport class FormInputFloatingComponent {\n\n  @Input()\n  _for: string\n\n  @Input()\n  _label: string\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-input-floating.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"form-floating  mb-3\">\n    <ng-content></ng-content>\n    <label [for]=\"_for\" class=\"form-label\" >{{_label}}</label>\n</div>\n"
        },
        {
            "name": "HistoryPanelComponent",
            "id": "component-HistoryPanelComponent-0de2f5125ad9cd8d25df6b7d7a7fe5fab88ee5418d76e82427867a2194e989329b2233fadb1a46466e41bdb14dacf979bdb44bf21ecbb16587209bfb94c17c60",
            "file": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-history-panel",
            "styleUrls": [
                "./history-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./history-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "historyItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "HistoryItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onConvert",
                    "defaultValue": "new EventEmitter<HistoryItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter<HistoryItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<HistoryItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "actions",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionsSpec",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "asOneLine",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convert",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "HistoryItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ActionsSpec} from \"@fabric/common\";\n\nexport interface HistoryItem {\n  attributes?: { [key: string]: string };\n}\n\n@Component({\n  selector: 'app-history-panel',\n  templateUrl: './history-panel.component.html',\n  styleUrls: ['./history-panel.component.scss']\n})\nexport class HistoryPanelComponent {\n\n  @Input()\n  historyItems: HistoryItem[]\n\n  @Output()\n  onSelect = new EventEmitter<HistoryItem>()\n\n  @Output()\n  onConvert = new EventEmitter<HistoryItem>()\n\n  @Output()\n  onDelete = new EventEmitter<HistoryItem>()\n\n  select(item: HistoryItem) {\n    this.onSelect.emit(item)\n  }\n\n  asOneLine(item: HistoryItem): string {\n    let line = ''\n    Object.keys(item.attributes).forEach((key, index) => {\n      let value = item.attributes[key]\n      if (value) {\n        line += index > 0 ? ' ' : ''\n        line += item.attributes[key]\n      }\n    })\n    return line\n  }\n\n  convert(item: HistoryItem) {\n    this.onConvert.emit(item)\n  }\n\n  delete(item: HistoryItem) {\n    this.onDelete.emit(item)\n  }\n\n  actions(item: HistoryItem): ActionsSpec {\n    return {\n      actions: [\n        {\n            label: 'To Snippet',\n            handler: () => this.convert(item)\n        },\n        {\n          label: 'Select',\n          handler: () => this.select(item)\n        },\n        {\n          label: 'Delete',\n          handler: () => this.delete(item)\n        },\n      ]\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mydivouter{\n  position:relative;\n}\n.mydivoverlap{\n  position: relative;\n  z-index: 1;\n}\n.mybuttonoverlap{\n  position: absolute;\n  z-index: 2;\n  top: 44px;\n  display: none;\n}\n.mydivouter:hover .mybuttonoverlap{\n  display:block;\n}",
                    "styleUrl": "./history-panel.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"historyItems\">\n    <div class=\"list-group\">\n        <a class=\"list-group-item list-group-item-action list-group-item-light\" *ngFor=\"let item of historyItems\"\n           (click)=\"select(item)\" href=\"javascript:void(0);\">\n            {{asOneLine(item)}}\n            <div >\n                <app-action-buttons [spec]=\"actions(item)\"></app-action-buttons>\n            </div>\n        </a>\n    </div>\n</ng-container>"
        },
        {
            "name": "InfoComponent",
            "id": "component-InfoComponent-1fca58b429cb662494ca5b557738a590a625edf40872b6f6ee08c6dd6fd4954d18bef0cc67f68dbe126fd16b8e3a931e12135dfebd2591229cede8736fbd423f",
            "file": "src/app/common/styleguide/info/info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info",
            "styleUrls": [
                "./info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faInfoCircle",
                    "defaultValue": "faInfoCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {faInfoCircle} from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.scss']\n})\nexport class InfoComponent implements OnInit {\n\n  faInfoCircle = faInfoCircle\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a href=\"javascript:void(0);\" >\n    <fa-icon [icon]=\"faInfoCircle\" ></fa-icon>\n</a>\n"
        },
        {
            "name": "IntroComponent",
            "id": "component-IntroComponent-bb3ca97cad118a5a8720b821455af0aaafa7b8e24ca33edb07d454f82ff79ed5954c558c2a7f7474b869b4176030f4212c2739fadfe4c348a124530ebf054874",
            "file": "src/app/common/styleguide/intro/intro.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-intro",
            "styleUrls": [
                "./intro.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./intro.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faLightbulb",
                    "defaultValue": "faLightbulb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {faLightbulb} from \"@fortawesome/free-solid-svg-icons\";\n\n@Component({\n  selector: 'app-intro',\n  templateUrl: './intro.component.html',\n  styleUrls: ['./intro.component.scss']\n})\nexport class IntroComponent implements OnInit {\n\n  faLightbulb = faLightbulb\n\n  constructor() { }\n\n  @Input()\n  title: string\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./intro.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "    <div class=\"jumbotron\">\n        <div class=\"container\">\n            <div class=\"h-100 p-5 bg-light border rounded-3\">\n                <h4><fa-icon class=\"text-warning\" [icon]=\"faLightbulb\" ></fa-icon> {{title}}</h4>\n                <p></p>\n                <ng-content></ng-content>\n            </div>\n        </div>\n    </div>\n"
        },
        {
            "name": "Layout1ColComponent",
            "id": "component-Layout1ColComponent-e87a2dc8a7d78e68eb898dd0cc630dbb1f663dc490eecfff34047430c9710ecbe8ad1b47919ee55704a8d075e11153efaeff246a0c00afa0094d506c211fe933",
            "file": "src/app/common/styleguide/layout-1col/layout-1col.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-1col",
            "styleUrls": [
                "./layout-1col.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout-1col.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "breadcrumb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "middle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "sidebar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "icon",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "opnSideBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sideBarCollapsed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSideBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, TemplateRef} from '@angular/core';\nimport {SideBarService} from \"../side-bar/side-bar.service\";\nimport {faBars} from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n    selector: 'app-layout-1col',\n    templateUrl: './layout-1col.component.html',\n    styleUrls: ['./layout-1col.component.scss']\n})\nexport class Layout1ColComponent {\n\n    constructor(private sideBarService: SideBarService) {\n    }\n\n    @Input()\n    sidebar: TemplateRef<any>\n\n    @Input()\n    breadcrumb: TemplateRef<any>\n\n    @Input()\n    title: TemplateRef<any>\n\n    @Input()\n    middle: TemplateRef<any>\n\n    sideBarCollapsed(): boolean {\n        return this.sideBarService.collapsed\n    }\n\n    opnSideBar() {\n        this.sideBarService.toggleState()\n    }\n\n    icon() {\n        return faBars\n    }\n\n    toggleSideBar() {\n      this.sideBarService.toggleState()\n\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../variables';\n\n.backdrop {\n  background-color: $storybook-secondary-100;\n  min-height: 100vh;\n}\n\n.sidebar-container {\n  z-index: 98;\n  position: absolute;\n  top: 126px;\n  bottom: 0;\n  box-shadow: 0 2.7px 9px rgba(0,0,0,.13),0 9.4px 24px rgba(0,0,0,.09),0 21.8px 43px rgba(0,0,0,.08);\n}\n\n.outside-sidebar-container {\n  z-index: 97;\n  position: absolute;\n  top: 126px;\n  bottom: 0;\n  background-color: black;\n  opacity: 5%;\n  width: 100%;\n}\n\n\n.page-nav-bar {\n  box-shadow: 0 .7px 1.4px rgba(0,0,0,.07),0 1.9px 4px rgba(0,0,0,.05),0 4.5px 10px rgba(0,0,0,.05);\n}",
                    "styleUrl": "./layout-1col.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sideBarService",
                        "type": "SideBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "sideBarService",
                        "type": "SideBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-toast></app-toast>\n<nav class=\"navbar navbar-dark bg-dark\">\n    <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"#\">Storydoc.io | Fabric</a>\n    </div>\n</nav>\n\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light page-nav-bar\">\n    <div class=\"d-flex flex-grow-1\">\n        <span class=\"navbar-brand\"></span>\n        <div class=\"navbar-brand \" >\n            <div style=\"cursor: pointer;\" (click)=\"toggleSideBar()\">\n                <fa-icon [icon]=\"icon()\"></fa-icon>\n            </div>\n        </div>\n        <div class=\"navbar-brand\">\n            <ng-container *ngTemplateOutlet=\"title\"></ng-container>\n        </div>\n    </div>\n    <div class=\"collapse navbar-collapse flex-grow-1 text-right\">\n        <ul class=\"navbar-nav ms-auto flex-nowrap\">\n            <li class=\"nav-item\">\n                <app-connection-status></app-connection-status>\n            </li>\n        </ul>\n    </div>\n</nav>\n<div class=\"text-white bg-light sidebar-container\">\n    <ng-container *ngTemplateOutlet=\"sidebar\"></ng-container>\n</div>\n<div *ngIf=\"!sideBarCollapsed()\" class=\"outside-sidebar-container\" (click)=\"toggleSideBar()\"></div>\n<div [class.main]=\"!sideBarCollapsed()\" [class.main-full-screen]=\"sideBarCollapsed()\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <ng-container *ngTemplateOutlet=\"middle\"></ng-container>\n        </div>\n    </div>\n</div>\n\n\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-9e45c30e2b5a824ce45d7516ed94270d1dc3d77d1add73a99dfdeac50c0dde94fe4bafeb55c79efcc648d816d5250ca2a1782650be12926c91406cdeb79e05b8",
            "file": "src/app/common/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\n\n@Component({\n    selector: 'app-loading',\n    templateUrl: './loading.component.html',\n    styleUrls: ['./loading.component.scss']\n})\nexport class LoadingComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    @Output()\n    onClick = new EventEmitter<void>()\n\n    clicked() {\n        this.onClick.emit()\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span><img src=\"/assets/loading.gif\" height=\"100px\" alt=\"image\" (click)=\"clicked()\"></span>"
        },
        {
            "name": "MetaModelDialogComponent",
            "id": "component-MetaModelDialogComponent-ea895cc54ba13ee759e7ccd673f747d35c9e209f9f0c0a970058cbc97540373deb3b466a575d27eb4e3a41bb9bc3ffd05c0f9a40b7d2a299ea2fd9414fcdd645",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meta-model-dialog",
            "styleUrls": [
                "./meta-model-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meta-model-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "MetaModelDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "availableEnvironments",
                    "args": [],
                    "optional": false,
                    "returnType": "EnvironmentDto[]",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "environmentKeyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\nimport {SystemDescriptionWrapper} from \"../../../system-description.service\";\n\n\nexport interface MetaModelDialogData {\n  environmentKey: string\n}\n\nexport interface MetaModelDialogSpec {\n  systemComponent: SystemComponentDto\n  systemDescription: SystemDescriptionDto\n  data: MetaModelDialogData\n  cancel: () => void\n  confirm: (data: MetaModelDialogData) => void\n}\n\n@Component({\n  selector: 'app-meta-model-dialog',\n  templateUrl: './meta-model-dialog.component.html',\n  styleUrls: ['./meta-model-dialog.component.scss']\n})\nexport class MetaModelDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: MetaModelDialogSpec\n\n  formGroup: FormGroup = new FormGroup({\n    environmentKey: new FormControl(null, [Validators.required]),\n  })\n\n  public get environmentKeyControl(): FormControl {\n    return <FormControl> this.formGroup.get('environmentKey')\n  }\n\n  environmentKeyControlInvalid() {\n    return showValidationMessages(this.environmentKeyControl)\n  }\n\n  availableEnvironments(): EnvironmentDto[] {\n    return new SystemDescriptionWrapper(this.spec.systemDescription).getEnvironments(this.spec.systemComponent);\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./meta-model-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentKeyControl": {
                    "name": "environmentKeyControl",
                    "getSignature": {
                        "name": "environmentKeyControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 39
                    }
                }
            },
            "templateData": "<div *ngIf=\"formGroup && spec\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"'Fetch ' + spec.systemComponent.label + ' metadata'\" (onCancel)=\"cancel()\" ></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\" class=\"form-group\">\n                    <label for=\"environmentKey\" class=\"form-label\">Environment</label>\n                    <select id=\"environmentKey\" formControlName=\"environmentKey\" class=\"form-select\" [class.is-invalid]=\"environmentKeyControlInvalid()\" >\n                        <option *ngFor=\"let environment of availableEnvironments()\"\n                                [ngValue]=\"environment.key\">{{environment.key}}</option>\n                    </select>\n                    <div class=\"form-text\">Select the environment where the metadata will be fetched from.</div>\n                </div>\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmText]=\"'Fetch metadata'\" [confirmDisabled]=\"!formGroup.valid\" ></app-modal-footer>\n    </div>\n</div>"
        },
        {
            "name": "MetaModelPageComponent",
            "id": "component-MetaModelPageComponent-76074c8b8c23e2c95c35112d895b062561de5a6ab993698be6eb0dc4f90d1f414aee3422dd1f87e9b30fafacdc36b6a097d3644afb5a11987d339f26d653df8d",
            "file": "src/app/settings/meta-model-page/meta-model-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meta-model-page",
            "styleUrls": [
                "./meta-model-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meta-model-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "systemComponentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponent",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponentKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {BreadcrumbItem} from \"@fabric/common\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {SystemDescriptionService, SystemDescriptionWrapper} from \"../system-description.service\";\nimport {SystemDescriptionDto} from \"@fabric/models\";\nimport {RoutingService} from \"../../common/routing.service\";\n\n@Component({\n    selector: 'app-meta-model-page',\n    templateUrl: './meta-model-page.component.html',\n    styleUrls: ['./meta-model-page.component.scss']\n})\nexport class MetaModelPageComponent implements OnInit {\n\n    constructor(private activatedRoute: ActivatedRoute, private systemDescriptionService: SystemDescriptionService, private routingService: RoutingService) {\n    }\n\n    get breadcrumbs(): BreadcrumbItem[] {\n      return [\n          {\n              label: 'Home',\n              route: this.routingService.homeRoute()\n          },\n          {\n              label: 'Datasources',\n              route: this.routingService.dataSourcesPageRoute()\n          },\n          {\n              label: this.systemComponentKey,\n              route: this.routingService.dataSourcesPageRouteWithSelection(this.systemComponentKey)\n          },\n          {\n              label: 'MetaModel'\n          },\n      ]\n    }\n\n    systemComponentKey: string\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n        this.activatedRoute.paramMap.subscribe((params) => {\n            this.systemComponentKey = params.get('systemComponentKey')\n            this.systemDescriptionService.loadSystemDescription()\n        })\n    }\n\n    systemComponent(systemDescription: SystemDescriptionDto, systemComponentKey: string) {\n        return new SystemDescriptionWrapper(systemDescription).getSystemComponentByKey(systemComponentKey)\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./meta-model-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "[]",
                        "returnType": "BreadcrumbItem[]",
                        "line": 18
                    }
                }
            },
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'settings'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <div class=\"row\">\n        <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n    </div>\n</ng-template>\n\n\n<ng-template #breadcrumb>\n</ng-template>\n\n\n<ng-template #middle>\n    <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n        <app-meta-model-panel [systemDescription]=\"systemDescription\" [systemComponent]=\"systemComponent(systemDescription, systemComponentKey)\" ></app-meta-model-panel>\n    </ng-container>\n</ng-template>"
        },
        {
            "name": "MetaModelPanelComponent",
            "id": "component-MetaModelPanelComponent-0f8690e6505180c0b4e78c3f4c2c6c592898dc74f0a3c3443d4c5a35215450b9cb436a8a48eb3585061cee8b867d9c39d315841bde06746932642a34d8da6514",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meta-model-panel",
            "styleUrls": [
                "./meta-model-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meta-model-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "systemComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "SystemComponentDto",
                    "decorators": []
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "environment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EnvironmentDto",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "metaModel$",
                    "defaultValue": "this.metaDataService.metaModel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "metaModelDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaModelDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addMetaModel",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeMetaModelDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "metaModelDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openMetaModelDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "MetaModelDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "MetaModelDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "spinnerClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {ModalService} from \"../../../common/modal/modal-service\";\nimport {SystemDescriptionService, SystemDescriptionWrapper} from \"../../system-description.service\";\nimport {EnvironmentDto, SystemComponentDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {MetaModelDialogData, MetaModelDialogSpec} from \"./meta-model-dialog/meta-model-dialog.component\";\nimport {MetaDataService} from \"./meta-data.service\";\n\n@Component({\n    selector: 'app-meta-model-panel',\n    templateUrl: './meta-model-panel.component.html',\n    styleUrls: ['./meta-model-panel.component.scss']\n})\nexport class MetaModelPanelComponent extends HasConfirmationDialogMixin implements OnInit, OnChanges {\n\n    constructor(modalService: ModalService, private service: SystemDescriptionService, private metaDataService: MetaDataService) {\n        super(modalService);\n    }\n\n    @Input()\n    systemDescription: SystemDescriptionDto\n\n    @Input()\n    systemComponent: SystemComponentDto\n\n    ngOnInit(): void {\n    }\n\n    environment: EnvironmentDto\n\n    metaModel$ = this.metaDataService.metaModel$\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.systemDescription && this.systemComponent) {\n            this.environment = new SystemDescriptionWrapper(this.systemDescription).getDefaultEnvironment()\n            this.metaDataService.loadMetaModel(this.environment.key, this.systemComponent.key)\n        }\n    }\n\n    metaModelDialogSpec: MetaModelDialogSpec;\n\n    confirmationDialogId(): string {\n        return \"metadata-confirmation-dialog-id\";\n    }\n\n    metaModelDialogId() {\n        return \"metadata-dialog\"\n    }\n\n    private openMetaModelDialog(spec: MetaModelDialogSpec) {\n        this.metaModelDialogSpec = spec\n        this.modalService.open(this.metaModelDialogId())\n    }\n\n    private closeMetaModelDialog() {\n        this.metaModelDialogSpec = null\n        this.modalService.close(this.metaModelDialogId())\n    }\n\n    addMetaModel(systemDescription: SystemDescriptionDto) {\n        this.openMetaModelDialog({\n            systemComponent: this.systemComponent,\n            systemDescription,\n            data: {\n                environmentKey: null,\n            },\n            confirm: (data: MetaModelDialogData) => {\n                this.closeMetaModelDialog()\n                this.metaDataService.fetchMetaModel(this.systemComponent, data.environmentKey)\n            },\n            cancel: () => this.closeMetaModelDialog()\n        })\n    }\n\n    spinnerClicked() {\n        console.log('clicked!!')\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./meta-model-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metaDataService",
                        "type": "MetaDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metaDataService",
                        "type": "MetaDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<app-panel>\n    <h4>Metadata</h4>\n\n    <ng-container *ngIf=\"metaModel$ | async as metaModelState\">\n        <ng-container *ngIf=\"metaModelState.fetching\">\n            <app-loading></app-loading>\n        </ng-container>\n        <ng-container *ngIf=\"!metaModelState.fetching\">\n            <ng-container *ngIf=\"metaModelState.metaModel\">\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\" (click)=\"addMetaModel(systemDescription)\">\n                    Reload\n                </div>\n                <app-meta-model-view [entity]=\"metaModelState.metaModel\"></app-meta-model-view>\n            </ng-container>\n            <ng-container *ngIf=\"!metaModelState.metaModel\">\n                <app-intro [title]=\"'No Metadata available'\">\n                    <p><a href=\"javascript:void(0);\" (click)=\"addMetaModel(systemDescription)\"> Fetch</a> the metadata\n                        from an environment. </p>\n                </app-intro>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</app-panel>\n\n\n<jw-modal [id]=\"metaModelDialogId()\">\n    <app-meta-model-dialog [spec]=\"metaModelDialogSpec\"></app-meta-model-dialog>\n</jw-modal>\n\n"
        },
        {
            "name": "MetaModelViewComponent",
            "id": "component-MetaModelViewComponent-3e404c7d9ed314197d77f7487a45ebb44a0283112caac3c6fa1bd98e4b31558804d65103faa48ceec31128d1e1924a55b67df5005cc913f3a96040e880922f28",
            "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meta-model-view",
            "styleUrls": [
                "./meta-model-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meta-model-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "entity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 126,
                    "type": "EntityDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faAngleRight",
                    "defaultValue": "faAngleRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "viewModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewModel",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "viewModelReducer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewModelReducer",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "column",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entry",
                            "type": "ListEntryPart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "ColumnPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entry",
                            "type": "ListEntryPart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {EntityDto} from \"@fabric/models\";\n\n// data model\n\nexport interface EntityItem {\n    entity_id: string\n    entity_ref: string\n    name: string\n    attributes: AttributeItem[]\n}\n\n\nexport interface AttributeItem {\n    name: string\n    entries: EntityItem[]\n}\n\n// view model\n\nexport interface ViewModel {\n    columns: ColumnPart[]\n}\n\nexport interface ColumnPart {\n    title: string\n    lists: ListPart[]\n}\n\nexport interface ListPart {\n    title: string\n    entries: ListEntryPart[]\n}\n\nexport interface ListEntryPart {\n    label: string\n    json: boolean\n    lists: ListPart[]\n    entry: EntityItem\n    selected: boolean\n}\n\n\nclass ViewModelReducer {\n\n    constructor(private entity: EntityDto) { this.init()}\n\n    viewModel: ViewModel\n\n    private init() {\n        this.viewModel = {\n            columns: [\n                this.toColumn(this.entity)\n            ]\n        }\n    }\n\n    private toColumn(item: EntityDto): ColumnPart {\n        return {\n            title: item.name,\n            lists: item.attributes.map((list)=> {\n                return <ListPart>{\n                    title: list.name,\n                    entries: list.entries.map((entry) => {\n                        return {\n                            label: entry.name,\n                            selected: false,\n                            json: entry.json,\n                            entry\n                        }\n                    })\n                }\n            })\n        }\n\n    }\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        this.viewModel.columns.push(this.toColumn(entry.entry))\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = entry===entry2)\n        })\n    }\n\n    private columnIdx(colomn: ColumnPart): number {\n        return this.viewModel.columns.indexOf(colomn)\n    }\n\n    deselect(column: ColumnPart, entry: ListEntryPart) {\n        let columnIdx = this.columnIdx(column)\n        this.viewModel.columns = this.viewModel.columns.slice(0, columnIdx+1)\n        column.lists.forEach(list => {\n            list.entries.forEach(entry2 => entry2.selected = false)\n        })\n    }\n}\n\n\n@Component({\n    selector: 'app-meta-model-view',\n    templateUrl: './meta-model-view.component.html',\n    styleUrls: ['./meta-model-view.component.scss']\n})\nexport class MetaModelViewComponent implements OnInit, OnChanges {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.entity) {\n            console.log('entity changed', this.entity)\n            this.viewModelReducer = new ViewModelReducer(this.entity)\n            this.viewModel = this.viewModelReducer.viewModel\n        }\n    }\n\n    viewModelReducer: ViewModelReducer\n\n    @Input()\n    entity: EntityDto\n\n    viewModel: ViewModel;\n    faAngleRight = faAngleRight\n\n\n    select(column: ColumnPart, entry: ListEntryPart) {\n        if (entry.selected) {\n            this.viewModelReducer.deselect(column, entry)\n        } else {\n            this.viewModelReducer.select(column, entry)\n        }\n    }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".entity-column {\n  max-height: 800px;\n  overflow-y: auto;\n  scrollbar-width: thin;\n}",
                    "styleUrl": "./meta-model-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 107
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"viewModel\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div *ngFor=\"let column of viewModel.columns\" class=\"col-4 entity-column\">\n                <h5>{{column.title}}</h5>\n                <br>\n                <div *ngFor=\"let list of column.lists\">\n                    <h6>{{list.title}}</h6>\n                    <div class=\"list-group\">\n                        <ng-container *ngFor=\"let entry of list.entries\">\n                            <ng-container *ngIf=\"!entry.json\">\n                                <a class=\"list-group-item\" style=\"overflow: hidden;\" (click)=\"select(column, entry)\" href=\"javascript:void(0);\">\n                                    <fa-icon *ngIf=\"entry.selected\" [icon]=\"faAngleRight\"></fa-icon> {{entry.label}}\n                                </a>\n                            </ng-container>\n                            <ng-container *ngIf=\"entry.json\">\n                                <div class=\"list-group-item\">\n                                    <pre>{{entry.label}}</pre>\n                                </div>\n                            </ng-container>\n                        </ng-container>\n                    </div>\n                    <br>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-d74ee47333c88da5c2bfe8669b61c22405eae2385c548049d19e7fbbbfa634a9e28bda42e708d971aafee1609e244d7874f51eae05fdc19e515a652e530f40af",
            "file": "src/app/common/modal/modal.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "jw-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, Input, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {ModalService} from './modal-service';\n\n// based on https://github.com/cornflourblue/angular-10-custom-modal\n// licence MIT\n\n@Component({\n  selector: 'jw-modal',\n  styleUrls: ['./modal.component.css'],\n  templateUrl: 'modal.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class ModalComponent implements OnInit, OnDestroy {\n\n  @Input() id: string;\n  private element: any;\n\n  constructor(private modalService: ModalService, private el: ElementRef) {\n    this.element = el.nativeElement;\n  }\n\n  ngOnInit(): void {\n    if (!this.id) {\n      console.error('modal must have an id');\n      return;\n    }\n\n    document.body.appendChild(this.element);\n\n    this.element.addEventListener('click', el => {\n      if (el.target.className === 'jw-modal') {\n        this.close();\n      }\n    });\n\n    this.modalService.add(this);\n  }\n\n  ngOnDestroy(): void {\n    this.modalService.remove(this.id);\n    this.element.remove();\n  }\n\n  // open modal\n  open(): void {\n    this.element.style.display = 'block';\n    document.body.classList.add('jw-modal-open');\n  }\n\n  // close modal\n  close(): void {\n    this.element.style.display = 'none';\n    document.body.classList.remove('jw-modal-open');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "jw-modal {\n  display: none;\n}\n\njw-modal .jw-modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1000;\n  overflow: auto;\n}\n\njw-modal .jw-modal .jw-modal-body {\n  width: 800px;\n  margin: 130px auto;\n}\n\njw-modal .jw-modal-background {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: #000;\n  opacity: 0.15;\n  z-index: 900;\n}\n\nbody.jw-modal-open {\n  overflow: hidden;\n}\n\n.modal-body {\n  max-height: calc(100vh - 200px);\n  overflow-y: auto;\n}\n",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"jw-modal\">\n  <div class=\"jw-modal-body\">\n    <ng-content></ng-content>\n  </div>\n</div>\n<div class=\"jw-modal-background\"></div>\n"
        },
        {
            "name": "ModalFooterComponent",
            "id": "component-ModalFooterComponent-c8b24e40294e3bc2b50835c2a5e6ef6a323195bc54b3fd0a9a1bcc115cc5725d9ad51372c40fa77159025b3c8f30f0044f56aea00ff14103788dd8e22c242513",
            "file": "src/app/common/styleguide/modal-footer/modal-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-footer",
            "styleUrls": [
                "./modal-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelText",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "confirmDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "confirmText",
                    "defaultValue": "'Save changes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "onConfirm",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n    selector: 'app-modal-footer',\n    templateUrl: './modal-footer.component.html',\n    styleUrls: ['./modal-footer.component.scss']\n})\nexport class ModalFooterComponent {\n\n    @Input()\n    confirmDisabled: boolean = false\n\n    @Input()\n    confirmText: string = 'Save changes'\n\n    @Input()\n    cancelText: string = 'Cancel'\n\n    @Output()\n    onConfirm = new EventEmitter<void>()\n\n    @Output()\n    onCancel = new EventEmitter<void>()\n\n    constructor() {\n    }\n\n    confirm() {\n        this.onConfirm.emit()\n    }\n\n    cancel() {\n        this.onCancel.emit()\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "templateData": "<div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"confirm()\" [disabled]=\"confirmDisabled\">{{confirmText}}\n    </button>\n    <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">{{cancelText}}</button>\n</div>\n"
        },
        {
            "name": "ModalHeaderComponent",
            "id": "component-ModalHeaderComponent-1109ffb805a3cda23e6e59bd80ed48896b10c771e12109ec346ff172f7d6909c0368a947c49a3b40ea06d06e70f42f3a3fc83bec3f00579c4d3dfcc6c0e8a7b7",
            "file": "src/app/common/styleguide/modal-header/modal-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-modal-header",
            "styleUrls": [
                "./modal-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-modal-header',\n  templateUrl: './modal-header.component.html',\n  styleUrls: ['./modal-header.component.scss']\n})\nexport class ModalHeaderComponent implements OnInit {\n\n  @Input()\n  title: string;\n\n  @Output()\n  onCancel: EventEmitter<void> = new EventEmitter<void>()\n\n  doCancel() {\n    this.onCancel.emit()\n  }\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./modal-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"modal-header\">\n    <h5 class=\"modal-title\">{{title}}</h5>\n    <button type=\"button\" class=\"btn-close\" (click)=\"doCancel()\"></button>\n</div>\n"
        },
        {
            "name": "MongoMetamodelPanelComponent",
            "id": "component-MongoMetamodelPanelComponent-de0094d6e1c95ee3864d6ea3021a6ed4344a77819af51fe064fc9586e96fa455d4b05347a779c49016ccf9ec1b8653ec4fa82fbfb0d17ca85d8d8608fc8afad4",
            "file": "src/app/settings/meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mongo-metamodel-panel",
            "styleUrls": [
                "./mongo-metamodel-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mongo-metamodel-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metaModels$",
                    "defaultValue": "this.mongoMetaModelService.metaModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {MongoMetaModelService} from \"./mongo-metamodel.service\";\n\n@Component({\n  selector: 'app-mongo-metamodel-panel',\n  templateUrl: './mongo-metamodel-panel.component.html',\n  styleUrls: ['./mongo-metamodel-panel.component.scss']\n})\nexport class MongoMetamodelPanelComponent implements OnInit {\n\n  constructor(private mongoMetaModelService: MongoMetaModelService) { }\n\n  metaModels$ = this.mongoMetaModelService.metaModels$\n\n  ngOnInit(): void {\n    this.mongoMetaModelService.load('MONGODB')\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mongo-metamodel-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "mongoMetaModelService",
                        "type": "MongoMetaModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "mongoMetaModelService",
                        "type": "MongoMetaModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-panel>\n    <pre *ngIf=\"metaModels$ | async as metaModels\">{{ metaModels.get('MONGODB') | json }}</pre>\n</app-panel>"
        },
        {
            "name": "MongoSnapshotComponent",
            "id": "component-MongoSnapshotComponent-58f9ad05b5921a08140b7bc359178424f1a1ddacaa6eb742f30a8ee75823811a3313d84d3700aa0b0aa044e2acaa763e934f6952dddbf597058febeec2cb900f",
            "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mongo-snapshot",
            "styleUrls": [
                "./mongo-snapshot.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mongo-snapshot.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "componentKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "SnapshotId",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "documentSelection",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "mongoNavigationModels$",
                    "defaultValue": "this.navigationService.navigationModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "mongoSnapshot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MongoSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "mongoSnapshot$",
                    "defaultValue": "this.service.mongoSnapshot$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "pagedSelectedCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PagedCollection",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "selectedCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionSnapshot",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectCollection",
                    "args": [
                        {
                            "name": "collectionNavItem",
                            "type": "CollectionNavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionNavItem",
                            "type": "CollectionNavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDocument",
                    "args": [
                        {
                            "name": "docIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "docIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedDocument",
                    "args": [],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CollectionNavItem, CollectionSnapshot, MongoSnapshot, SnapshotId} from \"@fabric/models\";\nimport {MongoService} from \"./mongo.service\";\nimport {MongoNavigationModelService} from \"./mongo-navigation-model.service\";\nimport {Subscription} from \"rxjs\";\n\ninterface Selector {\n type: string\n}\n\ninterface RootSelector extends Selector {\n  type: 'ROOT'\n}\n\ninterface CollectionSelector extends Selector {\n  type: 'COLLECTION'\n}\n\ninterface DocumentSelector extends Selector {\n  type: 'COLLECTION'\n}\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nclass PagedCollection {\n\n\n  constructor(private collection: CollectionSnapshot){\n    this.pageSize = DEFAULT_PAGE_SIZE\n    this.lastPageNr = this.collection.documents.length==0 ? 0 : Math.floor((this.collection.documents.length-1) / this.pageSize)\n    this.toFirstPage()\n  }\n\n  pageSize: number\n  pageNr: number\n  lastPageNr: number\n  currentPage: string[]\n\n  toFirstPage() {\n    this.pageNr =  0\n    this.setCurrentPage()\n  }\n\n  toPreviousPage() {\n    this.pageNr =  this.pageNr == 0 ? 0 : this.pageNr-1\n    this.setCurrentPage()\n  }\n\n  toNextPage() {\n    this.pageNr =  this.pageNr == this.lastPageNr ? this.lastPageNr : this.pageNr+1\n    this.setCurrentPage()\n  }\n\n  toLastPage() {\n    this.pageNr =  this.lastPageNr\n    this.setCurrentPage()\n  }\n\n  needsPager() {\n    return this.lastPageNr > 0\n  }\n\n  setCurrentPage() {\n    let start  = this.pageNr*this.pageSize\n    let end = Math.min(start+this.pageSize, this.collection.documents.length-1)\n    this.currentPage = this.collection.documents.slice(start,end)\n\n  }\n\n  getIdx(idx: number): number {\n    return this.pageNr*this.pageSize + idx\n  }\n\n}\n\n\n@Component({\n  selector: 'app-mongo-snapshot',\n  templateUrl: './mongo-snapshot.component.html',\n  styleUrls: ['./mongo-snapshot.component.scss']\n})\nexport class MongoSnapshotComponent implements OnInit, OnDestroy {\n\n  @Input()\n  snapshotId: SnapshotId\n\n  @Input()\n  componentKey: string\n\n  mongoNavigationModels$ = this.navigationService.navigationModels$;\n\n  mongoSnapshot$ = this.service.mongoSnapshot$\n  mongoSnapshot: MongoSnapshot\n\n  \n\n  selectedCollection: CollectionSnapshot\n  pagedSelectedCollection: PagedCollection\n\n  documentSelection: number | null = null\n\n  constructor(private service: MongoService, private navigationService: MongoNavigationModelService) { }\n\n  private subscriptions: Subscription[] = []\n\n  ngOnInit(): void {\n      this.subscriptions.push(this.mongoSnapshot$.subscribe((mongoSnapshot)=> {\n        this.mongoSnapshot = mongoSnapshot\n      }))\n      this.navigationService.load(this.componentKey)\n      this.service.load(this.snapshotId, this.componentKey);\n\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(s => s.unsubscribe())\n  }\n\n  selectCollection(collectionNavItem: CollectionNavItem) {\n    this.selectedCollection = this.mongoSnapshot.collectionSnapshots.find((collection)=>collection.collectionName===collectionNavItem.collectionName)\n    this.pagedSelectedCollection = new PagedCollection(this.selectedCollection)\n    this.documentSelection = null\n  }\n\n  selectDocument(docIdx: number) {\n      this.documentSelection = this.pagedSelectedCollection.getIdx(docIdx)\n  }\n\n  selectedDocument(): object {\n     if (this.documentSelection==null) return null\n     let result: string = this.selectedCollection.documents[this.documentSelection]\n    return JSON.parse(result)\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mongo-snapshot.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MongoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "navigationService",
                        "type": "MongoNavigationModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MongoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "navigationService",
                        "type": "MongoNavigationModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-panel>\n    <ng-container *ngIf=\"mongoNavigationModels$ | async as mongoNavigationModels\">\n        <ng-container *ngIf=\"mongoNavigationModels.get(componentKey) as mongoNavigationModel\">\n            <ul class=\"list-group\">\n                <li *ngFor=\"let root of  mongoNavigationModel.roots\" class=\"list-group-item \"\n                    [class.active]=\"root === selectedCollection\" (click)=\"selectCollection(root)\">\n                    {{root.collectionName}}\n                </li>\n            </ul>\n            <ng-container *ngIf=\"mongoSnapshot\">\n                <ng-container *ngIf=\"selectedCollection\">\n                    <ng-container *ngIf=\"documentSelection==null\">\n                      <ul *ngIf=\"pagedSelectedCollection.needsPager()\" class=\"pagination\">\n                        <li class=\"page-item\"><a class=\"page-link\" (click)=\"pagedSelectedCollection.toFirstPage()\">First</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\" (click)=\"pagedSelectedCollection.toPreviousPage()\">Previous</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\">{{(pagedSelectedCollection.pageNr + 1)}}/{{(pagedSelectedCollection.lastPageNr + 1)}}</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\"\n                                                 (click)=\"pagedSelectedCollection.toNextPage()\">Next</a></li>\n                        <li class=\"page-item\"><a class=\"page-link\"\n                                                 (click)=\"pagedSelectedCollection.toLastPage()\">Last</a></li>\n                      </ul>\n                        <ul class=\"list-group\">\n                            <li class=\"list-group-item \"\n                                *ngFor=\"let document of pagedSelectedCollection.currentPage; let docIdx = index\"\n                                (click)=\"selectDocument(docIdx)\">\n                                {{document}}\n                            </li>\n                        </ul>\n                    </ng-container>\n                    <ng-container *ngIf=\"documentSelection!=null\">\n                        <pre>{{selectedDocument() | json}}</pre>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </ng-container>\n    </ng-container>\n</app-panel>\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-e4daedfa736e26650d84d2b4455f9f1c37e305e01abaae8f54a4bc6ef7c049f780acc941cb7cc747d2e540ff2fcf3d3ac50fbaf63437080178cddbee114d130c",
            "file": "src/app/common/styleguide/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "NavSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "faAngleRight",
                    "defaultValue": "faAngleRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "doSelect",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {faAngleRight} from \"@fortawesome/free-solid-svg-icons\";\n\nexport interface NavSpec {\n  items: NavItemSpec[]\n  select: (string) => void\n  defaultSelection: string\n}\n\nexport interface NavItemSpec {\n  label: string\n  key: string\n}\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss']\n})\nexport class NavComponent implements OnChanges{\n\n  faAngleRight = faAngleRight\n\n  constructor() { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.doSelect(this.spec.defaultSelection)\n  }\n\n  active: string\n\n  @Input()\n  spec: NavSpec\n\n  doSelect(key: string) {\n    this.active = key\n    this.spec.select(key)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ul *ngIf=\"spec\" class=\"nav flex-column\">\n    <li *ngFor=\"let item of spec.items\" class=\"nav-item\">\n        <a href=\"javascript:void(0);\" class=\"nav-link\"  (click)=\"doSelect(item.key)\">\n            <fa-icon *ngIf=\"item.key===active\" [icon]=\"faAngleRight\"></fa-icon> {{item.label}}\n        </a>\n    </li>\n</ul>\n"
        },
        {
            "name": "NavigationPageComponent",
            "id": "component-NavigationPageComponent-1bd9aefcf499c87d07c14cc148facd8346e56a95c1e8127a136f46412d38110df00b7845097fdcd8c04308f315e6e32e24eef82f948404d739e29e195278bcda",
            "file": "src/app/navigation-page/navigation-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-page",
            "styleUrls": [
                "./navigation-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\n    {\n      label: 'Home',\n      route: '/'\n    },\n    {\n      label: 'Navigator'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbItem[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedDataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataSourceSelection",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "DataSourceSelection",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "DataSourceSelection",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {BreadcrumbItem} from \"@fabric/common\";\nimport {DataSourceSelection} from \"@fabric/component\";\n\n@Component({\n  selector: 'app-navigation-page',\n  templateUrl: './navigation-page.component.html',\n  styleUrls: ['./navigation-page.component.scss']\n})\nexport class NavigationPageComponent implements OnInit {\n\n  breadcrumbs: BreadcrumbItem[] = [\n    {\n      label: 'Home',\n      route: '/'\n    },\n    {\n      label: 'Navigator'\n    }\n  ]\n\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  // datasource selection\n\n  selectedDataSource: DataSourceSelection\n\n  selectDataSource(dataSource: DataSourceSelection) {\n    this.selectedDataSource = dataSource\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'navigation'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <app-title text=\"Navigation\"></app-title>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n</ng-template>\n\n<ng-template #middle>\n    <app-data-source-selection-panel (selected)=\"selectDataSource($event)\"></app-data-source-selection-panel>\n    <app-navigation-panel *ngIf=\"selectedDataSource\" [dataSource]=\"selectedDataSource\"></app-navigation-panel>\n\n</ng-template>"
        },
        {
            "name": "NavigationPanelComponent",
            "id": "component-NavigationPanelComponent-c346d70f3fa112f2333d889682d3f0f5cf673778bbf26452c2bac1137ae05763a2a91849627557f3666b345bfaa429d62ceb89d724d5114bb8f0c437c2e8a83a",
            "file": "src/app/navigation-page/navigation-panel/navigation-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-panel",
            "styleUrls": [
                "./navigation-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "DataSourceSelection",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentNavItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "navItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "tree$",
                    "defaultValue": "this.service.tree$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "initNavItems",
                    "args": [
                        {
                            "name": "navItems",
                            "type": "NavItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "navItems",
                            "type": "NavItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navItemSelected",
                    "args": [
                        {
                            "name": "navItem",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "navItem",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {DataSourceSelection} from \"@fabric/component\";\nimport {NavItem} from \"@fabric/models\";\nimport {NavigationService} from \"../navigation.service\";\n\n@Component({\n  selector: 'app-navigation-panel',\n  templateUrl: './navigation-panel.component.html',\n  styleUrls: ['./navigation-panel.component.scss']\n})\nexport class NavigationPanelComponent implements OnInit {\n\n  constructor(private service: NavigationService) { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  dataSource: DataSourceSelection\n\n  ngOnChanges(changes: SimpleChanges) {\n    let systemComponentKey = this.dataSource.systemComponent.key;\n    this.service.loadNavItems(systemComponentKey, null)\n  }\n\n  tree$ = this.service.tree$\n\n  // navitems\n\n  navItems: NavItem[]\n  currentNavItem: NavItem\n\n  private initNavItems(navItems: NavItem[]) {\n    return this.navItems = navItems;\n  }\n\n  navItemSelected(navItem: NavItem) {\n    this.currentNavItem = navItem\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "NavigationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <app-panel>\n                <div style=\"min-height: 80vh; max-height: 80vh; overflow: auto\">\n                    <ng-container *ngIf=\"tree$ | async as tree\">\n                        <app-navigation-tree [tree]=\"tree\" ></app-navigation-tree>\n                    </ng-container>\n                </div>\n            </app-panel>\n        </div>\n    </div>\n\n</div>\n"
        },
        {
            "name": "NavigationSelectionPanelComponent",
            "id": "component-NavigationSelectionPanelComponent-84400063beda62a67a1ca92b1cd56617306b56781db1a7b4e8555873ade0ea387356c7ef10d36baf535f8756cdeb0c04acd1b93d3b668e48fb454703142fd301",
            "file": "src/app/navigation-page/navigation-selection-panel/navigation-selection-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-selection-panel",
            "styleUrls": [
                "./navigation-selection-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-selection-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "NavItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<NavItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {NavItem} from \"@fabric/models\";\n\n@Component({\n  selector: 'app-navigation-selection-panel',\n  templateUrl: './navigation-selection-panel.component.html',\n  styleUrls: ['./navigation-selection-panel.component.scss']\n})\nexport class NavigationSelectionPanelComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  items: NavItem[]\n\n  @Output()\n  selected = new EventEmitter<NavItem>()\n\n  apply(item: NavItem) {\n    this.selected.emit(item)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation-selection-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"items\">\n    <div class=\"list-group\" style=\"min-height: 10vh; max-height: 10vh; overflow: auto\">\n        <a class=\"list-group-item list-group-item-action list-group-item-light\" *ngFor=\"let item of items\"\n           (click)=\"apply(item)\" href=\"javascript:void(0);\">\n            {{item.label}}\n        </a>\n    </div>\n</ng-container>"
        },
        {
            "name": "NavigationTreeComponent",
            "id": "component-NavigationTreeComponent-ce1977ba3438b86dcaa4cf0a588756dc717d30dd8ae9612e187208d096124db5ef693e3910af803b0a2188c22c13bfc4e933ba6be35fb07a82d4d75810f39926",
            "file": "src/app/navigation-page/navigation-tree/navigation-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-tree",
            "styleUrls": [
                "./navigation-tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "NavTreeItemDto",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {NavItem, Row} from \"@fabric/models\";\n\nexport interface NavTreeItemDto {\n    root: boolean\n    navItems: NavItem[]\n    label?: string\n    rows?: Row[]\n    columns?: string[]\n    children?: NavTreeItemDto[]\n}\n\n@Component({\n  selector: 'app-navigation-tree',\n  templateUrl: './navigation-tree.component.html',\n  styleUrls: ['./navigation-tree.component.scss']\n})\nexport class NavigationTreeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  tree: NavTreeItemDto\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./navigation-tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-navigation-tree-item [item]=\"tree\"></app-navigation-tree-item>\n\n"
        },
        {
            "name": "NavigationTreeItemComponent",
            "id": "component-NavigationTreeItemComponent-7c2013a82c62335f5b9e1dd84208d5647f5a919114a1e4f717177fc89ba3666c3249825ef8e4f89d32e33d540a7c495e6e2f4529e3693691e4c3b1715d1c9733",
            "file": "src/app/navigation-page/navigation-tree-item/navigation-tree-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation-tree-item",
            "styleUrls": [
                "./navigation-tree-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation-tree-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "depth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "NavTreeItemDto",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onNavSelect",
                    "defaultValue": "new EventEmitter<NavItem>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectIcon",
                    "defaultValue": "faArrowRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNav",
                    "args": [
                        {
                            "name": "item",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "NavItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {NavTreeItemDto} from \"../navigation-tree/navigation-tree.component\";\nimport {faArrowRight} from \"@fortawesome/free-solid-svg-icons\";\nimport {NavItem} from \"@fabric/models\";\n\n@Component({\n  selector: 'app-navigation-tree-item',\n  templateUrl: './navigation-tree-item.component.html',\n  styleUrls: ['./navigation-tree-item.component.scss']\n})\nexport class NavigationTreeItemComponent implements OnInit {\n\n  selectIcon = faArrowRight\n\n  constructor() { }\n\n  @Input()\n  item: NavTreeItemDto\n\n  @Output()\n  onNavSelect = new EventEmitter<NavItem>()\n\n  @Input()\n  depth: number = 0\n\n  ngOnInit(): void {\n  }\n\n  selectNav(item: NavItem) {\n    console.log('selected: ', item)\n    this.onNavSelect.emit(item)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-container {\n  position: relative;\n}\n\n.table-container {\n  padding: 10px;\n  border: 1px solid steelblue;\n  border-radius: 10px;\n}\n\n.title-section {\n}\n\n.table-section {\n  padding-top: 10px;\n}\n\n.navigation-section {\n}\n\n.navigation-select {\n  width: 200px;\n  padding: 0px;\n  display: inline;\n}\n\n.children-container {\n  position: absolute;\n  left: 100px;\n}\n\n.child-container {\n  padding-top: 10px;\n}",
                    "styleUrl": "./navigation-tree-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"item-container\">\n<ng-container *ngIf=\"item.root\">\n    <div class=\"navigation-section\">\n        <fa-icon [icon]=\"selectIcon\"></fa-icon>\n        &nbsp;\n        <select *ngIf=\"item.navItems\" [ngModel]=\"item.navItems\" class=\"form-select navigation-select\"  (ngModelChange)=\"selectNav($event)\">\n            <option>-- select --</option>\n            <option [ngValue]=\"navItem\" *ngFor=\"let navItem of item.navItems\">\n                {{navItem.label}}\n            </option>\n        </select>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"!item.root\">\n    <div class=\"table-container\">\n        <div class=\"title-section\">\n            {{item.label}}\n        </div>\n        <div class=\"table-section\">\n            <table class=\"table table-bordered\">\n                <thead>\n                <tr>\n                    <th *ngFor=\"let column of item.columns\">{{column}}</th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let row of item.rows\">\n                    <td *ngFor=\"let value of row.values\">\n                        {{value}}\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n        <div *ngIf=\"item.navItems\" class=\"navigation-section\">\n            <fa-icon [icon]=\"selectIcon\"></fa-icon>\n            <select class=\"form-select navigation-select\" *ngIf=\"item.navItems\">\n                <option *ngFor=\"let navItem of item.navItems\">\n                    {{navItem.label}}\n                </option>\n            </select>\n        </div>\n    </div>\n</ng-container>\n<ng-container *ngIf=\"item.children\">\n    <div class=\"children-container\">\n        <ng-container *ngFor=\"let child of item.children\">\n            <div class=\"child-container\">\n                <app-navigation-tree-item [item]=\"child\" [depth]=\"depth+1\"></app-navigation-tree-item>\n            </div>\n        </ng-container>\n    </div>\n</ng-container>\n</div>\n"
        },
        {
            "name": "OutputPanelComponent",
            "id": "component-OutputPanelComponent-4083b1f733b922ba6f426c94cc2197d9b4f1ebcda1fce3f932b450dc6701386b4c253364c11157c4309da247eb15a1198c67df41fc707274c49dfdd2f3f5463d",
            "file": "src/app/console-page/console-panel/output-panel/output-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-output-panel",
            "styleUrls": [
                "./output-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./output-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "output",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Output",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTableRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "Row",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Row",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Output} from \"../../console.service\";\nimport {Row} from \"@fabric/models\";\n\n@Component({\n  selector: 'app-output-panel',\n  templateUrl: './output-panel.component.html',\n  styleUrls: ['./output-panel.component.scss']\n})\nexport class OutputPanelComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  output: Output\n\n  selectTableRow(row: Row) {\n    console.log('selected: ', row)\n  }\n\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./output-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"min-height: 80vh; max-height: 80vh; overflow: auto\">\n    <ng-container *ngIf=\"output.jsonOutput\">\n        <pre>{{output.jsonOutput | json}}</pre>\n    </ng-container>\n    <ng-container *ngIf=\"output.stackTraceOutput\" >\n        <div class=\"bg-warning\">\n            {{output.stackTraceOutput}}\n        </div>\n    </ng-container>\n    <ng-container *ngIf=\"output.tabularResponse\">\n        <app-table [tabular]=\"output.tabularResponse\" (onRowSelect)=\"selectTableRow($event)\"></app-table>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "PagerComponent",
            "id": "component-PagerComponent-469f80539d50c1fcc374c75c752dd5c044e4871dcc0e355cc6775f7eb33c63a617f318adb733f1f25cac38c394e243a1869c7011e577e85546ee45388bcbad77",
            "file": "src/app/common/pager/pager.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pager",
            "styleUrls": [
                "./pager.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pager.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "paging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "PagingDto",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "first",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "last",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "next",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "previous",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faFastBackward",
                    "defaultValue": "faFastBackward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "faFastForward",
                    "defaultValue": "faFastForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "faStepBackward",
                    "defaultValue": "faStepBackward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "faStepForward",
                    "defaultValue": "faStepForward",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "firstClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "firstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gapAfterMiddlePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gapBeforeMiddlePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gapBetweenFirstAndLastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lastClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "lastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "middlePage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "secondPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\nimport {faFastBackward, faFastForward, faStepBackward, faStepForward} from '@fortawesome/free-solid-svg-icons';\nimport {PagingDto} from \"@fabric/models\";\n\n@Component({\n  selector: 'app-pager',\n  templateUrl: './pager.component.html',\n  styleUrls: ['./pager.component.scss']\n})\nexport class PagerComponent implements OnInit {\n\n  faFastBackward=faFastBackward\n  faStepBackward=faStepBackward\n  faStepForward=faStepForward\n  faFastForward=faFastForward\n\n  constructor() { }\n\n  @Input()\n  private paging: PagingDto\n\n  @Output()\n  private first = new EventEmitter()\n\n  @Output()\n  private previous = new EventEmitter()\n\n  @Output()\n  private next = new EventEmitter()\n\n  @Output()\n  private last = new EventEmitter()\n\n  ngOnInit(): void {\n  }\n\n  firstClicked() {\n    this.first.emit()\n  }\n\n  previousClicked() {\n    this.previous.emit()\n  }\n\n  nextClicked() {\n    this.next.emit()\n  }\n\n  lastClicked() {\n    this.last.emit()\n  }\n\n  firstPage(): boolean {\n    return this.paging.pageNr == 1\n  }\n\n  secondPage(): boolean {\n    return this.paging.pageNr == 2\n  }\n\n  gapBetweenFirstAndLastPage():boolean {\n    return (this.firstPage() || this.lastPage()) && this.pageCount() > 2\n  }\n\n  gapBeforeMiddlePage():boolean {\n    return this.middlePage() && this.paging.pageNr > 2\n  }\n\n  gapAfterMiddlePage():boolean {\n    return this.middlePage() && this.paging.pageNr < this.pageCount() - 1\n  }\n\n  middlePage(): boolean {\n    return !this.firstPage() && !this.lastPage()\n  }\n\n  lastPage():boolean {\n    return this.paging.pageNr == this.pageCount()\n  }\n\n  pageCount(): number {\n    return Math.ceil(this.paging.nrOfResults/this.paging.pageSize)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pager.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<nav aria-label=\"Page navigation example\">\n    <ul class=\"pagination .pagination-sm\">\n        <li class=\"page-item\">\n            <a class=\"page-link\" href=\"javascript:void(0);\" aria-label=\"Previous\">\n                <span aria-hidden=\"true\">&laquo;</span>\n            </a>\n        </li>\n        <ng-container *ngIf=\"pageCount() <= 5\">\n            <li class=\"page-item\" [class.active]=\"paging.pageNr==1\"><a class=\"page-link\" href=\"javascript:void(0);\">1</a></li>\n            <li *ngIf=\"pageCount()>1\" class=\"page-item\" [class.active]=\"paging.pageNr==2\"><a class=\"page-link\" href=\"javascript:void(0);\">2</a></li>\n            <li *ngIf=\"pageCount()>2\" class=\"page-item\" [class.active]=\"paging.pageNr==3\"><a class=\"page-link\" href=\"javascript:void(0);\">3</a></li>\n            <li *ngIf=\"pageCount()>3\" class=\"page-item\" [class.active]=\"paging.pageNr==4\"><a class=\"page-link\" href=\"javascript:void(0);\">4</a></li>\n            <li *ngIf=\"pageCount()>4\" class=\"page-item\" [class.active]=\"paging.pageNr==5\"><a class=\"page-link\" href=\"javascript:void(0);\">5</a></li>\n        </ng-container>\n        <ng-container *ngIf=\"pageCount() > 5\">\n            <li class=\"page-item\" [class.active]=\"firstPage()\"><a class=\"page-link\" href=\"javascript:void(0);\">1</a></li>\n            <li *ngIf=\"gapBetweenFirstAndLastPage()\" class=\"page-item \">\n                <span class=\"page-link\">..</span>\n            </li>\n            <li *ngIf=\"gapBeforeMiddlePage()\" class=\"page-item \">\n                <span class=\"page-link\">..</span>\n            </li>\n            <li *ngIf=\"middlePage() \" class=\"page-item active\"><a class=\"page-link\" href=\"javascript:void(0);\">{{paging.pageNr}}</a></li>\n            <li *ngIf=\"gapAfterMiddlePage()\" class=\"page-item \">\n                <span class=\"page-link\">..</span>\n            </li>\n            <li class=\"page-item\" [class.active]=\"lastPage()\"><a class=\"page-link\" href=\"javascript:void(0);\">{{pageCount()}}</a></li>\n        </ng-container>\n        <li class=\"page-item\" >\n            <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\n                <span aria-hidden=\"true\">&raquo;</span>\n            </a>\n        </li>\n    </ul>\n</nav>"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-a51a73e6ebaaf535727ea0fd30d54849385985825483bea89dfa0232aaa710ed6aebcbc5ba2fc4c03edd977ab4f24a4bbc850be2883fe473ba16c5c935736d81",
            "file": "src/app/common/styleguide/panel/panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss']\n})\nexport class PanelComponent implements OnInit {\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../variables';\n\n.panel-border {\n  background-color: $storybook-white !important;\n  border: 1px solid $storybook-secondary-400 !important;\n  margin-bottom: 7px;\n}\n\n.panel-container {\n  padding: 10px;\n}\n",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"panel-border\">\n  <div class=\"panel-container\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "PopupMenuComponent",
            "id": "component-PopupMenuComponent-0ed2a066939d050c3817abdaa5224e1550abfc0e1e39053eafafcfdc32891f5f99dc3539479d24da9479d665fdc02464183e284e09222363516fefb06a72513e",
            "file": "src/app/common/popup-menu/popup-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-popup-menu",
            "styleUrls": [
                "./popup-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "width",
                    "defaultValue": "\"200px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PopupMenuItemSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "visibility",
                    "defaultValue": "\"hidden\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.visibility'"
                        }
                    ]
                },
                {
                    "name": "x",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.left'"
                        }
                    ]
                },
                {
                    "name": "y",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'style.top'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "PopupMenuItemSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "PopupMenuItemSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDocumentClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.left",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.top",
                    "defaultValue": "\"0px\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style.visibility",
                    "defaultValue": "\"hidden\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, HostBinding, HostListener, Input, OnInit} from '@angular/core';\n\n// based on https://mobiarch.wordpress.com/2018/07/07/create-a-popup-menu-in-angular/\n\nexport interface PopupMenuItemSpec {\n  label: string\n  onClick: () => void\n}\n\n@Component({\n  selector: 'app-popup-menu',\n  templateUrl: './popup-menu.component.html',\n  styleUrls: ['./popup-menu.component.scss']\n})\nexport class PopupMenuComponent implements OnInit {\n  @HostBinding(\"style.top\") y = \"0px\"\n  @HostBinding(\"style.left\") x = \"0px\"\n  @HostBinding(\"style.visibility\") visibility = \"hidden\"\n  @Input() @HostBinding(\"style.width\") width = \"200px\"\n\n  constructor() {\n  }\n\n  items: PopupMenuItemSpec[]\n\n  ngOnInit() {\n  }\n\n  open(e: MouseEvent) {\n    this.x = `${e.pageX}px`\n    this.y = `${e.pageY}px`\n\n    this.visibility = \"visible\"\n\n    e.stopPropagation()\n  }\n\n  close() {\n    this.visibility = \"hidden\"\n  }\n\n  @HostListener('document:click')\n  public onDocumentClick() {\n    if (this.visibility === \"visible\") {\n      this.close()\n    }\n  }\n\n  onClick(item: PopupMenuItemSpec) {\n    item.onClick.apply(this, [])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n:host {\n  border-top: 1px solid rgb(13, 110, 253);\n  border-left: 1px solid rgb(13, 110, 253);\n  border-right: 1px solid rgb(13, 110, 253);\n  position: absolute;\n  z-index: 999;\n  cursor: pointer;\n  background: white;\n}\n\n.items p {\n  margin: 0px;\n  padding: 5px;\n  border-bottom: 1px solid rgb(13, 110, 253);\n}\n\n.items p:hover {\n  color: white;\n  background: $storybook-primary-300;\n}\n",
                    "styleUrl": "./popup-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"items\" *ngFor=\"let item of items\">\n  <p (click)=\"onClick(item)\">{{item.label}}</p>\n</div>\n"
        },
        {
            "name": "QueryPageComponent",
            "id": "component-QueryPageComponent-f71b8bfdfd95e56c80318334392e3f2303ff2be853241ed16f69cb72b68bbaa312acef5dac0f24cb1368e376205d4c9f0d133b86a1279a4c6dffd933dadd0f17",
            "file": "src/app/query/query-page/query-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-query-page",
            "styleUrls": [
                "./query-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./query-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-query-page',\n  templateUrl: './query-page.component.html',\n  styleUrls: ['./query-page.component.scss']\n})\nexport class QueryPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./query-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>query-page works!</p>\n"
        },
        {
            "name": "SideBarComponent",
            "id": "component-SideBarComponent-848ef5609186c9db88faecf53957118a84395a687dc4ac6e57a7f4cfa55d4877a0fe64fea7c7afcaebc8c5d3dd421df91facda5a11c5af6920c977480e364ddf",
            "file": "src/app/common/styleguide/side-bar/side-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-side-bar",
            "styleUrls": [
                "./side-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "PageId",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\n        {\n            id: 'settings',\n            label: 'Settings',\n            level: 0\n        },\n        {\n            id: 'environments',\n            label: 'Environments',\n            route: this.routingService.environmentsPageRoute(),\n            level: 1\n        },\n        {\n            id: 'datasources',\n            label: 'Datasources',\n            route: this.routingService.dataSourcesPageRoute(),\n            level: 1\n        },\n        {\n            id: 'console',\n            label: 'Console',\n            route: this.routingService.consolePageRoute(),\n            level: 0\n        },\n        {\n            id: 'snapshots',\n            label: 'Snapshots',\n            level: 0,\n            route: this.routingService.snapshotsPageroute(),\n\n        },\n\n    ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionSpec[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "collapsed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCollapse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {SideBarService} from \"./side-bar.service\";\nimport {RoutingService} from \"../../routing.service\";\n\ninterface ActionSpec {\n    label: string\n    id?: PageId\n    route?: string[]\n    level: number\n}\n\ntype PageId = 'settings' | 'environments'| 'datasources' | 'snapshots' | 'console' | 'navigation'\n\n@Component({\n    selector: 'app-side-bar',\n    templateUrl: './side-bar.component.html',\n    styleUrls: ['./side-bar.component.scss']\n})\nexport class SideBarComponent {\n\n    constructor(private router: Router, private sideBarService: SideBarService, private routingService: RoutingService) {\n    }\n\n    @Input()\n    active: PageId;\n\n    actions: ActionSpec[] = [\n        {\n            id: 'settings',\n            label: 'Settings',\n            level: 0\n        },\n        {\n            id: 'environments',\n            label: 'Environments',\n            route: this.routingService.environmentsPageRoute(),\n            level: 1\n        },\n        {\n            id: 'datasources',\n            label: 'Datasources',\n            route: this.routingService.dataSourcesPageRoute(),\n            level: 1\n        },\n        {\n            id: 'console',\n            label: 'Console',\n            route: this.routingService.consolePageRoute(),\n            level: 0\n        },\n        {\n            id: 'snapshots',\n            label: 'Snapshots',\n            level: 0,\n            route: this.routingService.snapshotsPageroute(),\n\n        },\n\n    ]\n\n    navigateTo(route: string[]) {\n        this.sideBarService.collapse()\n        this.router.navigate(route)\n    }\n\n    toggleCollapse() {\n        this.sideBarService.toggleState()\n    }\n\n    collapsed(): boolean {\n        return this.sideBarService.collapsed;\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar {\n  width: 280px;\n}",
                    "styleUrl": "./side-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sideBarService",
                        "type": "SideBarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sideBarService",
                        "type": "SideBarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"!collapsed()\">\n    <div class=\"sidebar\">\n        <ul class=\"nav nav-pills flex-column\">\n            <li *ngFor=\"let action of actions\" class=\"nav-item\">\n                <ng-container >\n                    <a href=\"javascript:void(0);\" class=\"nav-link\" [class.active]=\"action.id==active\"\n                       (click)=\"navigateTo(action.route)\">\n                        <span *ngIf=\"action.level==1\">&nbsp; &nbsp; </span> {{action.label}}\n                    </a>\n                </ng-container>\n            </li>\n        </ul>\n    </div>\n</ng-container>\n"
        },
        {
            "name": "SnapshotDialogComponent",
            "id": "component-SnapshotDialogComponent-b0c912c30c007f38f5e2160e91e4cd011f4868154f090a5ca91892f102c200ce20040caef5d2eb35a5f85145e642a1c979ba58f38c27263d9711ee3a071bb1b1",
            "file": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snapshot-dialog",
            "styleUrls": [
                "./snapshot-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "SnapshotDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "datepipe",
                    "defaultValue": "new DatePipe('en-US')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePipe",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "options",
                    "defaultValue": "{\n        useCheckbox: true,\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITreeOptions",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "tree",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tree'"
                        }
                    ]
                },
                {
                    "name": "treeNodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogTreeNode[]",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ondeSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnvironmentChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNameChangedManually",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {DatePipe} from '@angular/common';\nimport {SystemDescriptionService} from \"../../../settings/system-description.service\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {StructureDto} from \"@fabric/models\";\nimport {ITreeModel, ITreeNode, ITreeOptions} from \"@circlon/angular-tree-component/lib/defs/api\";\n\nexport interface SnapshotDialogData {\n    environment: string,\n    name: string,\n}\n\nexport interface SnapshotDialogSpec {\n    data: SnapshotDialogData\n    cancel: () => void\n    confirm: (data: SnapshotDialogData) => void\n    useNameGenerator: boolean\n}\n\nexport interface SnapshotDialogTreeNode {\n    name: string,\n    structureDto: StructureDto,\n    children: SnapshotDialogTreeNode[],\n    data? : any\n    parent?: SnapshotDialogTreeNode\n}\n\nexport class StructureDto2TreeNodeConverter {\n\n    public run(structureDto: StructureDto): SnapshotDialogTreeNode[] {\n        if (!structureDto) return []\n        let node = this.runRecursive(structureDto)\n        return [node]\n    }\n\n    runRecursive(structureDto: StructureDto): SnapshotDialogTreeNode {\n        if (!structureDto) return null\n        let node = <SnapshotDialogTreeNode> {\n            structureDto,\n            name: structureDto.id ? structureDto.id : '',\n        }\n        node.children = structureDto.children?.map(child => {\n            return this.runRecursive(child)\n        })\n        return node\n    }\n\n\n}\n\n\n\n@Component({\n    selector: 'app-snapshot-dialog',\n    templateUrl: './snapshot-dialog.component.html',\n    styleUrls: ['./snapshot-dialog.component.scss']\n})\nexport class SnapshotDialogComponent implements OnInit {\n\n    constructor(private systemDescriptionService: SystemDescriptionService) {\n    }\n\n    systemDescription$ = this.systemDescriptionService.systemDescription$\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SnapshotDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.formGroup.setValue(this.spec.data)\n            this.treeNodes = []\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        environment : new FormControl(null, [Validators.required]),\n        name : new FormControl(null, [Validators.required]),\n    })\n\n    private get environmentControl(): FormControl {\n        return <FormControl> this.formGroup.get('environment')\n    }\n\n    private get nameControl(): FormControl {\n        return <FormControl> this.formGroup.get('name')\n    }\n\n    // tree\n\n    treeNodes: SnapshotDialogTreeNode[]  = []\n\n    options: ITreeOptions = {\n        useCheckbox: true,\n    }\n\n    @ViewChild('tree') tree;\n\n    onSelect(event) {\n        try {\n            console.log('select: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n    ondeSelect(event) {\n        try {\n            console.log('deselect: ', event.node);\n        } catch (e) {\n            console.log(e.message)\n        }\n    }\n\n\n    test() {\n        function logRecursive(model: ITreeModel, node: ITreeNode) {\n            if (node) {\n                console.log(node.data)\n                // @ts-ignore'\n                console.log('selected: ', node.isSelected)\n                node.children?.forEach(child => logRecursive(model, child))\n            }\n        }\n\n        console.log('selected: ', logRecursive(this.tree.treeModel, this.tree.treeModel.roots[0]))\n    }\n\n\n    datepipe: DatePipe = new DatePipe('en-US')\n\n    onEnvironmentChanged() {\n        let env = this.environmentControl.value\n        if (this.spec.useNameGenerator) {\n            let timeStamp = this.datepipe.transform(new Date(), 'YYYY-MM-dd HH:mm:ss')\n            this.nameControl.setValue(`${env} snapshot ${timeStamp}`)\n        }\n        this.systemDescriptionService.loadEnvironmentSystemStructure(env).then((structureDto) => {\n            this.treeNodes = new StructureDto2TreeNodeConverter().run(structureDto)\n        })\n    }\n\n    onNameChangedManually() {\n        this.spec.useNameGenerator = false\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.test()\n        this.spec.confirm(this.formGroup.value)\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentControl": {
                    "name": "environmentControl",
                    "getSignature": {
                        "name": "environmentControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 83
                    }
                },
                "nameControl": {
                    "name": "nameControl",
                    "getSignature": {
                        "name": "nameControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 87
                    }
                }
            },
            "templateData": "<div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"'Create Snapshot'\" (onCancel)=\"cancel()\"></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\">\n                    <label for=\"environment\" class=\"form-label\">Environment</label>\n                    <select formControlName=\"environment\" class=\"form-select\" (change)=\"onEnvironmentChanged()\">\n                        <ng-container *ngIf=\"systemDescription$ | async as systemDescription\">\n                            <option *ngFor=\"let environment of systemDescription.environments\"\n                                    [ngValue]=\"environment.key\">{{environment.label}}</option>\n                        </ng-container>\n                    </select>\n                    <div id=\"environment\" class=\"form-text\">Enter an environment.</div>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"structure\" class=\"form-label\" >Data Selection</label>\n                    <div style=\"border: 1px solid rgb(206, 212, 218); overflow: hidden\">\n                        <div style=\"padding: 0.375rem 2.25rem 0.375rem 0.75rem; max-height: 200px; overflow-y: auto;\">\n                            <tree-root id=\"structure\" [nodes]=\"treeNodes\" [options]=\"options\" class=\"reverse\" #tree\n                            ></tree-root>\n                            <!--\n                                                                   (select)=\"onSelect($event)\"\n                                                                   (deselect)=\"ondeSelect($event)\"\n                            ></tree-root>\n                                                                   -->\n                        </div>\n                    </div>\n                </div>\n\n<!--                <button (click)=\"test()\">get selection</button>-->\n<!--                <div class=\"mb-3\">-->\n<!--                    <label for=\"name\" class=\"form-label\">Name</label>-->\n<!--                    <input formControlName=\"name\" type=\"text\" class=\"form-control\" (keyup)=\"onNameChangedManually()\">-->\n<!--                    <div id=\"name\" class=\"form-text\">Enter a name for the snapshot.</div>-->\n<!--                </div>-->\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmDisabled]=\"!formGroup.valid\" ></app-modal-footer>\n    </div>\n</div>\n"
        },
        {
            "name": "SnapshotOverviewPanelComponent",
            "id": "component-SnapshotOverviewPanelComponent-dc336203ad431d14db26d411879c19d0400d06b95486186ba26ddb2030c052e9373f013fde60e0d9faeaa9d7d5eb3b2c4844187cedfa68ae9eb3f994b8656f44",
            "file": "src/app/snapshot/snapshots-page/snapshot-overview-panel/snapshot-overview-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snapshot-overview-panel",
            "styleUrls": [
                "./snapshot-overview-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-overview-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modalService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModalService",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "summaries$",
                    "defaultValue": "this.service.summaries$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "systemDescription$",
                    "defaultValue": "this.systemDescriptionService.systemDescription$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "uploadDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotUploadDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSnapshotDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "closeUploadDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "confirmCreate",
                    "args": [
                        {
                            "name": "data",
                            "type": "SnapshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SnapshotDialogData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmUpload",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "envkKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "envkKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDummySnapshot",
                    "args": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshotId",
                            "type": "SnapshotId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "envKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSnapshotDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SnapshotDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SnapshotDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openUploadDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SnapshotUploadDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SnapshotUploadDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snapshotDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "snapshotUploadDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "summaryActions",
                    "args": [
                        {
                            "name": "summary",
                            "type": "SnapshotSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemDesc",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionsSpec",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "SnapshotSummaryDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemDesc",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SnapshotId, SnapshotSummaryDto, SystemDescriptionDto} from \"@fabric/models\";\nimport {ActionsSpec, HasConfirmationDialogMixin, ModalService} from \"@fabric/common\";\nimport {SnapshotsService} from \"../snapshots.service\";\nimport {SnapshotDialogData, SnapshotDialogSpec} from \"../snapshot-dialog/snapshot-dialog.component\";\nimport {SnapshotUploadDialogSpec} from \"../snapshot-upload-dialog/snapshot-upload-dialog.component\";\nimport {SystemDescriptionService} from \"../../../settings/system-description.service\";\nimport {CommandControllerService} from \"@fabric/services\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-snapshot-overview-panel',\n  templateUrl: './snapshot-overview-panel.component.html',\n  styleUrls: ['./snapshot-overview-panel.component.scss']\n})\nexport class SnapshotOverviewPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n  constructor(\n      public modalService: ModalService,\n      private service: SnapshotsService,\n      private systemDescriptionService : SystemDescriptionService,\n      private commandControllerService: CommandControllerService,\n      private _router: Router\n  ) {\n    super(modalService)\n  }\n\n  ngOnInit(): void {\n  }\n\n  // summaries\n  summaries$ = this.service.summaries$\n  systemDescription$ = this.systemDescriptionService.systemDescription$\n\n  summaryActions(summary: SnapshotSummaryDto, systemDesc: SystemDescriptionDto): ActionsSpec {\n      return {\n        actions: [\n          {\n            label: 'Delete',\n            handler: () => this.openConfirmationDialog({\n              title : 'Confirm Delete',\n              message: `Delete Snapshot ${summary.name}?`,\n              confirm: () => { this.closeConfirmationDialog(); this.confirmDelete(summary.snapshotId) },\n              cancel: () => this.closeConfirmationDialog()\n            })\n          },\n          {\n            label: 'Upload',\n            handler: () => this.openUploadDialog({\n              environments: systemDesc.environments,\n              data: {\n                environment: null\n              },\n              cancel: () => this.closeUploadDialog(),\n              confirm: (data) => {\n                this.closeUploadDialog()\n                this.confirmUpload(summary.snapshotId, data.environment)\n              }\n            })\n          }\n        ]\n      }\n  }\n\n  private confirmDelete(snapshotId: SnapshotId) {\n    this.service.delete(snapshotId)\n  }\n\n  private confirmUpload(snapshotId: SnapshotId, envkKey: string) {\n    this.createDummySnapshot(snapshotId, envkKey)\n  }\n\n  createSnapshot() {\n    this.openSnapshotDialog({\n      useNameGenerator: true,\n      data: {\n        environment: null,\n        name: null\n      },\n      cancel: () => this.closeSnapshotDialog(),\n      confirm: (data) => { this.confirmCreate(data) ; this.closeSnapshotDialog() }\n    })\n  }\n\n  private confirmCreate(data: SnapshotDialogData) {\n    // this.service.createSnapshot(data.environment, data.name)\n  }\n\n  // snapshot dialog\n\n  spec: SnapshotDialogSpec\n\n  snapshotDialogId() {\n    return 'snapshot-dialog'\n  }\n\n  private openSnapshotDialog(spec: SnapshotDialogSpec) {\n    this.spec = spec\n    this.modalService.open(this.snapshotDialogId())\n  }\n\n  private closeSnapshotDialog() {\n    this.modalService.close(this.snapshotDialogId())\n  }\n\n  // upload dialog\n\n  uploadDialogSpec: SnapshotUploadDialogSpec\n\n  snapshotUploadDialogId() {\n    return 'snapshot-upload-dialog'\n  }\n\n  private openUploadDialog(spec: SnapshotUploadDialogSpec) {\n    this.uploadDialogSpec = spec\n    this.modalService.open(this.snapshotUploadDialogId())\n  }\n\n  private closeUploadDialog() {\n    this.modalService.close(this.snapshotUploadDialogId())\n  }\n\n  // deletion confirmation dialog\n\n  confirmationDialogId(): string {\n    return 'delete-snapshot-confirmation-dialog'\n  }\n\n  createDummySnapshot(snapshotId: SnapshotId, envKey: string) {\n        this.service.upload(snapshotId, envKey).then((executionId)=> {\n            this._router.navigate([\"fe\", \"dummy\", executionId.id] )\n        })\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-overview-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SnapshotsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SnapshotsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "systemDescriptionService",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commandControllerService",
                        "type": "CommandControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"systemDescription$ | async as systemDescription \">\n    <ng-container *ngIf=\"summaries$ | async as summaries\">\n        <table class=\"table table-sm table-striped table-bordered\">\n            <thead>\n            <tr>\n                <th scope=\"col\">Snapshot</th>\n                <th scope=\"col\">Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr *ngFor=\"let summary of summaries\">\n                <td>\n                    <a routerLink=\"/fe/snapshot/{{summary.snapshotId.id}}\">{{summary.name}}</a>\n                </td>\n                <td>\n                    <app-action-buttons [spec]=\"summaryActions(summary, systemDescription)\"></app-action-buttons>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n        <a class=\"btn  btn-sm btn-outline-primary float-right\" (click)=\"createSnapshot()\">Take snapshot</a>\n        <!--<a class=\"btn  btn-sm btn-outline-primary float-right\" (click)=\"createDummySnapshot()\">Dummy async snapshot</a>-->\n    </ng-container>\n</ng-container>\n\n<jw-modal [id]=\"snapshotDialogId()\">\n    <app-snapshot-dialog [spec]=\"spec\"></app-snapshot-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"snapshotUploadDialogId()\">\n    <app-snapshot-upload-dialog [spec]=\"uploadDialogSpec\"></app-snapshot-upload-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "SnapshotPageComponent",
            "id": "component-SnapshotPageComponent-2024bb7ac9005461083c753f59a238bd3bbab3bc1c361f853938474abfd6c054d380702e917aeff88c72e94df518a95c01cb672b37215143bb27b7e07df396ad",
            "file": "src/app/snapshot/snapshot-page/snapshot-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SnapshotService"
                }
            ],
            "selector": "app-snapshot-page",
            "styleUrls": [
                "./snapshot-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "snapshot$",
                    "defaultValue": "this.service.snapshot$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "snapshotId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SnapshotId",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "breadcrumbs",
                    "args": [
                        {
                            "name": "snapshot",
                            "type": "SnapshotDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BreadcrumbItem[]",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snapshot",
                            "type": "SnapshotDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SnapshotService} from \"./snapshot.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {SnapshotDto, SnapshotId} from \"@fabric/models\";\nimport {BreadcrumbItem} from \"@fabric/common\";\n\n@Component({\n  selector: 'app-snapshot-page',\n  templateUrl: './snapshot-page.component.html',\n  styleUrls: ['./snapshot-page.component.scss'],\n  providers: [SnapshotService]\n})\nexport class SnapshotPageComponent implements OnInit {\n\n  constructor(\n      private route: ActivatedRoute,\n      private service: SnapshotService) {\n  }\n\n  snapshotId: SnapshotId\n\n  snapshot$ = this.service.snapshot$\n\n  ngOnInit(): void {\n    this.route.paramMap.subscribe((params) => {\n      this.snapshotId = { id : params.get('snapshotId') }\n      this.service.loadSnapshot(this.snapshotId)\n    })\n  }\n\n    breadcrumbs(snapshot: SnapshotDto): BreadcrumbItem[] {\n        return  [\n        {\n          label: 'Home',\n          route: '/'\n        },\n          {\n            label: 'Snapshots',\n            route: ['/', 'fe', 'dashboard']\n          },\n        {\n          label: `Snapshot: ${snapshot.name}`\n        }\n      ]\n\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SnapshotService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SnapshotService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'dashboard'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <div class=\"container-fluid\" *ngIf=\"snapshot$ | async as snapshot\">\n        <app-title text=\"Snapshot: {{snapshot.name}}\"></app-title>\n    </div>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <div *ngIf=\"snapshot$ | async as snapshot\">\n        <app-breadcrumb [breadcrumbs]=\"breadcrumbs(snapshot)\"></app-breadcrumb>\n    </div>\n</ng-template>\n\n<ng-template #middle>\n    <div *ngIf=\"snapshot$ | async as snapshot\">\n        <app-panel>\n            <pre>{{snapshot | json}}</pre>\n        </app-panel>\n\n        <div *ngFor=\"let componentSnapshot of snapshot.componentSnapshots\">\n            <div *ngIf=\"componentSnapshot.systemType=='MONGO'\">\n                <app-mongo-snapshot [snapshotId]=\"snapshotId\"\n                                    [componentKey]=\"componentSnapshot.componentKey\"></app-mongo-snapshot>\n            </div>\n        </div>\n\n    </div>\n</ng-template>\n"
        },
        {
            "name": "SnapshotsPageComponent",
            "id": "component-SnapshotsPageComponent-725b61bdd1cd85d6089c23e18ce7b3ed3c1fe54ea8ead8104043959ca3b7d900edb19d9bd8cbebcce91226c1e6ab8085d7ffe64af248da6900ad2bc4e052679d",
            "file": "src/app/snapshot/snapshots-page/snapshots-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-page",
            "styleUrls": [
                "./snapshots-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshots-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "[\n    {\n      label: 'Home',\n      route: '/'\n    },\n    {\n      label: 'Snapshots'\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BreadcrumbItem[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {BreadcrumbItem} from \"@fabric/common\";\n\n@Component({\n  selector: 'app-dashboard-page',\n  templateUrl: './snapshots-page.component.html',\n  styleUrls: ['./snapshots-page.component.scss']\n})\nexport class SnapshotsPageComponent implements OnInit {\n\n  breadcrumbs: BreadcrumbItem[] = [\n    {\n      label: 'Home',\n      route: '/'\n    },\n    {\n      label: 'Snapshots'\n    }\n  ]\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshots-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-layout-1col\n        [sidebar]=\"sidebar\"\n        [title]=\"title\"\n        [breadcrumb]=\"breadcrumb\"\n        [middle]=\"middle\"\n>\n</app-layout-1col>\n\n<ng-template #sidebar>\n    <app-side-bar [active]=\"'snapshots'\"></app-side-bar>\n</ng-template>\n\n<ng-template #title>\n    <app-title text=\"Snapshots\"></app-title>\n</ng-template>\n\n<ng-template #breadcrumb>\n    <app-breadcrumb [breadcrumbs]=\"breadcrumbs\"></app-breadcrumb>\n</ng-template>\n\n<ng-template #middle>\n        <app-snapshot-overview-panel></app-snapshot-overview-panel>\n</ng-template>\n\n"
        },
        {
            "name": "SnapshotUploadDialogComponent",
            "id": "component-SnapshotUploadDialogComponent-b456b21e9fa4bf32fb8f183facb5dc8af32d200f2feb67070ec92f2c7bec6c8f82b6024d40e4eb3b2576e907f9e0b6f4fc9a5374f84508614604185bf92a137f",
            "file": "src/app/snapshot/snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snapshot-upload-dialog",
            "styleUrls": [
                "./snapshot-upload-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snapshot-upload-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SnapshotUploadDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {EnvironmentDto} from \"@fabric/models\";\n\nexport interface SnapshotUploadDialogData {\n  environment: string,\n}\n\nexport interface SnapshotUploadDialogSpec {\n  environments: EnvironmentDto[]\n  data: SnapshotUploadDialogData\n  cancel: () => void\n  confirm: (data: SnapshotUploadDialogData) => void\n}\n\n@Component({\n  selector: 'app-snapshot-upload-dialog',\n  templateUrl: './snapshot-upload-dialog.component.html',\n  styleUrls: ['./snapshot-upload-dialog.component.scss']\n})\nexport class SnapshotUploadDialogComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @Input()\n  spec: SnapshotUploadDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec != null) {\n      this.formGroup.setValue(this.spec.data)\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    environment : new FormControl(null, [Validators.required]),\n  })\n\n  private get environmentControl(): FormControl {\n    return <FormControl> this.formGroup.get('environment')\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snapshot-upload-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "environmentControl": {
                    "name": "environmentControl",
                    "getSignature": {
                        "name": "environmentControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 41
                    }
                }
            },
            "templateData": "<div *ngIf=\"spec\" class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"'Upload Snapshot To Environment'\" (onCancel)=\"cancel()\"></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\">\n                    <label for=\"environment\" class=\"form-label\">Environment</label>\n                    <select formControlName=\"environment\" class=\"form-select\" >\n                            <option *ngFor=\"let environment of spec.environments\"\n                                    [ngValue]=\"environment.key\">{{environment.label}}</option>\n                    </select>\n                    <div id=\"environment\" class=\"form-text\">Enter an environment.</div>\n                </div>\n\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmText]=\"'Start upload'\" [confirmDisabled]=\"!formGroup.valid\" ></app-modal-footer>\n    </div>\n</div>\n"
        },
        {
            "name": "SnippetDialogComponent",
            "id": "component-SnippetDialogComponent-4de516dfb0d47e61afef0f1908454cc534b73f301309596868b3655a3eedea5d549492bcf70fa47c0262fe96453aa7b605148392d50f51e0f3081c2b88c66934",
            "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snippet-dialog",
            "styleUrls": [
                "./snippet-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snippet-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "SnippetDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n    id: new FormControl(null),\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fieldControl",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "titleControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {FormArray, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {ConsoleDescriptorDto} from \"@fabric/models\";\nimport {showValidationMessages} from \"@fabric/common\";\n\nexport interface SnippetDialogData {\n  id?: string\n  title?: string\n  attributes?: { [key: string]: string };\n  fields?: string[]\n}\n\nexport interface SnippetDialogSpec {\n  mode: 'NEW' | 'EDIT'\n  descriptor: ConsoleDescriptorDto\n  data: SnippetDialogData\n  cancel: () => void\n  confirm: (data: SnippetDialogData) => void\n}\n\n@Component({\n  selector: 'app-snippet-dialog',\n  templateUrl: './snippet-dialog.component.html',\n  styleUrls: ['./snippet-dialog.component.scss']\n})\nexport class SnippetDialogComponent implements OnChanges {\n\n  constructor() { }\n\n  @Input()\n  spec: SnippetDialogSpec\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.spec) {\n      this.idControl.setValue(null)\n      this.titleControl.setValue(null)\n      this.fieldsControl.controls = []\n      if (this.spec.mode === 'EDIT') {\n        this.idControl.setValue(this.spec.data.id)\n        this.titleControl.setValue(this.spec.data.title)\n      }\n      this.spec.descriptor.items.forEach(item => {\n          let value = this.spec.data.attributes[item.name]\n          this.fieldsControl.push(new FormControl(value))\n      })\n    }\n  }\n\n  formGroup: FormGroup = new FormGroup({\n    id: new FormControl(null),\n    title: new FormControl(null, [Validators.required]),\n    fields: new FormArray([])\n  })\n\n  get idControl():FormControl {\n    return <FormControl> this.formGroup.get('id')\n  }\n\n  get titleControl():FormControl {\n    return <FormControl> this.formGroup.get('title')\n  }\n\n  titleControlInvalid() {\n    return showValidationMessages(this.titleControl)\n  }\n\n\n  get fieldsControl():FormArray {\n    return <FormArray> this.formGroup.get('fields')\n  }\n\n  fieldControl(i: number): FormControl {\n    return <FormControl> this.fieldsControl.controls[i]\n  }\n\n  cancel() {\n    this.spec.cancel()\n  }\n\n  confirm() {\n    this.spec.confirm(this.formGroup.value)\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snippet-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "idControl": {
                    "name": "idControl",
                    "getSignature": {
                        "name": "idControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 55
                    }
                },
                "titleControl": {
                    "name": "titleControl",
                    "getSignature": {
                        "name": "titleControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 59
                    }
                },
                "fieldsControl": {
                    "name": "fieldsControl",
                    "getSignature": {
                        "name": "fieldsControl",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 68
                    }
                }
            },
            "templateData": "<div *ngIf=\"spec && formGroup\"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"spec.mode === 'NEW' ? 'Create Snippet' : 'Edit Snippet'\" (onCancel)=\"cancel()\"></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"form-floating  mb-3\">\n                    <input id=\"title\" formControlName=\"title\" type=\"text\" class=\"form-control\" placeholder=\"enter title\" [class.is-invalid]=\"titleControlInvalid()\">\n                    <label for=\"title\" class=\"form-label\" >Name</label>\n                </div>\n                <div>\n                    <ng-container formArrayName=\"fields\">\n                        <ng-container *ngFor=\"let item of spec.descriptor.items; let i=index\">\n                            <ng-container *ngIf=\"item.inputType==='TEXT'\">\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                            </ng-container>\n                            <ng-container *ngIf=\"item.inputType==='TEXTAREA'\">\n                                <textarea rows=\"12\" class=\"form-control\" [formControl]=\"fieldControl(i)\"></textarea>\n                            </ng-container>\n                            <ng-container *ngIf=\"item.inputType==='SELECT'\">\n                                <select class=\"form-control\" [formControl]=\"fieldControl(i)\">\n                                    <option *ngFor=\"let selectValue of item.selectValues\"\n                                            [ngValue]=\"selectValue\">{{selectValue}}</option>\n                                </select>\n                            </ng-container>\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmDisabled]=\"!formGroup.valid\"></app-modal-footer>\n    </div>\n</div>"
        },
        {
            "name": "SnippetPanelComponent",
            "id": "component-SnippetPanelComponent-8d410a3d9114d14753a786fec9345b37b19eea6c62678834f5046d6299b05198f349666d56500f787a446bc78e280cb5531f0359edd074246e69a251a349a78d",
            "file": "src/app/console-page/console-panel/snippet-panel/snippet-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-snippet-panel",
            "styleUrls": [
                "./snippet-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snippet-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "snippets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "SnippetDto[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter<SnippetDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onEdit",
                    "defaultValue": "new EventEmitter<SnippetDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<SnippetDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "actions",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ActionsSpec",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "snippet",
                            "type": "SnippetDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {SnippetDto} from \"@fabric/models\";\nimport {ActionsSpec} from \"@fabric/common\";\n\n@Component({\n  selector: 'app-snippet-panel',\n  templateUrl: './snippet-panel.component.html',\n  styleUrls: ['./snippet-panel.component.scss']\n})\nexport class SnippetPanelComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  snippets: SnippetDto[]\n\n  @Output()\n  onSelect = new EventEmitter<SnippetDto>()\n\n  @Output()\n  onEdit = new EventEmitter<SnippetDto>()\n\n  @Output()\n  onDelete = new EventEmitter<SnippetDto>()\n\n  ngOnInit(): void {\n  }\n\n  select(snippet: SnippetDto) {\n    this.onSelect.emit(snippet)\n  }\n\n  edit(snippet: SnippetDto) {\n    this.onEdit.emit(snippet)\n  }\n\n  delete(snippet: SnippetDto) {\n    this.onDelete.emit(snippet)\n  }\n\n  actions(snippet: SnippetDto): ActionsSpec {\n    return {\n      actions: [\n        {\n          label: 'Edit',\n          handler: () => this.edit(snippet)\n        },\n        {\n          label: 'Select',\n          handler: () => this.select(snippet)\n        },\n        {\n          label: 'Delete',\n          handler: () => this.delete(snippet)\n        },\n      ]\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snippet-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"snippets\">\n    <div class=\"list-group\">\n        <a class=\"list-group-item list-group-item-action list-group-item-light\" *ngFor=\"let snippet of snippets\"\n           (click)=\"select(snippet)\" href=\"javascript:void(0);\">\n            {{snippet.title}}\n            <div >\n                <app-action-buttons [spec]=\"actions(snippet)\"></app-action-buttons>\n            </div>\n        </a>\n    </div>\n</ng-container>\n\n"
        },
        {
            "name": "StatusComponent",
            "id": "component-StatusComponent-937f4a4926b9551c7e74a541f13594715280ec6b91e408835d4ac9c18f864f9fd4d2d7bfaaf40ddb4ba32130d629f3a3d14290a8440db9d2688b3417deeca0b8",
            "file": "src/app/common/styleguide/status/status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status",
            "styleUrls": [
                "./status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ConnectionStatus",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faArrowUp",
                    "defaultValue": "faArrowUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "faExclamationTriangle",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "showStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {faArrowUp, faExclamationTriangle} from '@fortawesome/free-solid-svg-icons';\n\nexport interface ConnectionStatus {\n  status: 'Calling' | 'OK' | 'Problem'\n  msg: string\n}\n\n@Component({\n  selector: 'app-status',\n  templateUrl: './status.component.html',\n  styleUrls: ['./status.component.scss']\n})\nexport class StatusComponent {\n\n  faExclamationTriangle = faExclamationTriangle\n  faArrowUp = faArrowUp\n\n  @Input()\n  status: ConnectionStatus\n\n  @Output()\n  onClicked = new EventEmitter()\n\n  showStatus() {\n      this.onClicked.emit()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".status-container {\n  padding-right: 30px;\n}\n\n.status-icon {\n  font-size: 20px;\n}\n\n.status-icon-problem {\n  color: darkorange;\n}\n\n.popover__title {\n  font-size: 24px;\n  line-height: 36px;\n  text-decoration: none;\n  color: rgb(228, 68, 68);\n  text-align: center;\n  padding: 15px 0;\n}\n\n.popover__wrapper {\n  position: relative;\n  display: inline-block;\n}\n\n.popover__content {\n  opacity: 0;\n  visibility: hidden;\n  position: absolute;\n  left: -150px;\n  transform: translate(0, 10px);\n  background-color: #bfbfbf;\n  padding: 1.5rem;\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n  width: auto;\n}\n.popover__content:before {\n  position: absolute;\n  z-index: -1;\n  content: \"\";\n  right: calc(50% - 10px);\n  top: -8px;\n  border-style: solid;\n  border-width: 0 10px 10px 10px;\n  border-color: transparent transparent #bfbfbf transparent;\n  transition-duration: 0.3s;\n  transition-property: transform;\n}\n.popover__wrapper:hover .popover__content {\n  z-index: 10;\n  opacity: 1;\n  visibility: visible;\n  transform: translate(0, -20px);\n  transition: all 0.5s cubic-bezier(0.75, -0.02, 0.2, 0.97);\n}\n.popover__message {\n  text-align: center;\n}\n",
                    "styleUrl": "./status.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"status.status==='Calling'\" class=\"status-container\">\n    <fa-icon class=\"status-icon\" [icon]=\"faArrowUp\" ></fa-icon>\n</div>\n<div *ngIf=\"status.status==='Problem'\" class=\"status-container\">\n    <a href=\"javascript:void(0);\" (click)=\"showStatus()\">\n        <fa-icon class=\"status-icon status-icon-problem\" [icon]=\"faExclamationTriangle\" ></fa-icon>\n    </a>\n</div>\n"
        },
        {
            "name": "SystemComponentDialogComponent",
            "id": "component-SystemComponentDialogComponent-5397992a3de4e7998df5c9ed2a574f7d5ea7bae0259fb1c66252bedea91e68eba2e663901e4141cfbddbc57120759a7711846794c5c3863d33c5c65a75b4eb23",
            "file": "src/app/settings/data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-system-component-dialog",
            "styleUrls": [
                "./system-component-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./system-component-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "spec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "SystemComponentDialogSpec",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formGroup",
                    "defaultValue": "new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "keyControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "labelControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemTypeControlInvalid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {showValidationMessages, unique} from '@fabric/common'\nimport {SystemTypeDescriptorDto} from \"@fabric/models\";\n\nexport interface SystemComponentDialogData {\n    key: string,\n    label: string,\n    systemType: string,\n}\n\nexport interface SystemComponentDialogSpec {\n    systemTypes: SystemTypeDescriptorDto[]\n    keys: string[];\n    data: SystemComponentDialogData\n    cancel: () => void\n    confirm: (data: SystemComponentDialogData) => void\n}\n\n\n@Component({\n    selector: 'app-system-component-dialog',\n    templateUrl: './system-component-dialog.component.html',\n    styleUrls: ['./system-component-dialog.component.scss']\n})\nexport class SystemComponentDialogComponent implements OnInit, OnChanges {\n\n    constructor() {}\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    spec: SystemComponentDialogSpec\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (this.spec != null) {\n            this.keyControl.setValidators([Validators.required, unique('key', this.spec.keys)])\n            this.formGroup.setValue(this.spec.data)\n            this.formGroup.markAsPristine()\n            this.formGroup.markAsUntouched()\n        }\n    }\n\n    formGroup: FormGroup = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        label: new FormControl(null, [Validators.required]),\n        systemType: new FormControl(null, [Validators.required]),\n    })\n\n    public get keyControl(): FormControl {\n        return <FormControl> this.formGroup.get('key')\n    }\n\n    public keyControlInvalid() : boolean {\n        return showValidationMessages(this.keyControl)\n    }\n\n    public get labelControl(): FormControl {\n        return <FormControl> this.formGroup.get('label')\n    }\n\n    labelControlInvalid() {\n        return showValidationMessages(this.labelControl)\n    }\n\n    private get systemTypeControl(): FormControl {\n        return <FormControl> this.formGroup.get('systemType')\n    }\n\n\n    systemTypeControlInvalid() {\n        return showValidationMessages(this.systemTypeControl)\n    }\n\n    cancel() {\n        this.spec.cancel()\n    }\n\n    confirm() {\n        this.spec.confirm(this.formGroup.value)\n    }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./system-component-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "keyControl": {
                    "name": "keyControl",
                    "getSignature": {
                        "name": "keyControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 51
                    }
                },
                "labelControl": {
                    "name": "labelControl",
                    "getSignature": {
                        "name": "labelControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 59
                    }
                },
                "systemTypeControl": {
                    "name": "systemTypeControl",
                    "getSignature": {
                        "name": "systemTypeControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 67
                    }
                }
            },
            "templateData": "<div *ngIf=\"spec && formGroup \"  class=\"modal-dialog\">\n    <div class=\"modal-content\">\n        <app-modal-header [title]=\"'Add Datasource'\" (onCancel)=\"cancel()\" ></app-modal-header>\n        <div class=\"modal-body\">\n            <form [formGroup]=\"formGroup\">\n                <div class=\"mb-3\" class=\"form-group\">\n                    <label for=\"key\" class=\"form-label\">Key</label>\n                    <input formControlName=\"key\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"keyControlInvalid()\">\n                    <div id=\"key\" class=\"form-text\">Enter a key for the component.</div>\n                    <app-validation-messages [control]=\"keyControl\"></app-validation-messages>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"label\" class=\"form-label\">Label</label>\n                    <input formControlName=\"label\" type=\"text\" class=\"form-control\" [class.is-invalid]=\"labelControlInvalid()\">\n                    <div id=\"label\" class=\"form-text\">Enter a description.</div>\n                </div>\n                <div class=\"mb-3\">\n                    <label for=\"systemType\" class=\"form-label\">Datasource type</label>\n                    <select id=\"systemType\" formControlName=\"systemType\" class=\"form-select\" [class.is-invalid]=\"systemTypeControlInvalid()\" >\n                        <option *ngFor=\"let systemType of spec.systemTypes\"\n                                [ngValue]=\"systemType.systemType\">{{systemType.systemType}}</option>\n                    </select>\n\n                    <div class=\"form-text\">Select a datasource type.</div>\n                </div>\n\n            </form>\n        </div>\n        <app-modal-footer (onConfirm)=\"confirm()\" (onCancel)=\"cancel()\" [confirmDisabled]=\"!formGroup.valid\" ></app-modal-footer>\n    </div>\n</div>"
        },
        {
            "name": "SystemComponentPanelComponent",
            "id": "component-SystemComponentPanelComponent-f96be004f67a20172c97b751644a9a92381cbb0b11a9bcd7a4600c29b10af6c2a18d0d74d4ef5f0d584dcd0030055ee2bb3d0369d5a3dddf9c02cc0d16565f37",
            "file": "src/app/settings/data-sources-page/system-component-panel/system-component-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-system-component-panel",
            "styleUrls": [
                "./system-component-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./system-component-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "SystemComponentDto",
                    "decorators": []
                },
                {
                    "name": "systemDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "SystemDescriptionDto",
                    "decorators": []
                },
                {
                    "name": "systemTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "SystemTypeDescriptorDto[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectionChanged",
                    "defaultValue": "new EventEmitter<SystemComponentDto>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "systemComponentDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SystemComponentDialogSpec",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "confirmationDialogSpec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "addComponent",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeSystemComponentDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "confirmationDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "editComponent",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "metaModel",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSystemComponentDialog",
                    "args": [
                        {
                            "name": "spec",
                            "type": "SystemComponentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "spec",
                            "type": "SystemComponentDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeComponent",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "settings",
                    "args": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "systemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "systemComponentDialogId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "systemComponentKeys",
                    "args": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exceptSystemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "systemDescription",
                            "type": "SystemDescriptionDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exceptSystemComponent",
                            "type": "SystemComponentDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeConfirmationDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                },
                {
                    "name": "openConfirmationDialog",
                    "args": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmationDialogSpec",
                            "type": "ConfirmationDialogSpec",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "HasConfirmationDialogMixin"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {SystemComponentDto, SystemDescriptionDto, SystemTypeDescriptorDto} from \"@fabric/models\";\nimport {SystemComponentDialogData, SystemComponentDialogSpec} from \"./system-component-dialog/system-component-dialog.component\";\nimport {HasConfirmationDialogMixin} from \"@fabric/common\";\nimport {ModalService} from \"../../../common/modal/modal-service\";\nimport {SystemDescriptionService} from \"../../system-description.service\";\nimport {RoutingService} from \"../../../common/routing.service\";\n\n@Component({\n    selector: 'app-system-component-panel',\n    templateUrl: './system-component-panel.component.html',\n    styleUrls: ['./system-component-panel.component.scss']\n})\nexport class SystemComponentPanelComponent extends HasConfirmationDialogMixin implements OnInit {\n\n    constructor(modalService: ModalService, private service: SystemDescriptionService, private routingService : RoutingService) {\n        super(modalService);\n    }\n\n    ngOnInit(): void {\n    }\n\n\n\n    @Input()\n    systemTypes: SystemTypeDescriptorDto[]\n\n    @Input()\n    systemDescription: SystemDescriptionDto\n\n    @Input()\n    selection: SystemComponentDto\n\n    @Output()\n    selectionChanged = new EventEmitter<SystemComponentDto>()\n\n    select(systemComponent: SystemComponentDto) {\n        this.selectionChanged.emit(systemComponent)\n    }\n\n    // data sources\n\n    systemComponentDialogSpec: SystemComponentDialogSpec\n\n    systemComponentDialogId(): string {\n        return 'system-component-dialog'\n    }\n\n    private openSystemComponentDialog(spec: SystemComponentDialogSpec) {\n        this.systemComponentDialogSpec = spec\n        this.modalService.open(this.systemComponentDialogId())\n    }\n\n    private closeSystemComponentDialog() {\n        this.systemComponentDialogSpec = null\n        this.modalService.close(this.systemComponentDialogId())\n    }\n\n    addComponent(systemDescription: SystemDescriptionDto) {\n        this.openSystemComponentDialog({\n            systemTypes: this.systemTypes,\n            keys: this.systemComponentKeys(systemDescription),\n            data: {\n                key: null,\n                label: null,\n                systemType: null\n            },\n            confirm: data => {\n                let systemComponentDto = <SystemComponentDto>data\n                this.closeSystemComponentDialog()\n                this.service.addSystemComponent(systemComponentDto)\n                this.selectionChanged.emit(systemComponentDto)\n            },\n            cancel: () => this.closeSystemComponentDialog()\n        })\n    }\n\n    editComponent(systemDescription: SystemDescriptionDto, systemComponent: SystemComponentDto) {\n        this.openSystemComponentDialog({\n            systemTypes: this.systemTypes,\n            keys: this.systemComponentKeys(systemDescription, systemComponent),\n            data: <SystemComponentDialogData>{...systemComponent},\n            confirm: data => {\n                this.closeSystemComponentDialog()\n                this.service.updateSystemComponent(systemComponent, <SystemComponentDto>data)\n            },\n            cancel: () => this.closeSystemComponentDialog()\n        })\n    }\n\n\n    removeComponent(systemComponent: SystemComponentDto) {\n        this.openConfirmationDialog({\n            title: 'Confirm delete',\n            message: `Delete datasource ${systemComponent.key}?`,\n            warning: `This will also remove ${systemComponent.key}'s connection settings`,\n            confirm: () => {\n                this.closeConfirmationDialog()\n                this.service.deleteSystemComponent(systemComponent)\n                this.selectionChanged.emit(null)\n            },\n            cancel: () => this.closeConfirmationDialog()\n        })\n    }\n\n    metaModel(systemComponent: SystemComponentDto) {\n        this.routingService.navigateToMetaModelPage(systemComponent?.key)\n    }\n\n    settings(systemComponent: SystemComponentDto) {\n        this.routingService.navigateToConnectionSettingsPage(systemComponent?.key)\n    }\n\n\n    private systemComponentKeys(systemDescription: SystemDescriptionDto, exceptSystemComponent?: SystemComponentDto): string[] {\n        return systemDescription.systemComponents\n            .filter(systemComponent => systemComponent.key != exceptSystemComponent?.key)\n            .map(systemComponent => systemComponent.key);\n    }\n\n    confirmationDialogId(): string {\n        return 'confirmation-dialog-systemcomponent'\n    }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./system-component-panel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "SystemDescriptionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "routingService",
                        "type": "RoutingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "HasConfirmationDialogMixin",
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4>Datasources</h4>\n\n<div *ngIf=\"systemDescription.systemComponents.length == 0\" class=\"intro-container\" >\n    <app-intro [title]=\"'No datasources defined yet.'\" >\n        <p>Add <a href=\"javascript:void(0);\" (click)=\"addComponent(systemDescription)\" > first datasource.</a></p>\n    </app-intro>\n</div>\n\n\n<app-panel *ngIf=\"systemDescription.systemComponents.length > 0\">\n    <table class=\"table table-sm table-striped table-bordered\">\n        <thead>\n        <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Key</th>\n            <th scope=\"col\">Label</th>\n            <th scope=\"col\">System type</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let systemComponent of systemDescription.systemComponents\" (click)=\"select(systemComponent)\" >\n            <th [class.table-active]=\"systemComponent.key===selection?.key\" scope=\"row\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\"\n                       [checked]=\"systemComponent.key===selection?.key\"\n\n                >\n            </th>\n            <td [class.table-active]=\"systemComponent.key===selection?.key\">{{systemComponent.key}}</td>\n            <td [class.table-active]=\"systemComponent.key===selection?.key\">{{systemComponent.label}}</td>\n            <td [class.table-active]=\"systemComponent.key===selection?.key\">{{systemComponent.systemType}}</td>\n            <td [class.table-active]=\"systemComponent.key===selection?.key\">\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"editComponent(systemDescription, systemComponent)\">Edit\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"removeComponent(systemComponent)\">Remove\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"metaModel(systemComponent)\">Metamodel\n                </div>\n                <div class=\"btn  btn-sm btn-outline-primary float-right m-2\"\n                     (click)=\"settings(systemComponent)\">Settings\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <div class=\"btn  btn-sm btn-outline-primary float-right m-2\" (click)=\"addComponent(systemDescription)\">\n        Add\n    </div>\n</app-panel>\n\n<jw-modal [id]=\"systemComponentDialogId()\">\n    <app-system-component-dialog [spec]=\"systemComponentDialogSpec\"></app-system-component-dialog>\n</jw-modal>\n\n<jw-modal [id]=\"confirmationDialogId()\">\n    <app-confirmation-dialog [spec]=\"confirmationDialogSpec\"></app-confirmation-dialog>\n</jw-modal>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-bbc5f9f9200233df6c50fd641e6cfce77a7793a224e95991d8544d3ad6fe8fac7b99298fcc16ac2f545ac1a7fafa5deda38f0b418fd0e76758422083c8708ef7",
            "file": "src/app/console-page/console-panel/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tabular",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TabularResultSet",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRowSelect",
                    "defaultValue": "new EventEmitter<Row>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<Row>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Row",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "Row",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Row",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Row, TabularResultSet} from \"@fabric/models\";\n\n@Component({\n    selector: 'app-table',\n    templateUrl: './table.component.html',\n    styleUrls: ['./table.component.scss']\n})\nexport class TableComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    @Output()\n    onRowSelect: EventEmitter<Row> = new EventEmitter<Row>();\n\n    @Input()\n    tabular: TabularResultSet\n\n    selected: Row\n\n    selectRow(row: Row) {\n        this.selected = row\n        this.onRowSelect.emit(row)\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-container {\n  padding: 10px;\n  border: 1px solid steelblue;\n  border-radius: 10px;\n}\n\n.title-section {\n}\n\n.table-section {\n  padding-top: 10px;\n  overflow: auto;\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"tabular\">\n\n    <div class=\"table-container\">\n        <div class=\"title-section\">\n            <app-pager [paging]=\"tabular.pagingInfo\"></app-pager>\n        </div>\n        <div class=\"table-section\">\n            <table class=\"table table-bordered table-hover\">\n                <thead>\n                <tr>\n                    <th *ngFor=\"let column of tabular.columns\">\n                        {{column.name}}\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr *ngFor=\"let row of tabular.rows\" (click)=\"selectRow(row)\" [class.table-active]=\"row===selected\" style=\"cursor: pointer;\">\n                    <td *ngFor=\"let column of tabular.columns; let idx = index\" >\n                        {{row.values[idx]}}\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</ng-container>\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-8235fb4ac983aac1cdfceaf5f011cda3697f8260b0fd66fb7b826c53da6a09737beafa28c9651213e6ced8d3959bbfa7c02da19514bd189fd98ba9bbd288ba15",
            "file": "src/app/common/styleguide/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.scss']\n})\nexport class TitleComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  text: string\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n    <h3>{{text}}</h3>\n</div>\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-5466d08a861f70baabf89d73de238af59f8ae1198b84b5e355e5a4f060e992929208cb01c61e7f40d6ca38e5be20285b76d83aef8635b5182291d5ea13e187af",
            "file": "src/app/common/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faExclamationTriangle",
                    "defaultValue": "faExclamationTriangle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "showsToast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "toast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ToastService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toastClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "toastMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "dismiss",
                    "args": [
                        {
                            "name": "toast",
                            "type": "ToastMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toast",
                            "type": "ToastMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {faExclamationTriangle} from \"@fortawesome/free-solid-svg-icons\";\nimport {ToastMessage, ToastService} from './toast.service';\n\n// based on https://dev.to/riapacheco/custom-reusable-toast-component-with-angular-animations-async-pipe-and-rxjs-behaviorsubject-2bdf\n\n@Component({\n  selector: 'app-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss'],\n  animations: [\n    trigger('toastTrigger', [\n      state('open', style({ transform: 'translateY(200%)', opacity: 100 })),\n      state('close', style({ transform: 'translateY(-200%)', opacity: 0 })),\n      transition('open <=> close', [\n        animate('300ms ease-in-out')\n      ])\n    ])\n  ]\n})\nexport class ToastComponent implements OnInit {\n  toastClass!: string[];\n  toastMessage!: string;\n  showsToast!: boolean;\n\n  faExclamationTriangle = faExclamationTriangle\n\n  constructor(public toast: ToastService) { }\n\n  ngOnInit(): void {\n  }\n\n  dismiss(toast: ToastMessage): void {\n    this.toast.dismissToast(toast);\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../variables';\n\n.status-icon {\n  font-size: 20px;\n}\n\n.status-icon-problem {\n  color: darkorange;\n}\n\n\ntoast-list {\n  position: absolute;\n  top: 0;\n  right: 0;\n  margin: 2rem;\n  z-index: 5;\n}\n\n%default-toast {\n  // You indicate a placeholder selected with a preceding '%'\n  margin: 2rem;\n  min-width: 500px;\n  min-height: 100px;\n  max-height: 100px;\n  box-shadow: 6px 6px 12px #00000040;\n\n  justify-content: space-between;\n  border-left: 6px solid black;\n  padding: 1.5rem;\n  border-radius: 4px;\n  font-size: 0.9rem;\n\n  background-color: white;\n}\n\n// Default toast\n.toast-class {\n  @extend %default-toast; // You then add the styles to another selector with the @extend decorator\n}\n\n// Now we can make our state-specific classes\n\n// Success\n.success-toast {\n  @extend %default-toast;\n  border-left: 6px solid $success;\n}\n\n// Warning\n.warning-toast {\n  @extend %default-toast;\n  border-left: 6px solid $warning;\n}\n\n// Danger\n.danger-toast {\n  @extend %default-toast;\n  border-left: 6px solid $danger;\n}",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "toast",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--\n<ng-container *ngIf=\"toast.toastMessages$ | async as toastMessages\">\n    <div class=\"toast-list\" [@toastTrigger]=\"toastMessages.length > 0 ? 'open' : 'close' \">\n        <ng-container *ngFor=\"let toastMessage of toastMessages\">\n            <div [class]=\"toastMessage.level\">\n                <div style=\"max-width: 400px;\">\n                    {{ toastMessage.text }}\n                </div>\n                <a href=\"javascript:void(0);\"\n                   class=\"close-btn\"\n                   (click)=\"dismiss(toastMessage)\">\n                    <small>\n                        Dismiss\n                    </small>\n                </a>\n            </div>\n\n        </ng-container>\n    </div>\n</ng-container>\n-->\n<ng-container *ngIf=\"toast.toastMessages$ | async as toastMessages\">\n<div class=\"position-fixed bottom-0 start-0 p-3\" style=\"z-index: 11\">\n    <div class=\"toast-container\">\n        <ng-container *ngFor=\"let toastMessage of toastMessages\">\n        <div id=\"liveToast\" class=\"toast fade show\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n            <div class=\"toast-header\">\n                <fa-icon class=\"status-icon status-icon-problem\" [icon]=\"faExclamationTriangle\" ></fa-icon>\n                &nbsp;\n                <strong class=\"me-auto\">Problem<!--{{toastMessage.level}}--></strong>\n                <small><!--11 mins ago--></small>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n            </div>\n            <div class=\"toast-body\">\n                {{ toastMessage.text }}\n            </div>\n        </div>\n        </ng-container>\n    </div>\n</div>\n</ng-container>"
        },
        {
            "name": "ValidationMessagesComponent",
            "id": "component-ValidationMessagesComponent-e7514fb51f2974628725d80a2216ed9fd0ed57461e20adac497c7ceec51f785a59742da57ef16e3ce7a8e0a89a204c68f60cf9772b77e904eb65edc23a195b1a",
            "file": "src/app/common/validation-messages/validation-messages.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-validation-messages",
            "styleUrls": [
                "./validation-messages.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./validation-messages.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validationMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from \"@angular/forms\";\n\n@Component({\n    selector: 'app-validation-messages',\n    templateUrl: './validation-messages.component.html',\n    styleUrls: ['./validation-messages.component.scss']\n})\nexport class ValidationMessagesComponent implements OnInit {\n\n    constructor() {\n    }\n\n    ngOnInit(): void {\n    }\n\n    @Input()\n    control: FormControl\n\n    show(): boolean {\n        return this.control.errors && (this.control.dirty || this.control.touched)\n    }\n\n    validationMessages(): string[] {\n        let errors = this.control.errors\n        if (errors) {\n            return Object.keys(errors).map(key => errors[key].value)\n        }\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./validation-messages.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span *ngIf=\"show()\" class=\"help-block\">\n    <span *ngFor=\"let message of validationMessages()\" style=\"display: block;\" class=\"invalid-feedback\" [innerHTML]=\"message\"></span>\n  </span>"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-298357e70a40098023995fb274fda6f979dfde23e9adcbe7660ba4a2b8a238e01cac42a86d23d8c26ffba5bef5692427b25d8c725a39b4609dcc7ebff82ef79d",
            "description": "<p>Module that provides all services and configuration.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/api/api.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ApiModule>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "ApiConfigurationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { CommandControllerService } from './services/command-controller.service';\nimport { ConnectionControllerService } from './services/connection-controller.service';\nimport { ConsoleControllerService } from './services/console-controller.service';\nimport { MetaModelControllerService } from './services/meta-model-controller.service';\nimport { MongoSnapshotControllerService } from './services/mongo-snapshot-controller.service';\nimport { RedirectToAngularService } from './services/redirect-to-angular.service';\nimport { SnapshotControllerService } from './services/snapshot-controller.service';\nimport { SystemControllerService } from './services/system-controller.service';\nimport { SystemDescriptionControllerService } from './services/system-description-controller.service';\nimport { WorkspaceRestControllerService } from './services/workspace-rest-controller.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    CommandControllerService,\n    ConnectionControllerService,\n    ConsoleControllerService,\n    MetaModelControllerService,\n    MongoSnapshotControllerService,\n    RedirectToAngularService,\n    SnapshotControllerService,\n    SystemControllerService,\n    SystemDescriptionControllerService,\n    WorkspaceRestControllerService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiConfiguration"
                        },
                        {
                            "name": "CommandControllerService"
                        },
                        {
                            "name": "ConnectionControllerService"
                        },
                        {
                            "name": "ConsoleControllerService"
                        },
                        {
                            "name": "MetaModelControllerService"
                        },
                        {
                            "name": "MongoSnapshotControllerService"
                        },
                        {
                            "name": "RedirectToAngularService"
                        },
                        {
                            "name": "SnapshotControllerService"
                        },
                        {
                            "name": "SystemControllerService"
                        },
                        {
                            "name": "SystemDescriptionControllerService"
                        },
                        {
                            "name": "WorkspaceRestControllerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-9e48df66f531c33ad584b0b16ac0fee7f26b10b6fb535c96ee154d16263c6df4b3a86ecbe0026b587397eb64e8a0aaa05b5c208a2473d1bdb7b0e46f3db89ad3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n\nimport {CoreModule} from './core.module';\nimport {FabricCommonModule} from './common/common.module';\n\nimport {SystemDescriptionModule} from './settings/system-description.module';\nimport {ConsolePageModule} from './console-page/console-page.module';\nimport {SnapshotModule} from \"./snapshot/snapshot.module\";\nimport {NavigationModule} from \"./navigation-page/navigation.module\"\nimport {ComponentModule} from \"./component/component.module\";\nimport {QueryModule} from \"./query/query.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    CoreModule,\n    AppRoutingModule,\n    FabricCommonModule,\n    ComponentModule,\n    SystemDescriptionModule,\n    QueryModule,\n    ConsolePageModule,\n    SnapshotModule,\n    NavigationModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ConsolePageModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        },
                        {
                            "name": "NavigationModule"
                        },
                        {
                            "name": "QueryModule"
                        },
                        {
                            "name": "SnapshotModule"
                        },
                        {
                            "name": "SystemDescriptionModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f78f8ec2a6b107719e749f8fbe07902bdd31d378a8d8b0d5bd77a15849577fff629ab202873d6c0ecbd645197917ab743dad886e9ab9fbc4b28709369efc9a9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {SnapshotsPageComponent} from './snapshot/snapshots-page/snapshots-page.component';\nimport {SnapshotPageComponent} from './snapshot/snapshot-page/snapshot-page.component';\nimport {MetaModelPageComponent} from \"./settings/meta-model-page/meta-model-page.component\";\nimport {ConsolePageComponent} from './console-page/console-page.component';\nimport {DummyPageComponent} from './snapshot/snapshots-page/dummy-page/dummy-page.component';\nimport {NavigationPageComponent} from \"./navigation-page/navigation-page.component\";\nimport {ConnectionSettingsPageComponent} from \"./settings/connection-settings-page/connection-settings-page.component\";\nimport {DataSourcesPageComponent} from \"./settings/data-sources-page/data-sources-page.component\";\nimport {EnvironmentsPageComponent} from \"./settings/environments-page/environments-page.component\";\nimport {QueryPageComponent} from \"./query/query-page/query-page.component\";\n\n\nconst routes: Routes = [\n  {path: '', redirectTo: '/fe/console', pathMatch: 'full'},\n  {path: 'fe/snapshots', component: SnapshotsPageComponent},\n  {path: 'fe/console', component: ConsolePageComponent},\n  {path: 'fe/navigation', component: NavigationPageComponent},\n  {path: 'fe/datasources', component: DataSourcesPageComponent},\n  {path: 'fe/datasources/:systemComponentKey', component: DataSourcesPageComponent},\n  {path: 'fe/datasources/:systemComponentKey/metamodel', component: MetaModelPageComponent},\n  {path: 'fe/datasources/:systemComponentKey/settings', component: ConnectionSettingsPageComponent},\n  {path: 'fe/environments', component: EnvironmentsPageComponent},\n  {path: 'fe/snapshot/:snapshotId', component: SnapshotPageComponent},\n  {path: 'fe/dummy/:executionId', component: DummyPageComponent},\n  {path: 'fe/query/:queryId', component: QueryPageComponent},\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ComponentModule",
            "id": "module-ComponentModule-903d5b29b3d06bc11c18f438118dadc8887869acb0a25e1758ece19f33615468892d2ea5d1ebeac9027104a9fc1a0525c076bd10121dcdce5faed3cb722ed335",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/component/component.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\n\nimport {CoreModule} from '../core.module';\n\nimport {DataSourceSelectionPanelComponent} from './data-source-selection-panel/data-source-selection-panel.component'\n\n@NgModule({\n    declarations: [\n        DataSourceSelectionPanelComponent\n    ],\n    providers: [\n    ],\n    imports: [\n        CoreModule,\n    ],\n    exports: [\n        DataSourceSelectionPanelComponent\n    ]\n})\nexport class ComponentModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataSourceSelectionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DataSourceSelectionPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConsolePageModule",
            "id": "module-ConsolePageModule-960f99c5a57713273b75bb05c7b318bf6648857658fac2f2345947bc318c8cd50d36cd272eab15c963f9479093ac665e14917f68bc7f03535a668e3bef81f085",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/console-page/console-page.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\nimport {ConsolePageComponent} from \"./console-page.component\";\nimport {ConsolePanelComponent} from './console-panel/console-panel.component';\nimport {SnippetPanelComponent} from './console-panel/snippet-panel/snippet-panel.component';\nimport {HistoryPanelComponent} from './console-panel/history-panel/history-panel.component';\nimport {SnippetDialogComponent} from './console-panel/snippet-dialog/snippet-dialog.component';\nimport {TableComponent} from './console-panel/table/table.component';\nimport {ComponentModule} from \"../component/component.module\";\nimport {OutputPanelComponent} from './console-panel/output-panel/output-panel.component';\n\n@NgModule({\n    declarations: [\n        ConsolePageComponent,\n        ConsolePanelComponent,\n        SnippetPanelComponent,\n        HistoryPanelComponent,\n        SnippetDialogComponent,\n        TableComponent,\n        OutputPanelComponent,\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule,\n        ComponentModule\n    ],\n    exports: [\n        ConsolePageComponent\n    ]\n})\nexport class ConsolePageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConsolePageComponent"
                        },
                        {
                            "name": "ConsolePanelComponent"
                        },
                        {
                            "name": "HistoryPanelComponent"
                        },
                        {
                            "name": "OutputPanelComponent"
                        },
                        {
                            "name": "SnippetDialogComponent"
                        },
                        {
                            "name": "SnippetPanelComponent"
                        },
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ConsolePageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-c62e437040e047b26929e35d18fa287e7f85bf612dd8ae936080d8da4d5ff62be0de0005efaa7feb46b3d701432163b2906b20a542a888bfed51cef52a4931e4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ApiModule} from \"./api/api.module\";\nimport {environment} from \"../environments/environment\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {AppRoutingModule} from \"./app-routing.module\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\nimport {FontAwesomeModule} from \"@fortawesome/angular-fontawesome\";\nimport {TreeModule} from '@circlon/angular-tree-component';\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ApiModule.forRoot({ rootUrl: environment.production ? '' : ('http://localhost:' + environment.port) }),\n    DragDropModule,\n    HttpClientModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    TreeModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    CommonModule,\n    DragDropModule,\n    HttpClientModule,\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FontAwesomeModule,\n    TreeModule\n  ]\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApiModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FabricCommonModule",
            "id": "module-FabricCommonModule-454dc7ed996799428e8c3a6afbd607d9943337d05172735e117bc11a676b0f1446e7cbb8788ae5a5829e50d8c765faa57f03cc0080938cd5d71f0713ede7d2c5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/common/common.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\n\nimport {CoreModule} from '../core.module';\n\nimport {PopupMenuComponent} from './popup-menu/popup-menu.component';\nimport {ModalComponent} from './modal/modal.component';\nimport {Layout1ColComponent} from \"./styleguide/layout-1col/layout-1col.component\";\nimport {BackButtonComponent} from \"./styleguide/back-button/back-button.component\";\nimport {PanelComponent} from \"./styleguide/panel/panel.component\";\nimport {ConfirmationDialogComponent} from \"./confirmation-dialog/confirmation-dialog.component\";\nimport {ValidationMessagesComponent} from './validation-messages/validation-messages.component';\nimport {TitleComponent} from './styleguide/title/title.component';\nimport {BreadcrumbComponent} from './styleguide/breadcrumb/breadcrumb.component';\nimport {ActionButtonsComponent} from './styleguide/action-buttons/action-buttons.component';\nimport {SideBarComponent} from './styleguide/side-bar/side-bar.component';\nimport {ModalHeaderComponent} from './styleguide/modal-header/modal-header.component';\nimport {ModalFooterComponent} from './styleguide/modal-footer/modal-footer.component';\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {HttpErrorInterceptor} from \"./connection-status/http-error.interceptor\";\nimport {ConnectionStatusComponent} from './connection-status/connection-status.component';\nimport {CommandProgressComponent} from './styleguide/command-progress/command-progress.component';\nimport {StatusComponent} from './styleguide/status/status.component';\nimport {NavComponent} from './styleguide/nav/nav.component';\nimport {IntroComponent} from './styleguide/intro/intro.component';\nimport {LoadingComponent} from './loading/loading.component';\nimport {ToastComponent} from './toast/toast.component';\nimport {InfoComponent} from './styleguide/info/info.component';\nimport {PagerComponent} from './pager/pager.component';\n\n@NgModule({\n    declarations: [\n        ModalComponent,\n        PopupMenuComponent,\n        Layout1ColComponent,\n        BackButtonComponent,\n        PanelComponent,\n        ConfirmationDialogComponent,\n        ValidationMessagesComponent,\n        TitleComponent,\n        BreadcrumbComponent,\n        ActionButtonsComponent,\n        SideBarComponent,\n        ModalHeaderComponent,\n        ModalFooterComponent,\n        ConnectionStatusComponent,\n        CommandProgressComponent,\n        StatusComponent,\n        NavComponent,\n        IntroComponent,\n        LoadingComponent,\n        ToastComponent,\n        InfoComponent,\n        PagerComponent\n    ],\n    providers: [\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: HttpErrorInterceptor,\n            multi: true\n        }\n    ],\n    imports: [\n        CoreModule,\n    ],\n    exports: [\n        ModalComponent,\n        PopupMenuComponent,\n        Layout1ColComponent,\n        BackButtonComponent,\n        PanelComponent,\n        ConfirmationDialogComponent,\n        ValidationMessagesComponent,\n        TitleComponent,\n        BreadcrumbComponent,\n        ActionButtonsComponent,\n        SideBarComponent,\n        ModalHeaderComponent,\n        ModalFooterComponent,\n        CommandProgressComponent,\n        NavComponent,\n        IntroComponent,\n        LoadingComponent,\n        InfoComponent,\n        PagerComponent\n    ]\n})\nexport class FabricCommonModule {\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "HttpErrorInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ActionButtonsComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CommandProgressComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "ConnectionStatusComponent"
                        },
                        {
                            "name": "InfoComponent"
                        },
                        {
                            "name": "IntroComponent"
                        },
                        {
                            "name": "Layout1ColComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "ModalFooterComponent"
                        },
                        {
                            "name": "ModalHeaderComponent"
                        },
                        {
                            "name": "NavComponent"
                        },
                        {
                            "name": "PagerComponent"
                        },
                        {
                            "name": "PanelComponent"
                        },
                        {
                            "name": "PopupMenuComponent"
                        },
                        {
                            "name": "SideBarComponent"
                        },
                        {
                            "name": "StatusComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "ToastComponent"
                        },
                        {
                            "name": "ValidationMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ActionButtonsComponent"
                        },
                        {
                            "name": "BackButtonComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CommandProgressComponent"
                        },
                        {
                            "name": "ConfirmationDialogComponent"
                        },
                        {
                            "name": "InfoComponent"
                        },
                        {
                            "name": "IntroComponent"
                        },
                        {
                            "name": "Layout1ColComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "ModalFooterComponent"
                        },
                        {
                            "name": "ModalHeaderComponent"
                        },
                        {
                            "name": "NavComponent"
                        },
                        {
                            "name": "PagerComponent"
                        },
                        {
                            "name": "PanelComponent"
                        },
                        {
                            "name": "PopupMenuComponent"
                        },
                        {
                            "name": "SideBarComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "ValidationMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NavigationModule",
            "id": "module-NavigationModule-3557d794709de8eb682d45317349ee9cc6936d70d0d33c90c49970e0af3dcf7998265eace092d4fcdca5b43250860514e35d52e9308b179dcd545f564f29cc4a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/navigation-page/navigation.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\nimport {NavigationPageComponent} from \"./navigation-page.component\";\nimport {NavigationPanelComponent} from \"./navigation-panel/navigation-panel.component\";\nimport {NavigationSelectionPanelComponent} from './navigation-selection-panel/navigation-selection-panel.component';\nimport {NavigationTreeComponent} from './navigation-tree/navigation-tree.component';\nimport {NavigationTreeItemComponent} from './navigation-tree-item/navigation-tree-item.component';\nimport {ComponentModule} from \"../component/component.module\";\nimport {FormsModule} from \"@angular/forms\";\n\n@NgModule({\n    declarations: [\n        NavigationPageComponent,\n        NavigationPanelComponent,\n        NavigationSelectionPanelComponent,\n        NavigationTreeComponent,\n        NavigationTreeItemComponent\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule,\n        ComponentModule,\n        FormsModule\n    ],\n    exports: [\n        NavigationPageComponent\n    ]\n})\nexport class NavigationModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavigationPageComponent"
                        },
                        {
                            "name": "NavigationPanelComponent"
                        },
                        {
                            "name": "NavigationSelectionPanelComponent"
                        },
                        {
                            "name": "NavigationTreeComponent"
                        },
                        {
                            "name": "NavigationTreeItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavigationPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "QueryModule",
            "id": "module-QueryModule-1bcf780bec8bc676d0a09a0632cb85fe74a7158bc79b87b7fa724ef310dca2403258267616f9fbab1f8d39661c4c1ea81b1eb52f8caa87ef4f00d21c0bc4b042",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/query/query.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {QueryPageComponent} from './query-page/query-page.component';\n\n\n@NgModule({\n  declarations: [\n    QueryPageComponent\n  ],\n  imports: [\n    CommonModule\n  ]\n})\nexport class QueryModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "QueryPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SnapshotModule",
            "id": "module-SnapshotModule-ca408a67a0a4bed22f2d175863f0534b07838a7effb72e1f304b9b8dc4c70969f4a809d5abc3b0ae30d4f7526ef24593b114074da9423ca0fd5376114ddf21da",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/snapshot/snapshot.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\nimport {SnapshotsPageComponent} from \"./snapshots-page/snapshots-page.component\";\nimport {SnapshotPageComponent} from \"./snapshot-page/snapshot-page.component\";\nimport {SnapshotDialogComponent} from \"./snapshots-page/snapshot-dialog/snapshot-dialog.component\";\nimport {MongoSnapshotComponent} from \"./snapshot-page/mongo-snapshot/mongo-snapshot.component\";\nimport {SnapshotOverviewPanelComponent} from './snapshots-page/snapshot-overview-panel/snapshot-overview-panel.component';\nimport {SnapshotUploadDialogComponent} from './snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component';\nimport {DummyPageComponent} from './snapshots-page/dummy-page/dummy-page.component';\n\n\n@NgModule({\n    declarations: [\n        SnapshotsPageComponent,\n        SnapshotPageComponent,\n        SnapshotDialogComponent,\n        MongoSnapshotComponent,\n        SnapshotOverviewPanelComponent,\n        SnapshotUploadDialogComponent,\n        DummyPageComponent,\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule\n    ],\n    exports: [\n        SnapshotsPageComponent,\n        SnapshotPageComponent,\n    ]\n})\nexport class SnapshotModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DummyPageComponent"
                        },
                        {
                            "name": "MongoSnapshotComponent"
                        },
                        {
                            "name": "SnapshotDialogComponent"
                        },
                        {
                            "name": "SnapshotOverviewPanelComponent"
                        },
                        {
                            "name": "SnapshotPageComponent"
                        },
                        {
                            "name": "SnapshotUploadDialogComponent"
                        },
                        {
                            "name": "SnapshotsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SnapshotPageComponent"
                        },
                        {
                            "name": "SnapshotsPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SystemDescriptionModule",
            "id": "module-SystemDescriptionModule-b2846eb993083010baae4b4d5b1e2bd5d6a863e0a658ef5cde6fd1f19b47b97577a605f329c42f63eeec90e448d5e93f29f6cad1920053191233a1a58c0d1b07",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/settings/system-description.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from \"@angular/core\";\n\nimport {CoreModule} from \"../core.module\";\nimport {FabricCommonModule} from \"../common/common.module\";\n\nimport {SystemComponentDialogComponent} from './data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component';\nimport {SystemComponentPanelComponent} from './data-sources-page/system-component-panel/system-component-panel.component';\nimport {DataSourcesPageComponent} from './data-sources-page/data-sources-page.component';\nimport {EnvironmentDialogComponent} from './environments-page/environment-panel/environment-dialog/environment-dialog.component';\nimport {EnvironmentPanelComponent} from './environments-page/environment-panel/environment-panel.component';\nimport {EnvironmentsPageComponent} from './environments-page/environments-page.component';\nimport {MetaModelPanelComponent} from './meta-model-page/meta-model-panel/meta-model-panel.component';\nimport {MetaModelDialogComponent} from './meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component';\nimport {MongoMetamodelPanelComponent} from './meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel-panel.component';\nimport {MetaModelViewComponent} from './meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component';\nimport {MetaModelPageComponent} from './meta-model-page/meta-model-page.component';\nimport {ConnectionSettingsDialogComponent} from './connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component';\nimport {ConnectionSettingsPanelComponent} from './connection-settings-page/connection-settings-panel/connection-settings-panel.component';\nimport {ConnectionSettingsPageComponent} from './connection-settings-page/connection-settings-page.component';\n\n@NgModule({\n    declarations: [\n        SystemComponentPanelComponent,\n        SystemComponentDialogComponent,\n        EnvironmentPanelComponent,\n        EnvironmentDialogComponent,\n        ConnectionSettingsPanelComponent,\n        ConnectionSettingsDialogComponent,\n        MetaModelPanelComponent,\n        MetaModelDialogComponent,\n        MongoMetamodelPanelComponent,\n        MetaModelViewComponent,\n        MetaModelPageComponent,\n        ConnectionSettingsPageComponent,\n        EnvironmentsPageComponent,\n        DataSourcesPageComponent,\n    ],\n    imports: [\n        CoreModule,\n        FabricCommonModule\n    ],\n    exports: [\n\n    ]\n})\nexport class SystemDescriptionModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConnectionSettingsDialogComponent"
                        },
                        {
                            "name": "ConnectionSettingsPageComponent"
                        },
                        {
                            "name": "ConnectionSettingsPanelComponent"
                        },
                        {
                            "name": "DataSourcesPageComponent"
                        },
                        {
                            "name": "EnvironmentDialogComponent"
                        },
                        {
                            "name": "EnvironmentPanelComponent"
                        },
                        {
                            "name": "EnvironmentsPageComponent"
                        },
                        {
                            "name": "MetaModelDialogComponent"
                        },
                        {
                            "name": "MetaModelPageComponent"
                        },
                        {
                            "name": "MetaModelPanelComponent"
                        },
                        {
                            "name": "MetaModelViewComponent"
                        },
                        {
                            "name": "MongoMetamodelPanelComponent"
                        },
                        {
                            "name": "SystemComponentDialogComponent"
                        },
                        {
                            "name": "SystemComponentPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "FabricCommonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Case_1_10_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_2_10_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_40_10_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_40_10_3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_55_10_1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_55_10_2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_55_10_3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_55_10_5",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case_55_10_6",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "PagerComponentStory.bind({})"
            },
            {
                "name": "Case1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SnippetDialogComponentStory.bind({})"
            },
            {
                "name": "CommandIsStarted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "CommandProgressComponentStory.bind({})"
            },
            {
                "name": "CommandProgressComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CommandProgressComponent>",
                "defaultValue": "(args: CommandProgressComponent) => ({\n    component: CommandProgressComponent,\n    props: args,\n})"
            },
            {
                "name": "ConnectionProblem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "StatusComponentStory.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "customersNode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<NavTreeItemDto>{\n    root: false,\n    label: \"CUSTOMERS\",\n    columns: listOfValues(5, \"column_\"),\n    rows: [\n        { values : listOfValues(5, \"row_1_\") },\n    ],\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NavComponentStory.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/intro/intro.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "IntroComponentStory.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/nav/nav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NavComponentStory.bind({})"
            },
            {
                "name": "DEFAULT_PAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  port: 8080\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  port: 4200\n}"
            },
            {
                "name": "IntroComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/intro/intro.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<IntroComponent>",
                "defaultValue": "(args: IntroComponent) => ({\n    component: IntroComponent,\n    props: args,\n\n})"
            },
            {
                "name": "JDBC",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MetaModelViewComponentStory.bind({})"
            },
            {
                "name": "MetaModelViewComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MetaModelViewComponent>",
                "defaultValue": "(args: MetaModelViewComponent) => ({\n    component: MetaModelViewComponent,\n    props: args,\n})"
            },
            {
                "name": "NavComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ConfirmationDialogComponent>",
                "defaultValue": "(args: ConfirmationDialogComponent) => ({\n    component: ConfirmationDialogComponent,\n    props: args,\n\n})"
            },
            {
                "name": "NavComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/nav/nav.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NavComponent>",
                "defaultValue": "(args: NavComponent) => ({\n    component: NavComponent,\n    props: args,\n\n})"
            },
            {
                "name": "NavigationTreeComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NavigationTreeComponent>",
                "defaultValue": "(args: NavigationTreeComponent) => ({\n    component: NavigationTreeComponent,\n    props: args,\n})"
            },
            {
                "name": "ordersNode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NavTreeItemDto",
                "defaultValue": "{\n    root: false,\n    label: \"ORDERS\",\n    columns: listOfValues(5, \"column_\"),\n    rows: [\n        { values : listOfValues(5, \"row_1_\") },\n        { values : listOfValues(5, \"row_2_\") },\n        { values : listOfValues(5, \"row_3_\") },\n        { values : listOfValues(5, \"row_4_\") },\n    ],\n    navItems : [\n        {\n            label: \"-- select table --\"\n        },\n        {\n            label: 'PRODUCTS'\n        },\n        {\n            label: 'CUSTOMERS'\n        },\n        {\n            label: 'ORDER_ITEMS'\n        },\n    ],\n    children: []\n\n}"
            },
            {
                "name": "PagerComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/pager/pager.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PagerComponent>",
                "defaultValue": "(args: PagerComponent) => ({\n    component: PagerComponent,\n    props: args,\n\n})"
            },
            {
                "name": "ParameterCodecInstance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/api/request-builder.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ParameterCodec()"
            },
            {
                "name": "productsNode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "<NavTreeItemDto>{\n    root: false,\n    label: \"PRODUCTS\",\n    columns: listOfValues(7, \"column_\"),\n    rows: [\n        { values : listOfValues(7, \"row_1_\") },\n    ],\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Result",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/console-page/console-panel/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TableComponentStory.bind({})"
            },
            {
                "name": "rootNode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NavTreeItemDto",
                "defaultValue": "{\n    root: true,\n    navItems : [\n        {\n            label: \"-- select table --\"\n        },\n        {\n            label: 'BRANCHES'\n        },\n        {\n            label: 'CUSTOMERS'\n        },\n        {\n            label: 'ORDERS'\n        },\n        {\n            label: 'ORDER_ITEMS'\n        },\n        {\n            label: 'PRODUCTS'\n        },\n        {\n            label: 'STOCK'\n        },\n        {\n            label: 'STORES'\n        },\n        {\n            label: 'WAREHOUSES'\n        },\n    ]\n}"
            },
            {
                "name": "RootNode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NavigationTreeComponentStory.bind({})"
            },
            {
                "name": "SelectOrders",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NavigationTreeComponentStory.bind({})"
            },
            {
                "name": "showValidationMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "function(control: AbstractControl): boolean {\n    return (control.touched || control.dirty) && !control.valid\n}"
            },
            {
                "name": "SnippetDialogComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SnippetDialogComponent>",
                "defaultValue": "(args: SnippetDialogComponent) => ({\n  component: SnippetDialogComponent,\n  props: args,\n})"
            },
            {
                "name": "StatusComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StatusComponent>",
                "defaultValue": "(args: StatusComponent) => ({\n    component: StatusComponent,\n    props: args,\n\n})"
            },
            {
                "name": "StatusOK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/status/status.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "StatusComponentStory.bind({})"
            },
            {
                "name": "SubcommandDone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "CommandProgressComponentStory.bind({})"
            },
            {
                "name": "SubcommandError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "CommandProgressComponentStory.bind({})"
            },
            {
                "name": "SubcommandPaused",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "CommandProgressComponentStory.bind({})"
            },
            {
                "name": "SubcommandUnresponsive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "CommandProgressComponentStory.bind({})"
            },
            {
                "name": "TableComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/console-page/console-panel/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableComponent>",
                "defaultValue": "(args: TableComponent) => ({\n    component: TableComponent,\n    props: args,\n})"
            },
            {
                "name": "TOAST_LEVEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/toast/toast.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    success: 'success-toast',\n    warning: 'warning-toast',\n    danger: 'danger-toast'\n}"
            },
            {
                "name": "unique",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/common/validators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "function (fieldName: string, values: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n        let controlValue: string = control.value;\n        const invalid = controlValue && !!values.find(val => val && controlValue && val.toUpperCase() === controlValue.toUpperCase())\n        return invalid ? {unique: { value: `The ${fieldName} '${controlValue}' is already in use.`}} : null;\n    }\n}"
            },
            {
                "name": "WithChildren",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "NavigationTreeComponentStory.bind({})"
            }
        ],
        "functions": [
            {
                "name": "listOfValues",
                "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "count",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "count",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "log",
                "file": "src/app/common/logging.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "param1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "param2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "param1",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "param2",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logChangesToObservable",
                "file": "src/app/common/logging.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "observable",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "msg",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "observable",
                        "type": "Observable",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "PageId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"settings\" | \"environments\" | \"datasources\" | \"snapshots\" | \"console\" | \"navigation\"",
                "file": "src/app/common/styleguide/side-bar/side-bar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "StrictHttpResponse",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/api/strict-http-response.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                "kind": 187
            },
            {
                "name": "TabState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"HISTORY\" | \"SNIPPETS\"",
                "file": "src/app/console-page/console-panel/console-panel.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ToastMessage",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/common/toast/toast.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/common/pager/pager.stories.ts": [
                {
                    "name": "Case_1_10_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_2_10_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_40_10_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_40_10_3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_55_10_1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_55_10_2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_55_10_3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_55_10_5",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "Case_55_10_6",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "PagerComponentStory.bind({})"
                },
                {
                    "name": "PagerComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/pager/pager.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PagerComponent>",
                    "defaultValue": "(args: PagerComponent) => ({\n    component: PagerComponent,\n    props: args,\n\n})"
                }
            ],
            "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts": [
                {
                    "name": "Case1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SnippetDialogComponentStory.bind({})"
                },
                {
                    "name": "SnippetDialogComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SnippetDialogComponent>",
                    "defaultValue": "(args: SnippetDialogComponent) => ({\n  component: SnippetDialogComponent,\n  props: args,\n})"
                }
            ],
            "src/app/common/styleguide/command-progress/command-progress.stories.ts": [
                {
                    "name": "CommandIsStarted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "CommandProgressComponentStory.bind({})"
                },
                {
                    "name": "CommandProgressComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CommandProgressComponent>",
                    "defaultValue": "(args: CommandProgressComponent) => ({\n    component: CommandProgressComponent,\n    props: args,\n})"
                },
                {
                    "name": "SubcommandDone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "CommandProgressComponentStory.bind({})"
                },
                {
                    "name": "SubcommandError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "CommandProgressComponentStory.bind({})"
                },
                {
                    "name": "SubcommandPaused",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "CommandProgressComponentStory.bind({})"
                },
                {
                    "name": "SubcommandUnresponsive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "CommandProgressComponentStory.bind({})"
                }
            ],
            "src/app/common/styleguide/status/status.stories.ts": [
                {
                    "name": "ConnectionProblem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "StatusComponentStory.bind({})"
                },
                {
                    "name": "StatusComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StatusComponent>",
                    "defaultValue": "(args: StatusComponent) => ({\n    component: StatusComponent,\n    props: args,\n\n})"
                },
                {
                    "name": "StatusOK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/status/status.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "StatusComponentStory.bind({})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts": [
                {
                    "name": "customersNode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<NavTreeItemDto>{\n    root: false,\n    label: \"CUSTOMERS\",\n    columns: listOfValues(5, \"column_\"),\n    rows: [\n        { values : listOfValues(5, \"row_1_\") },\n    ],\n}"
                },
                {
                    "name": "NavigationTreeComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NavigationTreeComponent>",
                    "defaultValue": "(args: NavigationTreeComponent) => ({\n    component: NavigationTreeComponent,\n    props: args,\n})"
                },
                {
                    "name": "ordersNode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavTreeItemDto",
                    "defaultValue": "{\n    root: false,\n    label: \"ORDERS\",\n    columns: listOfValues(5, \"column_\"),\n    rows: [\n        { values : listOfValues(5, \"row_1_\") },\n        { values : listOfValues(5, \"row_2_\") },\n        { values : listOfValues(5, \"row_3_\") },\n        { values : listOfValues(5, \"row_4_\") },\n    ],\n    navItems : [\n        {\n            label: \"-- select table --\"\n        },\n        {\n            label: 'PRODUCTS'\n        },\n        {\n            label: 'CUSTOMERS'\n        },\n        {\n            label: 'ORDER_ITEMS'\n        },\n    ],\n    children: []\n\n}"
                },
                {
                    "name": "productsNode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "<NavTreeItemDto>{\n    root: false,\n    label: \"PRODUCTS\",\n    columns: listOfValues(7, \"column_\"),\n    rows: [\n        { values : listOfValues(7, \"row_1_\") },\n    ],\n}"
                },
                {
                    "name": "rootNode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavTreeItemDto",
                    "defaultValue": "{\n    root: true,\n    navItems : [\n        {\n            label: \"-- select table --\"\n        },\n        {\n            label: 'BRANCHES'\n        },\n        {\n            label: 'CUSTOMERS'\n        },\n        {\n            label: 'ORDERS'\n        },\n        {\n            label: 'ORDER_ITEMS'\n        },\n        {\n            label: 'PRODUCTS'\n        },\n        {\n            label: 'STOCK'\n        },\n        {\n            label: 'STORES'\n        },\n        {\n            label: 'WAREHOUSES'\n        },\n    ]\n}"
                },
                {
                    "name": "RootNode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NavigationTreeComponentStory.bind({})"
                },
                {
                    "name": "SelectOrders",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NavigationTreeComponentStory.bind({})"
                },
                {
                    "name": "WithChildren",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NavigationTreeComponentStory.bind({})"
                }
            ],
            "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NavComponentStory.bind({})"
                },
                {
                    "name": "NavComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ConfirmationDialogComponent>",
                    "defaultValue": "(args: ConfirmationDialogComponent) => ({\n    component: ConfirmationDialogComponent,\n    props: args,\n\n})"
                }
            ],
            "src/app/common/styleguide/intro/intro.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/intro/intro.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "IntroComponentStory.bind({})"
                },
                {
                    "name": "IntroComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/intro/intro.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<IntroComponent>",
                    "defaultValue": "(args: IntroComponent) => ({\n    component: IntroComponent,\n    props: args,\n\n})"
                }
            ],
            "src/app/common/styleguide/nav/nav.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/nav/nav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "NavComponentStory.bind({})"
                },
                {
                    "name": "NavComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/styleguide/nav/nav.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NavComponent>",
                    "defaultValue": "(args: NavComponent) => ({\n    component: NavComponent,\n    props: args,\n\n})"
                }
            ],
            "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts": [
                {
                    "name": "DEFAULT_PAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  port: 8080\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  port: 4200\n}"
                }
            ],
            "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts": [
                {
                    "name": "JDBC",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MetaModelViewComponentStory.bind({})"
                },
                {
                    "name": "MetaModelViewComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MetaModelViewComponent>",
                    "defaultValue": "(args: MetaModelViewComponent) => ({\n    component: MetaModelViewComponent,\n    props: args,\n})"
                }
            ],
            "src/app/api/request-builder.ts": [
                {
                    "name": "ParameterCodecInstance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/api/request-builder.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ParameterCodec()"
                }
            ],
            "src/app/console-page/console-panel/table/table.stories.ts": [
                {
                    "name": "Result",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/console-page/console-panel/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TableComponentStory.bind({})"
                },
                {
                    "name": "TableComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/console-page/console-panel/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args: TableComponent) => ({\n    component: TableComponent,\n    props: args,\n})"
                }
            ],
            "src/app/common/validators.ts": [
                {
                    "name": "showValidationMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "function(control: AbstractControl): boolean {\n    return (control.touched || control.dirty) && !control.valid\n}"
                },
                {
                    "name": "unique",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/validators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "function (fieldName: string, values: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n        let controlValue: string = control.value;\n        const invalid = controlValue && !!values.find(val => val && controlValue && val.toUpperCase() === controlValue.toUpperCase())\n        return invalid ? {unique: { value: `The ${fieldName} '${controlValue}' is already in use.`}} : null;\n    }\n}"
                }
            ],
            "src/app/common/toast/toast.service.ts": [
                {
                    "name": "TOAST_LEVEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/common/toast/toast.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    success: 'success-toast',\n    warning: 'warning-toast',\n    danger: 'danger-toast'\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts": [
                {
                    "name": "listOfValues",
                    "file": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/common/logging.ts": [
                {
                    "name": "log",
                    "file": "src/app/common/logging.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "param1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "param2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param1",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param2",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logChangesToObservable",
                    "file": "src/app/common/logging.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observable",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "msg",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observable",
                            "type": "Observable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/common/styleguide/side-bar/side-bar.component.ts": [
                {
                    "name": "PageId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"settings\" | \"environments\" | \"datasources\" | \"snapshots\" | \"console\" | \"navigation\"",
                    "file": "src/app/common/styleguide/side-bar/side-bar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/api/strict-http-response.ts": [
                {
                    "name": "StrictHttpResponse",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/api/strict-http-response.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Constrains the http response to not have the body defined as <code>T | null</code>, but <code>T</code> only.</p>\n",
                    "kind": 187
                }
            ],
            "src/app/console-page/console-panel/console-panel.component.ts": [
                {
                    "name": "TabState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"HISTORY\" | \"SNIPPETS\"",
                    "file": "src/app/console-page/console-panel/console-panel.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/common/toast/toast.service.ts": [
                {
                    "name": "ToastMessage",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/common/toast/toast.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/fe/console",
                        "pathMatch": "full"
                    },
                    {
                        "path": "fe/snapshots",
                        "component": "SnapshotsPageComponent"
                    },
                    {
                        "path": "fe/console",
                        "component": "ConsolePageComponent"
                    },
                    {
                        "path": "fe/navigation",
                        "component": "NavigationPageComponent"
                    },
                    {
                        "path": "fe/datasources",
                        "component": "DataSourcesPageComponent"
                    },
                    {
                        "path": "fe/datasources/:systemComponentKey",
                        "component": "DataSourcesPageComponent"
                    },
                    {
                        "path": "fe/datasources/:systemComponentKey/metamodel",
                        "component": "MetaModelPageComponent"
                    },
                    {
                        "path": "fe/datasources/:systemComponentKey/settings",
                        "component": "ConnectionSettingsPageComponent"
                    },
                    {
                        "path": "fe/environments",
                        "component": "EnvironmentsPageComponent"
                    },
                    {
                        "path": "fe/snapshot/:snapshotId",
                        "component": "SnapshotPageComponent"
                    },
                    {
                        "path": "fe/dummy/:executionId",
                        "component": "DummyPageComponent"
                    },
                    {
                        "path": "fe/query/:queryId",
                        "component": "QueryPageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiConfiguration",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/api-configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiConfigurationParams",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/base-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BaseService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/models/attribute-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/collection-nav-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionNavItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/collection-snapshot.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionSnapshot",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/collection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Collection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/column.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/connection-test-request-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConnectionTestRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/connection-test-response-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConnectionTestResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/console-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/console-descriptor-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleDescriptorItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/entity-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EntityDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/environment-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/execution-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExecutionDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/execution-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExecutionId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/file-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileStore",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/file-system.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileSystem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/iterable-file-store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IterableFileStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/iterable-path.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IterablePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/meta-model-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/mongo-meta-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoMetaModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/mongo-navigation-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoNavigationModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/mongo-snapshot.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoSnapshot",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/nav-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/navigation-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/paging-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PagingDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/path.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Path",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/query-composite-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QueryCompositeDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/query-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "QueryDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/result-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResultDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/row.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Row",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/setting-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-component-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-descriptor-item-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDescriptorItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-id.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotId",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snapshot-summary-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotSummaryDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/snippet-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnippetDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/structure-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StructureDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-check-result-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemCheckResultDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-component-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemComponentDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-description-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemDescriptionDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/system-type-descriptor-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemTypeDescriptorDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/tabular-result-set-meta-data-dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabularResultSetMetaDataDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/tabular-result-set.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TabularResultSet",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/user-principal-lookup-service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserPrincipalLookupService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/models/workspace-settings.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WorkspaceSettings",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HeaderParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Parameter",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParameterCodec",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QueryParameter",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RequestBuilder",
                "coveragePercent": 37,
                "coverageCount": "6/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ParameterOptions",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/api/request-builder.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ParameterCodecInstance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/api/services/command-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommandControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/api/services/connection-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConnectionControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/api/services/console-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConsoleControllerService",
                "coveragePercent": 91,
                "coverageCount": "22/24",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/meta-model-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetaModelControllerService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/mongo-snapshot-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoSnapshotControllerService",
                "coveragePercent": 83,
                "coverageCount": "10/12",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/redirect-to-angular.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectToAngularService",
                "coveragePercent": 92,
                "coverageCount": "25/27",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/snapshot-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnapshotControllerService",
                "coveragePercent": 88,
                "coverageCount": "16/18",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/system-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/api/services/system-description-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemDescriptionControllerService",
                "coveragePercent": 88,
                "coverageCount": "16/18",
                "status": "very-good"
            },
            {
                "filePath": "src/app/api/services/workspace-rest-controller.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceRestControllerService",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmationDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/confirmation-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/confirmation-dialog/has-confirmation-dialog.mixin.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HasConfirmationDialogMixin",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/connection-status/connection-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectionStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/connection-status/connection-status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConnectionStatusService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/connection-status/http-error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/health-check.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HealthCheckService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/logging.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/logging.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logChangesToObservable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/modal/modal-service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_1_10_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_2_10_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_40_10_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_40_10_3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_55_10_1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_55_10_2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_55_10_3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_55_10_5",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case_55_10_6",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/pager/pager.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PagerComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/popup-menu/popup-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/common/popup-menu/popup-menu.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PopupMenuItemSpec",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/routing.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoutingService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/action-buttons/action-buttons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActionButtonsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/action-buttons/action-buttons.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionSpec",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/action-buttons/action-buttons.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionsSpec",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/breadcrumb/breadcrumb.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BreadcrumbItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommandIsStarted",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommandProgressComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SubcommandDone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SubcommandError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SubcommandPaused",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/command-progress/command-progress.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SubcommandUnresponsive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/form-input-floating/form-input-floating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormInputFloatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/info/info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/intro/intro.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntroComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/intro/intro.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/intro/intro.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IntroComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/layout-1col/layout-1col.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Layout1ColComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/modal-footer/modal-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/modal-header/modal-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/nav/nav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavItemSpec",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/nav/nav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavSpec",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/nav/nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/nav/nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/side-bar/side-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/side-bar/side-bar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ActionSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/side-bar/side-bar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SideBarService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/status/status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/status/status.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConnectionStatus",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ConnectionProblem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StatusComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/status/status.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StatusOK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/styleguide/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/common/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/common/toast/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/common/toast/toast.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOAST_LEVEL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/validation-messages/validation-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ValidationMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/common/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showValidationMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/common/validators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unique",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/component/data-source-selection-panel/data-source-selection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataSourceSelectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/component/data-source-selection-panel/data-source-selection-panel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSourceSelection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConsolePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/console-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConsolePanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistoryPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/history-panel/history-panel.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HistoryItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/output-panel/output-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OutputPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnippetDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnippetDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnippetDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Case1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-dialog/snippet-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SnippetDialogComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/snippet-panel/snippet-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnippetPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Result",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console-panel/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TableComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConsoleService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConsoleState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/console-page/console.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Output",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-panel/navigation-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-selection-panel/navigation-selection-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationSelectionPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree-item/navigation-tree-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationTreeItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavTreeItemDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "listOfValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customersNode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavigationTreeComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ordersNode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productsNode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rootNode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RootNode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectOrders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation-tree/navigation-tree.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithChildren",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/navigation-page/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/query/query-page/query-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QueryPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectionSettingsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectionSettingsDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConnectionTester",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SettingsDialogSpecWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-dialog/connection-settings-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/connection-settings-page/connection-settings-panel/connection-settings-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConnectionSettingsPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/data-sources-page/data-sources-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataSourcesPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SystemComponentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemComponentDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/data-sources-page/system-component-panel/system-component-dialog/system-component-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemComponentDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/data-sources-page/system-component-panel/system-component-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SystemComponentPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/environments-page/environment-panel/environment-dialog/environment-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/environments-page/environment-panel/environment-dialog/environment-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/environments-page/environment-panel/environment-dialog/environment-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/environments-page/environment-panel/environment-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/environments-page/environments-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EnvironmentsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetaModelPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetaDataService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetaModelDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-dialog/meta-model-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaModelDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetaModelPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetaModelViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ViewModelReducer",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColumnPart",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EntityItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListEntryPart",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListPart",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JDBC",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/meta-model-view/meta-model-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MetaModelViewComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MongoMetamodelPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoMetaModelService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/meta-model-page/meta-model-panel/mongo-metamodel-panel/mongo-metamodel.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoMetaModelStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/system-description.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SystemDescriptionWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/system-description.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SystemDescriptionService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/system-description.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Setting",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/system-description.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingRow",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/settings/system-description.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemDescriptionState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoNavigationModelService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-navigation-model.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoNavigationModelStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MongoSnapshotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PagedCollection",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CollectionSelector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentSelector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RootSelector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Selector",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo-snapshot.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MongoService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/mongo-snapshot/mongo.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MongoSnapshotStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/snapshot-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/snapshot.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnapshotService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshot-page/snapshot.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/dummy-page/dummy-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DummyPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StructureDto2TreeNodeConverter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-dialog/snapshot-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotDialogTreeNode",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-overview-panel/snapshot-overview-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotOverviewPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotUploadDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotUploadDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshot-upload-dialog/snapshot-upload-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnapshotUploadDialogSpec",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshots-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnapshotsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshots.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnapshotsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/snapshot/snapshots-page/snapshots.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DashboardStoreState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}